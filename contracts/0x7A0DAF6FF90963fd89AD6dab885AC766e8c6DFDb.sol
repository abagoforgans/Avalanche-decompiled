contract main {




// =====================  Runtime code  =====================


#
#  - sub_dbc926f8(?)
#
address sub_881431c1Address;
address mimAddress;
address usdtAddress;
address PAPAAddress;
address treasuryAddress;
address sub_325b69ffAddress;

function usdt() payable {
    return usdtAddress
}

function sub_325b69ff(?) payable {
    return sub_325b69ffAddress
}

function treasury() payable {
    return treasuryAddress
}

function PAPA() payable {
    return PAPAAddress
}

function sub_881431c1(?) payable {
    return sub_881431c1Address
}

function mim() payable {
    return mimAddress
}

function _fallback() payable {
    revert
}

function sub_b4e827c2(?) payable {
    require calldata.size - 4 >= 64
    if 18 == arg2:
        return arg1
    if arg2 <= 18:
        if not arg1:
            return 0
        if 10^uint8(-arg2 + 18) * arg1 / arg1 != 10^uint8(-arg2 + 18):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return (10^uint8(-arg2 + 18) * arg1)
    if not 10^uint8(arg2 - 18):
        revert with 0, 'SafeMath: division by zero'
    require arg1 == (10^uint8(arg2 - 18) * arg1 / 10^uint8(arg2 - 18)) + (arg1 % 10^uint8(arg2 - 18))
    return (arg1 / 10^uint8(arg2 - 18))
}

function sub_ed630d5c(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    if ext_call.return_data[12 len 20] != PAPAAddress:
        staticcall arg1.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            return ext_call.return_data[32] << 144, Mask(112, 0, ext_call.return_data[0])
        if ext_call.return_data[31 len 1] <= 18:
            if not Mask(112, 0, ext_call.return_data[0]):
                return ext_call.return_data[32] << 144, 0
            if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(-ext_call.return_data[0] + 18):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            return ext_call.return_data[32] << 144, 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0])
        if not 10^uint8(ext_call.return_data[0] - 18):
            revert with 0, 'SafeMath: division by zero'
        if Mask(112, 0, ext_call.return_data[0]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[0]) % 10^uint8(ext_call.return_data[0] - 18)):
            return ext_call.return_data[32] << 144, Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18)
    else:
        staticcall arg1.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            return ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
        if ext_call.return_data[31 len 1] <= 18:
            if not Mask(112, 0, ext_call.return_data[32]):
                return ext_call.return_data[0] << 144, 0
            if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(-ext_call.return_data[0] + 18):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            return ext_call.return_data[0] << 144, 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32])
        if not 10^uint8(ext_call.return_data[0] - 18):
            revert with 0, 'SafeMath: division by zero'
        if Mask(112, 0, ext_call.return_data[32]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[32]) % 10^uint8(ext_call.return_data[0] - 18)):
            return ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18)
    revert
}

function sub_5d17418c(?) payable {
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_881431c1Address)
    if ext_call.return_data[12 len 20] != PAPAAddress:
        staticcall sub_881431c1Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32])) + (0 % Mask(112, 0, ext_call.return_data[32])):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[32]) / 100000)
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000)
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[0]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[0]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[32])):
                        if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000)
    else:
        staticcall sub_881431c1Address.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not Mask(144, 112, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0])) + (0 % Mask(112, 0, ext_call.return_data[0])):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (0 / Mask(112, 0, ext_call.return_data[0]) / 100000)
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000)
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[32]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[32]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[0])):
                        if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000)
    revert
}

function backing() payable {
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_881431c1Address)
    if ext_call.return_data[12 len 20] != PAPAAddress:
        staticcall sub_881431c1Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                           2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32])) + (0 % Mask(112, 0, ext_call.return_data[32])):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[0]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[0]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[32])):
                        if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000
    else:
        staticcall sub_881431c1Address.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not Mask(144, 112, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                           2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           0 / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0])) + (0 % Mask(112, 0, ext_call.return_data[0])):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 0 / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   0 / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[32]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[32]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[0])):
                        if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   0 / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000
    revert
}

function sub_5f69e61f(?) payable {
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(sub_881431c1Address)
    staticcall sub_881431c1Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_881431c1Address)
    if ext_call.return_data[12 len 20] != PAPAAddress:
        staticcall sub_881431c1Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                           2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                           ext_call.return_data[0] << 144,
                                           ext_call.return_data[32] << 144,
                                           2 * ext_call.return_data[0],
                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           0,
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[32] << 144,
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[32]) * 0 / Mask(112, 0, ext_call.return_data[32])) + (0 % Mask(112, 0, ext_call.return_data[32])):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   0,
                                                   ext_call.return_data[32] << 144,
                                                   2 * ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   0,
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           0,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[32] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) == (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) % Mask(112, 0, ext_call.return_data[32])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                   ext_call.return_data[32] << 144,
                                                   2 * ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   0,
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[0]),
                                                                   ext_call.return_data[32] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[0]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[0]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32])) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[32])):
                        if Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) == (100000 * Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000) + (Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                        if 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                   2 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                   ext_call.return_data[32] << 144,
                                                   2 * ext_call.return_data[0],
                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0],
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (0 % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   0 / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   0,
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[32]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) - (Mask(112, 0, ext_call.return_data[32]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[32]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[32] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] - Mask(112, 0, ext_call.return_data[32])
    else:
        staticcall sub_881431c1Address.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 18 == ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.balanceOf(address arg1) with:
                            gas gas_remaining wei
                           args treasuryAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(mimAddress)
                    staticcall mimAddress.decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 18 == ext_call.return_data[31 len 1]:
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.balanceOf(address arg1) with:
                                gas gas_remaining wei
                               args treasuryAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(usdtAddress)
                        staticcall usdtAddress.decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 18 == ext_call.return_data[31 len 1]:
                            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(sub_325b69ffAddress)
                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not Mask(144, 112, ext_call.return_data[0]):
                                revert with 0, 'SafeMath: division by zero'
                            if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                           2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                           ext_call.return_data[32] << 144,
                                           ext_call.return_data[0] << 144,
                                           2 * ext_call.return_data[0],
                                           Mask(144, 112, ext_call.return_data[0])
                        else:
                            if ext_call.return_data[31 len 1] <= 18:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                            else:
                                if not 10^uint8(ext_call.return_data[0] - 18):
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                    else:
                        if ext_call.return_data[31 len 1] <= 18:
                            if not ext_call.return_data[0]:
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           0 / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           0,
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           Mask(144, 112, ext_call.return_data[0])
                            else:
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           Mask(144, 112, ext_call.return_data[0])
                        else:
                            if not 10^uint8(ext_call.return_data[0] - 18):
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                        if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   ext_call.return_data[32] << 144,
                                                   ext_call.return_data[0] << 144,
                                                   ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           ext_call.return_data[32] << 144,
                                                           ext_call.return_data[0] << 144,
                                                           2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                           Mask(144, 112, ext_call.return_data[0])
        else:
            if ext_call.return_data[31 len 1] <= 18:
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 == (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(112, 0, ext_call.return_data[0])) + (0 % Mask(112, 0, ext_call.return_data[0])):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) == (100000 * 0 / Mask(112, 0, ext_call.return_data[0]) / 100000) + (0 / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   0,
                                                   ext_call.return_data[0] << 144,
                                                   2 * ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   0 / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   0,
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           0,
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 0 / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   0,
                                                                   ext_call.return_data[0] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                else:
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^uint8(-ext_call.return_data[0] + 18):
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) == (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) % Mask(112, 0, ext_call.return_data[0])):
                        if 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                   ext_call.return_data[0] << 144,
                                                   2 * ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   0 / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   0,
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return 10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * Mask(112, 0, ext_call.return_data[32]),
                                                                   ext_call.return_data[0] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
            else:
                if not 10^uint8(ext_call.return_data[0] - 18):
                    revert with 0, 'SafeMath: division by zero'
                if Mask(112, 0, ext_call.return_data[32]) == (10^uint8(ext_call.return_data[0] - 18) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18)) + (Mask(112, 0, ext_call.return_data[32]) % 10^uint8(ext_call.return_data[0] - 18)):
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) == (Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0])) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) % Mask(112, 0, ext_call.return_data[0])):
                        if Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) == (100000 * Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000) + (Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) % 100000):
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.balanceOf(address arg1) with:
                                    gas gas_remaining wei
                                   args treasuryAddress
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(mimAddress)
                            staticcall mimAddress.decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if 18 == ext_call.return_data[31 len 1]:
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.balanceOf(address arg1) with:
                                        gas gas_remaining wei
                                       args treasuryAddress
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(usdtAddress)
                                staticcall usdtAddress.decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 18 == ext_call.return_data[31 len 1]:
                                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(sub_325b69ffAddress)
                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not Mask(144, 112, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: division by zero'
                                    if 2 * ext_call.return_data[0] == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                        if 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                   2 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                   ext_call.return_data[0] << 144,
                                                   2 * ext_call.return_data[0],
                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[31 len 1] <= 18:
                                        if not ext_call.return_data[0]:
                                            if ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if not 10^uint8(ext_call.return_data[0] - 18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                            else:
                                if ext_call.return_data[31 len 1] <= 18:
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] == (ext_call.return_data[0] * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0],
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 0 == (ext_call.return_data[0] * 0 / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 0 / Mask(144, 112, ext_call.return_data[0])) + (0 % Mask(144, 112, ext_call.return_data[0])):
                                                        if 0 / Mask(144, 112, ext_call.return_data[0]) == (100000 * 0 / Mask(144, 112, ext_call.return_data[0]) / 100000) + (0 / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   0 / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   0,
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                    else:
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] == (ext_call.return_data[0] * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0])) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] % Mask(144, 112, ext_call.return_data[0])):
                                                        if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) == (100000 * 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0],
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) < 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) == (ext_call.return_data[0] * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0])) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                else:
                                    if not 10^uint8(ext_call.return_data[0] - 18):
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.balanceOf(address arg1) with:
                                                gas gas_remaining wei
                                               args treasuryAddress
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(usdtAddress)
                                        staticcall usdtAddress.decimals() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 18 == ext_call.return_data[31 len 1]:
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(sub_325b69ffAddress)
                                            staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not Mask(144, 112, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                if ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                    return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                           Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                           ext_call.return_data[0] << 144,
                                                           ext_call.return_data[0] + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                           Mask(144, 112, ext_call.return_data[0])
                                        else:
                                            if ext_call.return_data[31 len 1] <= 18:
                                                if not ext_call.return_data[0]:
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                                else:
                                                    if 10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0] / ext_call.return_data[0] != 10^uint8(-ext_call.return_data[0] + 18):
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) == (ext_call.return_data[0] * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0])) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) % Mask(144, 112, ext_call.return_data[0])):
                                                        if (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) == (100000 * (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000) + ((10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   (10^uint8(-ext_call.return_data[0] + 18) * ext_call.return_data[0]) + (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)),
                                                                   Mask(144, 112, ext_call.return_data[0])
                                            else:
                                                if not 10^uint8(ext_call.return_data[0] - 18):
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] == (10^uint8(ext_call.return_data[0] - 18) * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18)) + (ext_call.return_data[0] % 10^uint8(ext_call.return_data[0] - 18)):
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) < ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18):
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(sub_325b69ffAddress)
                                                    staticcall sub_325b69ffAddress.PAPACirculatingSupply() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if Mask(112, 0, ext_call.return_data[0]) > ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not Mask(144, 112, ext_call.return_data[0]):
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) == (ext_call.return_data[0] * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) - (Mask(112, 0, ext_call.return_data[0]) * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0])) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) % Mask(144, 112, ext_call.return_data[0])):
                                                        if 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) == (100000 * 2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000) + (2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) % 100000):
                                                            return Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18) / Mask(112, 0, ext_call.return_data[0]) / 100000, 
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18) / Mask(144, 112, ext_call.return_data[0]) / 100000,
                                                                   Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0] - 18),
                                                                   ext_call.return_data[0] << 144,
                                                                   2 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0] - 18),
                                                                   Mask(144, 112, ext_call.return_data[0])
    revert
}



}
