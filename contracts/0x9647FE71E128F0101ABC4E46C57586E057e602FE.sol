contract main {




// =====================  Runtime code  =====================


mapping of uint8 stor0;

function withdraw(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    call arg1.transfer(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args 0xf8f181d466d44974257f9ccf0ce8398b7e059054, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_6f4d251b(?) {
    require calldata.size - 4 >= 192
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    require arg6 == address(arg6)
    require ext_code.size(address(arg2))
    call address(arg2).accrue() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    call address(arg2).updateExchangeRate() with:
         gas gas_remaining wei
    require return_data.size >= 64
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    staticcall address(arg2).collateral() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[224] = ext_call.return_data[12 len 20]
    staticcall address(arg2).bentoBox() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[192] = ext_call.return_data[12 len 20]
    if stor0[address(ext_call.return_data[0])]:
        staticcall address(arg2).totalBorrow() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((6 * ceil32(return_data.size)) + 512 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        staticcall address(arg2).userBorrowPart(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        staticcall address(arg2).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        mem[(8 * ceil32(return_data.size)) + 580] = 0
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
            revert with 0, 'has liquidity'
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args mem[236 len 20]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((11 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        if 0 == ext_call.return_data[48 len 16]:
            if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(11 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(11 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(13 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
            else:
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(11 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(11 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(13 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
        else:
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(11 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(11 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(13 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
            else:
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(11 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(11 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(13 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(13 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (13 * ceil32(return_data.size)) + 608
                        t = (13 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(13 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (14 * ceil32(return_data.size)) + 608
                            t = (14 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(13 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(14 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (14 * ceil32(return_data.size)) + 608
                                t = (14 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                gas gas_remaining wei
               args address(arg3), this.address
    else:
        staticcall address(arg2).masterContract() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[12 len 20]))
        call address(ext_call.return_data[12 len 20]).setMasterContractApproval(address arg1, address arg2, bool arg3, uint8 arg4, bytes32 arg5, bytes32 arg6) with:
             gas gas_remaining wei
            args address(this.address), address(ext_call.return_data[0]), 1, 0, 0, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        stor0[mem[204 len 20]] = 1
        staticcall address(arg2).totalBorrow() with:
                gas gas_remaining wei
        require return_data.size >= 64
        if not bool((7 * ceil32(return_data.size)) + 512 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        staticcall address(arg2).userBorrowPart(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        staticcall address(arg2).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
            revert with 0, 'has liquidity'
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args mem[236 len 20]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((12 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        if 0 == ext_call.return_data[48 len 16]:
            if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
            else:
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
        else:
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
            else:
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
    require return_data.size >= 32
    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
         gas gas_remaining wei
        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    staticcall address(arg3).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    call address(arg3).transfer(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args 0xf8f181d466d44974257f9ccf0ce8398b7e059054, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_cd73ff3a(?) {
    require calldata.size - 4 >= 224
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    require arg6 == address(arg6)
    staticcall address(arg2).userCollateralShare(address arg1) with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < arg7:
        revert with 0, 'noliq'
    mem[ceil32(return_data.size) + 384] = 0
    mem[ceil32(return_data.size) + 416] = 0
    require ext_code.size(address(arg2))
    call address(arg2).accrue() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    call address(arg2).updateExchangeRate() with:
         gas gas_remaining wei
    mem[ceil32(return_data.size) + 448 len 64] = ext_call.return_data[0 len 64]
    require return_data.size >= 64
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    mem[ceil32(return_data.size) + 128] = ext_call.return_data[32]
    staticcall address(arg2).collateral() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 448] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
    staticcall address(arg2).bentoBox() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 448] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(return_data.size) + 192] = ext_call.return_data[12 len 20]
    if stor0[address(ext_call.return_data[0])]:
        staticcall address(arg2).totalBorrow() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((7 * ceil32(return_data.size)) + 512 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        staticcall address(arg2).userBorrowPart(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        mem[(7 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[(8 * ceil32(return_data.size)) + 516] = address(arg1)
        staticcall address(arg2).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        mem[(8 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
            revert with 0, 'has liquidity'
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args mem[ceil32(return_data.size) + 236 len 20]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((12 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        if 0 == ext_call.return_data[48 len 16]:
            if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
            else:
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
        else:
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
            else:
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(12 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(12 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(14 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(14 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 608
                        t = (14 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                else:
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(14 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[16 len 16]:
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(15 * ceil32(return_data.size)) + 640] = 1
                            idx = 0
                            s = (15 * ceil32(return_data.size)) + 608
                            t = (15 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[(14 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(14 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[16 len 16]:
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(15 * ceil32(return_data.size)) + 640] = 1
                                idx = 0
                                s = (15 * ceil32(return_data.size)) + 608
                                t = (15 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
        require return_data.size >= 32
        call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
             gas gas_remaining wei
            args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
    else:
        staticcall address(arg2).masterContract() with:
                gas gas_remaining wei
        mem[(6 * ceil32(return_data.size)) + 448] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(7 * ceil32(return_data.size)) + 484] = address(ext_call.return_data[0])
        mem[(7 * ceil32(return_data.size)) + 516] = 1
        mem[(7 * ceil32(return_data.size)) + 548] = 0
        mem[(7 * ceil32(return_data.size)) + 580] = 0
        mem[(7 * ceil32(return_data.size)) + 612] = 0
        require ext_code.size(address(ext_call.return_data[12 len 20]))
        call address(ext_call.return_data[12 len 20]).setMasterContractApproval(address arg1, address arg2, bool arg3, uint8 arg4, bytes32 arg5, bytes32 arg6) with:
             gas gas_remaining wei
            args address(this.address), address(ext_call.return_data[0]), 1, 0, 0, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        stor0[mem[ceil32(return_data.size) + 204 len 20]] = 1
        staticcall address(arg2).totalBorrow() with:
                gas gas_remaining wei
        mem[(7 * ceil32(return_data.size)) + 448 len 64] = ext_call.return_data[0 len 64]
        require return_data.size >= 64
        if not bool((8 * ceil32(return_data.size)) + 512 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        mem[(8 * ceil32(return_data.size)) + 448] = ext_call.return_data[0]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        mem[(8 * ceil32(return_data.size)) + 480] = ext_call.return_data[32]
        mem[ceil32(return_data.size) + 352] = (8 * ceil32(return_data.size)) + 448
        mem[(8 * ceil32(return_data.size)) + 516] = address(arg1)
        staticcall address(arg2).userBorrowPart(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        mem[(8 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        mem[(10 * ceil32(return_data.size)) + 516] = address(arg1)
        staticcall address(arg2).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        mem[(10 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        mem[(11 * ceil32(return_data.size)) + 516] = address(ext_call.return_data[12 len 20])
        mem[(11 * ceil32(return_data.size)) + 548] = 10^13 * ext_call.return_data[0] * arg4
        mem[(11 * ceil32(return_data.size)) + 580] = 0
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
        mem[(11 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
            revert with 0, 'has liquidity'
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args mem[ceil32(return_data.size) + 236 len 20]
        mem[(12 * ceil32(return_data.size)) + 512 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((13 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        mem[(13 * ceil32(return_data.size)) + 512] = ext_call.return_data[0]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        mem[(13 * ceil32(return_data.size)) + 544] = ext_call.return_data[32]
        if 0 == ext_call.return_data[48 len 16]:
            if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(13 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(13 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                mem[(13 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(14 * ceil32(return_data.size)) + 580] = address(arg1)
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                mem[(14 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    require return_data.size >= 32
                    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                else:
                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                        mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(15 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                        if not ext_call.return_data[16 len 16]:
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[ceil32(return_data.size) + 160] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(16 * ceil32(return_data.size)) + 708] = address(arg3)
                    mem[(16 * ceil32(return_data.size)) + 740] = this.address
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[0]
                    require return_data.size >= 32
                    call mem[ceil32(return_data.size) + 204 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
            else:
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(13 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(13 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                mem[(13 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(14 * ceil32(return_data.size)) + 580] = address(arg1)
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                mem[(14 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    require return_data.size >= 32
                    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                else:
                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                        mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(15 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                        if not ext_call.return_data[16 len 16]:
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[ceil32(return_data.size) + 160] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(16 * ceil32(return_data.size)) + 708] = address(arg3)
                    mem[(16 * ceil32(return_data.size)) + 740] = this.address
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[0]
                    require return_data.size >= 32
                    call mem[ceil32(return_data.size) + 204 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
        else:
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                mem[(13 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                mem[(13 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                mem[(13 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(14 * ceil32(return_data.size)) + 580] = address(arg1)
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                mem[(14 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    require return_data.size >= 32
                    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                else:
                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                        mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(15 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                        if not ext_call.return_data[16 len 16]:
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[ceil32(return_data.size) + 160] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(16 * ceil32(return_data.size)) + 708] = address(arg3)
                    mem[(16 * ceil32(return_data.size)) + 740] = this.address
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[0]
                    require return_data.size >= 32
                    call mem[ceil32(return_data.size) + 204 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
            else:
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                    revert with 'NH{q', 17
                if not ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 18
                mem[(13 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                mem[(13 * ceil32(return_data.size)) + 612] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                mem[(13 * ceil32(return_data.size)) + 644] = 0
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                mem[(13 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(14 * ceil32(return_data.size)) + 580] = address(arg1)
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                mem[(14 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                    if not ext_call.return_data[16 len 16]:
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        mem[(15 * ceil32(return_data.size)) + 608] = address(arg1)
                        mem[(15 * ceil32(return_data.size)) + 640] = 1
                        idx = 0
                        s = (15 * ceil32(return_data.size)) + 608
                        t = (15 * ceil32(return_data.size)) + 868
                        while idx < 1:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(arg2))
                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                             gas gas_remaining wei
                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    require return_data.size >= 32
                    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                else:
                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                    if arg5 and ext_call.return_data[32] > -1 / arg5:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not arg5 * ext_call.return_data[32]:
                        revert with 'NH{q', 18
                    if 0 == ext_call.return_data[48 len 16]:
                        mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                        mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                        mem[(15 * ceil32(return_data.size)) + 644] = 0
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                        mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                        if not ext_call.return_data[16 len 16]:
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                        else:
                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(16 * ceil32(return_data.size)) + 576] = 1
                            mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                            mem[(16 * ceil32(return_data.size)) + 640] = 1
                            mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                            mem[(16 * ceil32(return_data.size)) + 836] = 1
                            idx = 0
                            s = (16 * ceil32(return_data.size)) + 608
                            t = (16 * ceil32(return_data.size)) + 868
                            while idx < 1:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[(16 * ceil32(return_data.size)) + 900] = 1
                            mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                            require ext_code.size(address(arg2))
                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                 gas gas_remaining wei
                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                    else:
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                            mem[ceil32(return_data.size) + 160] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                            else:
                                if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                        else:
                            if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                revert with 'NH{q', 17
                            mem[ceil32(return_data.size) + 160] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            mem[(15 * ceil32(return_data.size)) + 580] = mem[ceil32(return_data.size) + 236 len 20]
                            mem[(15 * ceil32(return_data.size)) + 612] = ext_call.return_data[0]
                            mem[(15 * ceil32(return_data.size)) + 644] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 236 len 20], ext_call.return_data[0], 0
                            mem[(15 * ceil32(return_data.size)) + 576] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                            if not ext_call.return_data[16 len 16]:
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                            else:
                                if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 18
                                mem[(16 * ceil32(return_data.size)) + 576] = 1
                                mem[(16 * ceil32(return_data.size)) + 608] = address(arg1)
                                mem[(16 * ceil32(return_data.size)) + 640] = 1
                                mem[(16 * ceil32(return_data.size)) + 672] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 704] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                mem[(16 * ceil32(return_data.size)) + 836] = 1
                                idx = 0
                                s = (16 * ceil32(return_data.size)) + 608
                                t = (16 * ceil32(return_data.size)) + 868
                                while idx < 1:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(16 * ceil32(return_data.size)) + 900] = 1
                                mem[(16 * ceil32(return_data.size)) + 932] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                mem[(16 * ceil32(return_data.size)) + 772] = address(arg6)
                                mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                require ext_code.size(address(arg2))
                                call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                     gas gas_remaining wei
                                    args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 868], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(16 * ceil32(return_data.size)) + 708] = address(arg3)
                    mem[(16 * ceil32(return_data.size)) + 740] = this.address
                    staticcall mem[ceil32(return_data.size) + 204 len 20].balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[0]
                    require return_data.size >= 32
                    call mem[ceil32(return_data.size) + 204 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    staticcall address(arg3).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    call address(arg3).transfer(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args 0xf8f181d466d44974257f9ccf0ce8398b7e059054, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_df84a62a(?) {
    require calldata.size - 4 >= 224
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    require arg4 == address(arg4)
    require arg5 == address(arg5)
    staticcall address(arg4).userBorrowPart(address arg1) with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_code.size(address(arg4))
    call address(arg4).accrue() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    call address(arg4).updateExchangeRate() with:
         gas gas_remaining wei
    require return_data.size >= 64
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    staticcall address(arg4).totalBorrow() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if not bool((4 * ceil32(return_data.size)) + 512 <= test266151307()):
        revert with 'NH{q', 65
    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
    if 0 == ext_call.return_data[48 len 16]:
        staticcall address(arg4).bentoBox() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        staticcall address(arg4).collateral() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[224] = ext_call.return_data[12 len 20]
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args address(ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((8 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        if ext_call.return_data[0] and arg6 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * arg6 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg6:
            revert with 'NH{q', 17
        if not ext_call.return_data[16 len 16]:
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args mem[236 len 20], ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                staticcall address(arg5).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                s = 10
                t = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                staticcall address(arg2).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall mem[236 len 20].decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                u = 10
                v = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if u > -1 / u:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        u = u * u
                        v = v
                        idx = uint255(idx) * 0.5
                        continue 
                    u = u * u
                    v = u * v
                    idx = uint255(idx) * 0.5
                    continue 
                if v > -1 / u:
                    revert with 'NH{q', 17
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                       ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
        else:
            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                revert with 'NH{q', 18
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args mem[236 len 20], ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                staticcall address(arg5).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                s = 10
                t = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                staticcall address(arg2).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall mem[236 len 20].decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                u = 10
                v = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if u > -1 / u:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        u = u * u
                        v = v
                        idx = uint255(idx) * 0.5
                        continue 
                    u = u * u
                    v = u * v
                    idx = uint255(idx) * 0.5
                    continue 
                if v > -1 / u:
                    revert with 'NH{q', 17
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                       ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
    else:
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        staticcall address(arg4).bentoBox() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        staticcall address(arg4).collateral() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[224] = ext_call.return_data[12 len 20]
        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                gas gas_remaining wei
               args address(ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if not bool((8 * ceil32(return_data.size)) + 576 <= test266151307()):
            revert with 'NH{q', 65
        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg6 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6:
            revert with 'NH{q', 17
        if not ext_call.return_data[16 len 16]:
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                staticcall address(arg5).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                s = 10
                t = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                staticcall address(arg2).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 17
                staticcall mem[236 len 20].decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                u = 10
                v = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if u > -1 / u:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        u = u * u
                        v = v
                        idx = uint255(idx) * 0.5
                        continue 
                    u = u * u
                    v = u * v
                    idx = uint255(idx) * 0.5
                    continue 
                if v > -1 / u:
                    revert with 'NH{q', 17
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                       ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
        else:
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18:
                revert with 'NH{q', 17
            if not ext_call.return_data[16 len 16]:
                revert with 'NH{q', 18
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args mem[236 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                staticcall address(arg5).decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 17
                    staticcall mem[236 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                s = 10
                t = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                staticcall address(arg2).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 17
                staticcall mem[236 len 20].decimals() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if 18 < ext_call.return_data[31 len 1]:
                    revert with 'NH{q', 17
                if not uint8(-ext_call.return_data[31 len 1] + 18):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                u = 10
                v = 1
                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                while idx > 1:
                    if u > -1 / u:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        u = u * u
                        v = v
                        idx = uint255(idx) * 0.5
                        continue 
                    u = u * u
                    v = u * v
                    idx = uint255(idx) * 0.5
                    continue 
                if v > -1 / u:
                    revert with 'NH{q', 17
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                       ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
    if arg6 and ext_call.return_data[32] > -1 / arg6:
        revert with 'NH{q', 17
    if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if not arg6 * ext_call.return_data[32]:
        revert with 'NH{q', 18
    if 0 == ext_call.return_data[48 len 16]:
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args mem[236 len 20], ext_call.return_data[0], 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        staticcall address(arg5).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg2).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                revert with 'NH{q', 17
            staticcall mem[236 len 20].decimals() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if 18 < ext_call.return_data[31 len 1]:
                revert with 'NH{q', 17
            if not uint8(-ext_call.return_data[31 len 1] + 18):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                       ext_call.return_data[0]
            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                       ext_call.return_data[0]
            s = 10
            t = 1
            idx = uint8(-ext_call.return_data[31 len 1] + 18)
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg2).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                revert with 'NH{q', 17
            staticcall mem[236 len 20].decimals() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if 18 < ext_call.return_data[31 len 1]:
                revert with 'NH{q', 17
            if not uint8(-ext_call.return_data[31 len 1] + 18):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                       ext_call.return_data[0]
            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                       ext_call.return_data[0]
            s = 10
            t = 1
            idx = uint8(-ext_call.return_data[31 len 1] + 18)
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                   ext_call.return_data[0]
        s = 10
        t = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = s * t
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        staticcall address(arg2).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
            revert with 'NH{q', 17
        staticcall mem[236 len 20].decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                   ext_call.return_data[0]
        u = 10
        v = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = u * v
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
               ext_call.return_data[0]
    if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
        revert with 'NH{q', 17
    if not ext_call.return_data[48 len 16]:
        revert with 'NH{q', 18
    if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
        revert with 'NH{q', 17
    if not ext_call.return_data[16 len 16]:
        revert with 'NH{q', 18
    if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args mem[236 len 20], ext_call.return_data[0], 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        staticcall address(arg5).decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg2).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            staticcall mem[236 len 20].decimals() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if 18 < ext_call.return_data[31 len 1]:
                revert with 'NH{q', 17
            if not uint8(-ext_call.return_data[31 len 1] + 18):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                       ext_call.return_data[0]
            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                       ext_call.return_data[0]
            s = 10
            t = 1
            idx = uint8(-ext_call.return_data[31 len 1] + 18)
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg2).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                revert with 'NH{q', 17
            staticcall mem[236 len 20].decimals() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if 18 < ext_call.return_data[31 len 1]:
                revert with 'NH{q', 17
            if not uint8(-ext_call.return_data[31 len 1] + 18):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                       ext_call.return_data[0]
            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                staticcall address(arg3).getPrice() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(arg4).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                    revert with 'NH{q', 17
                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[48 len 16]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           0,
                           ext_call.return_data[0]
                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                    revert with 'NH{q', 17
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                       ext_call.return_data[0]
            s = 10
            t = 1
            idx = uint8(-ext_call.return_data[31 len 1] + 18)
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                   ext_call.return_data[0]
        s = 10
        t = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = s * t
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        staticcall address(arg2).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
            revert with 'NH{q', 17
        staticcall mem[236 len 20].decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                   ext_call.return_data[0]
        u = 10
        v = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = u * v
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
               ext_call.return_data[0]
    if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
        revert with 'NH{q', 17
    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
            gas gas_remaining wei
           args mem[236 len 20], ext_call.return_data[0], 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    staticcall address(arg5).decimals() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if 18 < ext_call.return_data[31 len 1]:
        revert with 'NH{q', 17
    if not uint8(-ext_call.return_data[31 len 1] + 18):
        staticcall address(arg2).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and 1 > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
            revert with 'NH{q', 17
        staticcall mem[236 len 20].decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
                   ext_call.return_data[0]
        s = 10
        t = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = s * t
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
               ext_call.return_data[0]
    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
        staticcall address(arg2).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
            revert with 'NH{q', 17
        staticcall mem[236 len 20].decimals() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if 18 < ext_call.return_data[31 len 1]:
            revert with 'NH{q', 17
        if not uint8(-ext_call.return_data[31 len 1] + 18):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
                   ext_call.return_data[0]
        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
            staticcall address(arg3).getPrice() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(arg4).userCollateralShare(address arg1) with:
                    gas gas_remaining wei
                   args address(arg1)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                revert with 'NH{q', 17
            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                revert with 'NH{q', 17
            if not ext_call.return_data[48 len 16]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                       0,
                       ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                revert with 'NH{q', 17
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
                   ext_call.return_data[0]
        s = 10
        t = 1
        idx = uint8(-ext_call.return_data[31 len 1] + 18)
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = s * t
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
               ext_call.return_data[0]
    s = 10
    t = 1
    idx = uint8(-ext_call.return_data[31 len 1] + 18)
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = s * t
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    staticcall address(arg2).getPrice() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and s * t > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
        revert with 'NH{q', 17
    staticcall mem[236 len 20].decimals() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if 18 < ext_call.return_data[31 len 1]:
        revert with 'NH{q', 17
    if not uint8(-ext_call.return_data[31 len 1] + 18):
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
               ext_call.return_data[0]
    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
        staticcall address(arg3).getPrice() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(arg4).userCollateralShare(address arg1) with:
                gas gas_remaining wei
               args address(arg1)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
            revert with 'NH{q', 17
        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                gas gas_remaining wei
               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
            revert with 'NH{q', 17
        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
            revert with 'NH{q', 17
        if not ext_call.return_data[48 len 16]:
            revert with 'NH{q', 18
        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                   0,
                   ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
            revert with 'NH{q', 17
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
               ext_call.return_data[0]
    u = 10
    v = 1
    idx = uint8(-ext_call.return_data[31 len 1] + 18)
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = u * v
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    staticcall address(arg3).getPrice() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
        revert with 'NH{q', 17
    staticcall address(arg4).userCollateralShare(address arg1) with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
        revert with 'NH{q', 17
    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
            gas gas_remaining wei
           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
        revert with 'NH{q', 17
    if not ext_call.return_data[48 len 16]:
        revert with 'NH{q', 18
    if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
               0,
               ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
        revert with 'NH{q', 17
    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
           (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
           ext_call.return_data[0]
}

function _fallback() payable {
    if calldata.size < 4:
        require not calldata.size
    else:
        if unknown_0x51cff8d9(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 32
            require arg1 == address(arg1)
            staticcall address(arg1).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            call address(arg1).transfer(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args 0xf8f181d466d44974257f9ccf0ce8398b7e059054, ext_call.return_data[0]
        else:
            if unknown_0x6f4d251b(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 192
                require arg1 == address(arg1)
                require arg2 == address(arg2)
                require arg3 == address(arg3)
                require arg6 == address(arg6)
                require ext_code.size(address(arg2))
                call address(arg2).accrue() with:
                     gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                call address(arg2).updateExchangeRate() with:
                     gas gas_remaining wei
                require return_data.size >= 64
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                staticcall address(arg2).collateral() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[256] = ext_call.return_data[12 len 20]
                staticcall address(arg2).bentoBox() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[224] = ext_call.return_data[12 len 20]
                if stor0[address(ext_call.return_data[0])]:
                    staticcall address(arg2).totalBorrow() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((6 * ceil32(return_data.size)) + 544 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    staticcall address(arg2).userBorrowPart(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    staticcall address(arg2).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    mem[(8 * ceil32(return_data.size)) + 612] = 0
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
                        revert with 0, 'has liquidity'
                    staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                            gas gas_remaining wei
                           args mem[268 len 20]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((11 * ceil32(return_data.size)) + 608 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    if 0 == ext_call.return_data[48 len 16]:
                        if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(11 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(11 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(13 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(11 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(11 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(13 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(11 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(11 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(13 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(11 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(11 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(13 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(13 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (13 * ceil32(return_data.size)) + 640
                                    t = (13 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(13 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(13 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(14 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (14 * ceil32(return_data.size)) + 640
                                        t = (14 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(13 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(14 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (14 * ceil32(return_data.size)) + 640
                                            t = (14 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                else:
                    staticcall address(arg2).masterContract() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    require ext_code.size(address(ext_call.return_data[12 len 20]))
                    call address(ext_call.return_data[12 len 20]).setMasterContractApproval(address arg1, address arg2, bool arg3, uint8 arg4, bytes32 arg5, bytes32 arg6) with:
                         gas gas_remaining wei
                        args address(this.address), address(ext_call.return_data[0]), 1, 0, 0, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    stor0[mem[236 len 20]] = 1
                    staticcall address(arg2).totalBorrow() with:
                            gas gas_remaining wei
                    require return_data.size >= 64
                    if not bool((7 * ceil32(return_data.size)) + 544 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    staticcall address(arg2).userBorrowPart(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    staticcall address(arg2).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
                        revert with 0, 'has liquidity'
                    staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                            gas gas_remaining wei
                           args mem[268 len 20]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((12 * ceil32(return_data.size)) + 608 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    if 0 == ext_call.return_data[48 len 16]:
                        if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args address(arg3), this.address
                require return_data.size >= 32
                call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
            else:
                if uint32(call.func_hash) >> 224 != unknown_0xcd73ff3a(?????):
                    require unknown_0xdf84a62a(?????) == uint32(call.func_hash) >> 224
                    require not msg.value
                    require calldata.size - 4 >= 224
                    require arg1 == address(arg1)
                    require arg2 == address(arg2)
                    require arg3 == address(arg3)
                    require arg4 == address(arg4)
                    require arg5 == address(arg5)
                    staticcall address(arg4).userBorrowPart(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    require ext_code.size(address(arg4))
                    call address(arg4).accrue() with:
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    call address(arg4).updateExchangeRate() with:
                         gas gas_remaining wei
                    require return_data.size >= 64
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    staticcall address(arg4).totalBorrow() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((4 * ceil32(return_data.size)) + 544 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    if 0 == ext_call.return_data[48 len 16]:
                        staticcall address(arg4).bentoBox() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        staticcall address(arg4).collateral() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[256] = ext_call.return_data[12 len 20]
                        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not bool((8 * ceil32(return_data.size)) + 608 <= test266151307()):
                            revert with 'NH{q', 65
                        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                        if ext_call.return_data[0] and arg6 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * arg6 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg6:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        else:
                                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        else:
                                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                                revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                       ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                            if arg6 and ext_call.return_data[32] > -1 / arg6:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if not arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 18
                            if 0 == ext_call.return_data[48 len 16]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                       ext_call.return_data[0]
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        s = s * s
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if 1 > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0]
                        else:
                            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        else:
                                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        else:
                                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                                revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18),
                                       ext_call.return_data[0] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            if arg6 and ext_call.return_data[32] > -1 / arg6:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if not arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 18
                            if 0 == ext_call.return_data[48 len 16]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                       ext_call.return_data[0]
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        staticcall address(arg4).bentoBox() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        staticcall address(arg4).collateral() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[256] = ext_call.return_data[12 len 20]
                        staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if not bool((8 * ceil32(return_data.size)) + 608 <= test266151307()):
                            revert with 'NH{q', 65
                        require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                        require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg6 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18
                            if arg6 and ext_call.return_data[32] > -1 / arg6:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if not arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 18
                            if 0 == ext_call.return_data[48 len 16]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                       ext_call.return_data[0]
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg6 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            if arg6 and ext_call.return_data[32] > -1 / arg6:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if not arg6 * ext_call.return_data[32]:
                                revert with 'NH{q', 18
                            if 0 == ext_call.return_data[48 len 16]:
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args mem[268 len 20], ext_call.return_data[0], 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                staticcall address(arg5).decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    t = 1
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg2).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    staticcall mem[268 len 20].decimals() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                    if 18 < ext_call.return_data[31 len 1]:
                                        revert with 'NH{q', 17
                                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                        staticcall address(arg3).getPrice() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[48 len 16]:
                                            revert with 'NH{q', 18
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                                   0,
                                                   ext_call.return_data[0]
                                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                            revert with 'NH{q', 17
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                               ext_call.return_data[0]
                                    s = 10
                                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 'NH{q', 17
                                        s = s * s
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if 1 > -1 / s:
                                        revert with 'NH{q', 17
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and s > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * s / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                           ext_call.return_data[0]
                                u = 10
                                v = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if u > -1 / u:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        u = u * u
                                        v = v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    u = u * u
                                    v = u * v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if v > -1 / u:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * s * t / 10^18),
                                       ext_call.return_data[0]
                        ('iszero', ('eq', 0, ('ext_call.return_data', 48, 16)))
                        if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 18
                        if 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32]:
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[268 len 20], ext_call.return_data[0], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg5).decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                            if 18 < ext_call.return_data[31 len 1]:
                                revert with 'NH{q', 17
                            if not uint8(-ext_call.return_data[31 len 1] + 18):
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 1 > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] / 10^18),
                                       ext_call.return_data[0]
                            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                staticcall address(arg2).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 17
                                staticcall mem[268 len 20].decimals() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                                if 18 < ext_call.return_data[31 len 1]:
                                    revert with 'NH{q', 17
                                if not uint8(-ext_call.return_data[31 len 1] + 18):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                    staticcall address(arg3).getPrice() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(arg4).userCollateralShare(address arg1) with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                               0,
                                               ext_call.return_data[0]
                                    if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                        revert with 'NH{q', 17
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                           ext_call.return_data[0]
                                s = 10
                                t = 1
                                idx = uint8(-ext_call.return_data[31 len 1] + 18)
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 'NH{q', 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 'NH{q', 17
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18),
                                       ext_call.return_data[0]
                            s = 10
                            t = 1
                            idx = uint8(-ext_call.return_data[31 len 1] + 18)
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 'NH{q', 17
                            staticcall address(arg2).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and s * t > -1 / ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 17
                            staticcall mem[268 len 20].decimals() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                            if 18 < ext_call.return_data[31 len 1]:
                                revert with 'NH{q', 17
                            if not uint8(-ext_call.return_data[31 len 1] + 18):
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0]
                            if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                                staticcall address(arg3).getPrice() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(arg4).userCollateralShare(address arg1) with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[48 len 16]:
                                    revert with 'NH{q', 18
                                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                           0,
                                           ext_call.return_data[0]
                                if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                    revert with 'NH{q', 17
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                       ext_call.return_data[0]
                            u = 10
                            v = 1
                            idx = uint8(-ext_call.return_data[31 len 1] + 18)
                            while idx > 1:
                                if u > -1 / u:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    u = u * u
                                    v = v
                                    idx = uint255(idx) * 0.5
                                    continue 
                                u = u * u
                                v = u * v
                                idx = uint255(idx) * 0.5
                                continue 
                            if v > -1 / u:
                                revert with 'NH{q', 17
                            staticcall address(arg3).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       0,
                                       ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18:
                                revert with 'NH{q', 17
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - (ext_call.return_data[0] * 100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * s * t / 10^18),
                                   ext_call.return_data[0]
                    ('lt', ('div', ('mul', ('div', ('mul', ('div', ('mul', 100000000000000000000000, ('ext_call.return_data', 0, 32)), ('mul', ('param', 'arg6'), ('ext_call.return_data', 32, 32))), ('ext_call.return_data', 16, 16)), ('ext_call.return_data', 48, 16)), ('ext_call.return_data', 48, 16)), ('ext_call.return_data', 16, 16)), ('div', ('mul', 100000000000000000000000, ('ext_call.return_data', 0, 32)), ('mul', ('param', 'arg6'), ('ext_call.return_data', 32, 32))))
                    if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args mem[268 len 20], ext_call.return_data[0], 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    staticcall address(arg5).decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg2).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and 1 > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        staticcall mem[268 len 20].decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                        if 18 < ext_call.return_data[31 len 1]:
                            revert with 'NH{q', 17
                        if not uint8(-ext_call.return_data[31 len 1] + 18):
                            staticcall address(arg3).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       0,
                                       ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                                revert with 'NH{q', 17
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
                                   ext_call.return_data[0]
                        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                            staticcall address(arg3).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       0,
                                       ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                                revert with 'NH{q', 17
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
                                   ext_call.return_data[0]
                        s = 10
                        t = 1
                        idx = uint8(-ext_call.return_data[31 len 1] + 18)
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0]
                        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - (ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) / 10^18),
                               ext_call.return_data[0]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg2).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        staticcall mem[268 len 20].decimals() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                        if 18 < ext_call.return_data[31 len 1]:
                            revert with 'NH{q', 17
                        if not uint8(-ext_call.return_data[31 len 1] + 18):
                            staticcall address(arg3).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       0,
                                       ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                                revert with 'NH{q', 17
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
                                   ext_call.return_data[0]
                        if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                            staticcall address(arg3).getPrice() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(arg4).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[48 len 16]:
                                revert with 'NH{q', 18
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                                return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                       0,
                                       ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                                revert with 'NH{q', 17
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
                                   ext_call.return_data[0]
                        s = 10
                        t = 1
                        idx = uint8(-ext_call.return_data[31 len 1] + 18)
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and s * t > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 <= (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0]
                        if ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18 < (ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * s * t / 10^18) - ((ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18)) / 10^18),
                               ext_call.return_data[0]
                    s = 10
                    t = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    staticcall address(arg2).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]) and s * t > -1 / ext_call.return_data[0] + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    staticcall mem[268 len 20].decimals() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    if 18 < ext_call.return_data[31 len 1]:
                        revert with 'NH{q', 17
                    if not uint8(-ext_call.return_data[31 len 1] + 18):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0]
                        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
                               ext_call.return_data[0]
                    if bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 78)) or bool(bool(uint8(-ext_call.return_data[31 len 1] + 18) < 32)):
                        staticcall address(arg3).getPrice() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[0] and 10^uint8(-uint8(ext_call.return_data[0]) + 18) > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(arg4).userCollateralShare(address arg1) with:
                                gas gas_remaining wei
                               args address(arg1)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                            return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                                   0,
                                   ext_call.return_data[0]
                        if ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                            revert with 'NH{q', 17
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               (ext_call.return_data[0] * ext_call.return_data[0] * 10^uint8(-uint8(ext_call.return_data[0]) + 18) / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
                               ext_call.return_data[0]
                    u = 10
                    v = 1
                    idx = uint8(-ext_call.return_data[31 len 1] + 18)
                    while idx > 1:
                        if u > -1 / u:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            u = u * u
                            v = v
                            idx = uint255(idx) * 0.5
                            continue 
                        u = u * u
                        v = u * v
                        idx = uint255(idx) * 0.5
                        continue 
                    if v > -1 / u:
                        revert with 'NH{q', 17
                    staticcall address(arg3).getPrice() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[0] and u * v > -1 / ext_call.return_data[0] * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(arg4).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg7 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg7, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 <= (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                        return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                               0,
                               ext_call.return_data[0]
                    if ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18 < (ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18:
                        revert with 'NH{q', 17
                    return ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] > ext_call.return_data[0], 
                           (ext_call.return_data[0] * ext_call.return_data[0] * u * v / 10^18) - ((ext_call.return_data[0] * s * t) + (100000 * 10^18 * ext_call.return_data[0] / arg6 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[0] * s * t) / 10^18),
                           ext_call.return_data[0]
                require not msg.value
                require calldata.size - 4 >= 224
                require arg1 == address(arg1)
                require arg2 == address(arg2)
                require arg3 == address(arg3)
                require arg6 == address(arg6)
                staticcall address(arg2).userCollateralShare(address arg1) with:
                        gas gas_remaining wei
                       args address(arg1)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] < arg7:
                    revert with 0, 'noliq'
                mem[ceil32(return_data.size) + 416] = 0
                mem[ceil32(return_data.size) + 448] = 0
                require ext_code.size(address(arg2))
                call address(arg2).accrue() with:
                     gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                call address(arg2).updateExchangeRate() with:
                     gas gas_remaining wei
                mem[ceil32(return_data.size) + 480 len 64] = ext_call.return_data[0 len 64]
                require return_data.size >= 64
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                mem[ceil32(return_data.size) + 160] = ext_call.return_data[32]
                staticcall address(arg2).collateral() with:
                        gas gas_remaining wei
                mem[(2 * ceil32(return_data.size)) + 480] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                staticcall address(arg2).bentoBox() with:
                        gas gas_remaining wei
                mem[(4 * ceil32(return_data.size)) + 480] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if stor0[address(ext_call.return_data[0])]:
                    staticcall address(arg2).totalBorrow() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((7 * ceil32(return_data.size)) + 544 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    staticcall address(arg2).userBorrowPart(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[(7 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[(8 * ceil32(return_data.size)) + 548] = address(arg1)
                    staticcall address(arg2).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[(8 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
                        revert with 0, 'has liquidity'
                    staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                            gas gas_remaining wei
                           args mem[ceil32(return_data.size) + 268 len 20]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((12 * ceil32(return_data.size)) + 608 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    if 0 == ext_call.return_data[48 len 16]:
                        if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(12 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(12 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(14 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(14 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (14 * ceil32(return_data.size)) + 640
                                    t = (14 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(14 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                            else:
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(14 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(15 * ceil32(return_data.size)) + 672] = 1
                                        idx = 0
                                        s = (15 * ceil32(return_data.size)) + 640
                                        t = (15 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[(14 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(14 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(15 * ceil32(return_data.size)) + 672] = 1
                                            idx = 0
                                            s = (15 * ceil32(return_data.size)) + 640
                                            t = (15 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(arg3), this.address
                    require return_data.size >= 32
                    call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                else:
                    staticcall address(arg2).masterContract() with:
                            gas gas_remaining wei
                    mem[(6 * ceil32(return_data.size)) + 480] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 516] = address(ext_call.return_data[0])
                    mem[(7 * ceil32(return_data.size)) + 548] = 1
                    mem[(7 * ceil32(return_data.size)) + 580] = 0
                    mem[(7 * ceil32(return_data.size)) + 612] = 0
                    mem[(7 * ceil32(return_data.size)) + 644] = 0
                    require ext_code.size(address(ext_call.return_data[12 len 20]))
                    call address(ext_call.return_data[12 len 20]).setMasterContractApproval(address arg1, address arg2, bool arg3, uint8 arg4, bytes32 arg5, bytes32 arg6) with:
                         gas gas_remaining wei
                        args address(this.address), address(ext_call.return_data[0]), 1, 0, 0, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    stor0[mem[ceil32(return_data.size) + 236 len 20]] = 1
                    staticcall address(arg2).totalBorrow() with:
                            gas gas_remaining wei
                    mem[(7 * ceil32(return_data.size)) + 480 len 64] = ext_call.return_data[0 len 64]
                    require return_data.size >= 64
                    if not bool((8 * ceil32(return_data.size)) + 544 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    mem[(8 * ceil32(return_data.size)) + 480] = ext_call.return_data[0]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    mem[(8 * ceil32(return_data.size)) + 512] = ext_call.return_data[32]
                    mem[ceil32(return_data.size) + 384] = (8 * ceil32(return_data.size)) + 480
                    mem[(8 * ceil32(return_data.size)) + 548] = address(arg1)
                    staticcall address(arg2).userBorrowPart(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[(8 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[ceil32(return_data.size) + 128] = ext_call.return_data[0]
                    mem[(10 * ceil32(return_data.size)) + 548] = address(arg1)
                    staticcall address(arg2).userCollateralShare(address arg1) with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[(10 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and 10^13 > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if 10^13 * ext_call.return_data[0] and arg4 > -1 / 10^13 * ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    mem[(11 * ceil32(return_data.size)) + 548] = address(ext_call.return_data[12 len 20])
                    mem[(11 * ceil32(return_data.size)) + 580] = 10^13 * ext_call.return_data[0] * arg4
                    mem[(11 * ceil32(return_data.size)) + 612] = 0
                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[12 len 20]), 10^13 * ext_call.return_data[0] * arg4, 0
                    mem[(11 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16]:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[48 len 16]:
                        revert with 'NH{q', 18
                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] * ext_call.return_data[32] / ext_call.return_data[48 len 16] <= ext_call.return_data[0]:
                        revert with 0, 'has liquidity'
                    staticcall address(ext_call.return_data[12 len 20]).totals(address arg1) with:
                            gas gas_remaining wei
                           args mem[ceil32(return_data.size) + 268 len 20]
                    mem[(12 * ceil32(return_data.size)) + 544 len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if not bool((13 * ceil32(return_data.size)) + 608 <= test266151307()):
                        revert with 'NH{q', 65
                    require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                    mem[(13 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                    require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                    mem[(13 * ceil32(return_data.size)) + 576] = ext_call.return_data[32]
                    if 0 == ext_call.return_data[48 len 16]:
                        if ext_call.return_data[0] and arg5 > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(13 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                            mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(13 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            mem[(13 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[(14 * ceil32(return_data.size)) + 612] = address(arg1)
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                require return_data.size >= 32
                                call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                            else:
                                mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                    mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(15 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(16 * ceil32(return_data.size)) + 740] = address(arg3)
                                mem[(16 * ceil32(return_data.size)) + 772] = this.address
                                staticcall mem[ceil32(return_data.size) + 236 len 20].balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                mem[(16 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
                                require return_data.size >= 32
                                call mem[ceil32(return_data.size) + 236 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                        else:
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(13 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                            mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(13 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            mem[(13 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[(14 * ceil32(return_data.size)) + 612] = address(arg1)
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                            if ext_call.return_data[0] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0]
                                else:
                                    if ext_call.return_data[0] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                require return_data.size >= 32
                                call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                            else:
                                mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                    mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(15 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(16 * ceil32(return_data.size)) + 740] = address(arg3)
                                mem[(16 * ceil32(return_data.size)) + 772] = this.address
                                staticcall mem[ceil32(return_data.size) + 236 len 20].balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                mem[(16 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
                                require return_data.size >= 32
                                call mem[ceil32(return_data.size) + 236 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                    else:
                        if ext_call.return_data[0] and ext_call.return_data[16 len 16] > -1 / ext_call.return_data[0]:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 18
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and arg5 > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                            revert with 'NH{q', 17
                        if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 and ext_call.return_data[32] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[16 len 16]:
                            mem[(13 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                            mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18
                            mem[(13 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18, 0
                            mem[(13 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[(14 * ceil32(return_data.size)) + 612] = address(arg1)
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                require return_data.size >= 32
                                call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                            else:
                                mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                    mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(15 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(16 * ceil32(return_data.size)) + 740] = address(arg3)
                                mem[(16 * ceil32(return_data.size)) + 772] = this.address
                                staticcall mem[ceil32(return_data.size) + 236 len 20].balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                mem[(16 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
                                require return_data.size >= 32
                                call mem[ceil32(return_data.size) + 236 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[16 len 16]:
                                revert with 'NH{q', 18
                            mem[(13 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                            mem[(13 * ceil32(return_data.size)) + 644] = ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16]
                            mem[(13 * ceil32(return_data.size)) + 676] = 0
                            staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                    gas gas_remaining wei
                                   args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16], 0
                            mem[(13 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[(14 * ceil32(return_data.size)) + 612] = address(arg1)
                            staticcall address(arg2).userCollateralShare(address arg1) with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[(14 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                            if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * arg5 * ext_call.return_data[32] / 100000 * 10^18 * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] <= ext_call.return_data[0]:
                                if not ext_call.return_data[16 len 16]:
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    mem[(15 * ceil32(return_data.size)) + 640] = address(arg1)
                                    mem[(15 * ceil32(return_data.size)) + 672] = 1
                                    idx = 0
                                    s = (15 * ceil32(return_data.size)) + 640
                                    t = (15 * ceil32(return_data.size)) + 900
                                    while idx < 1:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(address(arg2))
                                    call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                         gas gas_remaining wei
                                        args 128, 192, address(arg6), address(arg6), 1, mem[(15 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[0] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                staticcall address(ext_call.return_data[12 len 20]).balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                require return_data.size >= 32
                                call address(ext_call.return_data[12 len 20]).withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
                            else:
                                mem[ceil32(return_data.size) + 320] = ext_call.return_data[0]
                                if arg5 and ext_call.return_data[32] > -1 / arg5:
                                    revert with 'NH{q', 17
                                if ext_call.return_data[0] and 100000 * 10^18 > -1 / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if not arg5 * ext_call.return_data[32]:
                                    revert with 'NH{q', 18
                                if 0 == ext_call.return_data[48 len 16]:
                                    mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                    mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                    mem[(15 * ceil32(return_data.size)) + 676] = 0
                                    staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                            gas gas_remaining wei
                                           args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                    mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                    if not ext_call.return_data[16 len 16]:
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]
                                    else:
                                        if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                            revert with 'NH{q', 17
                                        if not ext_call.return_data[16 len 16]:
                                            revert with 'NH{q', 18
                                        mem[(16 * ceil32(return_data.size)) + 608] = 1
                                        mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                        mem[(16 * ceil32(return_data.size)) + 672] = 1
                                        mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                        mem[(16 * ceil32(return_data.size)) + 868] = 1
                                        idx = 0
                                        s = (16 * ceil32(return_data.size)) + 640
                                        t = (16 * ceil32(return_data.size)) + 900
                                        while idx < 1:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(16 * ceil32(return_data.size)) + 932] = 1
                                        mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                        mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                        mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                        require ext_code.size(address(arg2))
                                        call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                             gas gas_remaining wei
                                            args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                else:
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] and ext_call.return_data[16 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[16 len 16]:
                                        revert with 'NH{q', 18
                                    if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / ext_call.return_data[16 len 16] >= 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32]:
                                        mem[ceil32(return_data.size) + 192] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]
                                        else:
                                            if 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] and ext_call.return_data[48 len 16] > -1 / 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, 100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16] / uint128(ext_call.return_data[0])
                                    else:
                                        if 1 > !(100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]):
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        mem[(15 * ceil32(return_data.size)) + 612] = mem[ceil32(return_data.size) + 268 len 20]
                                        mem[(15 * ceil32(return_data.size)) + 644] = ext_call.return_data[0]
                                        mem[(15 * ceil32(return_data.size)) + 676] = 0
                                        staticcall address(ext_call.return_data[12 len 20]).toAmount(address arg1, uint256 arg2, bool arg3) with:
                                                gas gas_remaining wei
                                               args mem[ceil32(return_data.size) + 268 len 20], ext_call.return_data[0], 0
                                        mem[(15 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[ceil32(return_data.size) + 352] = ext_call.return_data[0]
                                        if not ext_call.return_data[16 len 16]:
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1
                                        else:
                                            if (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1 and ext_call.return_data[48 len 16] > -1 / (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16]) + 1:
                                                revert with 'NH{q', 17
                                            if not ext_call.return_data[16 len 16]:
                                                revert with 'NH{q', 18
                                            mem[(16 * ceil32(return_data.size)) + 608] = 1
                                            mem[(16 * ceil32(return_data.size)) + 640] = address(arg1)
                                            mem[(16 * ceil32(return_data.size)) + 672] = 1
                                            mem[(16 * ceil32(return_data.size)) + 704] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 736] = 0x912860c500000000000000000000000000000000000000000000000000000000
                                            mem[(16 * ceil32(return_data.size)) + 868] = 1
                                            idx = 0
                                            s = (16 * ceil32(return_data.size)) + 640
                                            t = (16 * ceil32(return_data.size)) + 900
                                            while idx < 1:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(16 * ceil32(return_data.size)) + 932] = 1
                                            mem[(16 * ceil32(return_data.size)) + 964] = ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                            mem[(16 * ceil32(return_data.size)) + 804] = address(arg6)
                                            mem[(16 * ceil32(return_data.size)) + 836] = address(arg6)
                                            require ext_code.size(address(arg2))
                                            call address(arg2).liquidate(address[] arg1, uint256[] arg2, address arg3, address arg4) with:
                                                 gas gas_remaining wei
                                                args 128, 192, address(arg6), address(arg6), 1, mem[(16 * ceil32(return_data.size)) + 900], 1, ext_call.return_data[48 len 16] + (100000 * 10^18 * ext_call.return_data[0] / arg5 * ext_call.return_data[32] * ext_call.return_data[16 len 16] / ext_call.return_data[48 len 16] * ext_call.return_data[48 len 16]) / uint128(ext_call.return_data[0])
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[(16 * ceil32(return_data.size)) + 740] = address(arg3)
                                mem[(16 * ceil32(return_data.size)) + 772] = this.address
                                staticcall mem[ceil32(return_data.size) + 236 len 20].balanceOf(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(arg3), this.address
                                mem[(16 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
                                require return_data.size >= 32
                                call mem[ceil32(return_data.size) + 236 len 20].withdraw(address arg1, address arg2, address arg3, uint256 arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args address(arg3), this.address, this.address, 0, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 64
            staticcall address(arg3).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            call address(arg3).transfer(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args 0xf8f181d466d44974257f9ccf0ce8398b7e059054, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
}



}
