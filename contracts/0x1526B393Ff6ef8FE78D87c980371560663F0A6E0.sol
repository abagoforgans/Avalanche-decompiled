contract main {




// =====================  Runtime code  =====================


const name = 'Rectangle', 0


address owner;

function owner() payable {
    return owner
}

function _fallback() payable {
    revert
}

function changeOwner(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Not owner'
    owner = arg1
}

function getColor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[416] = 6
    mem[448] = 0x6463326532650000000000000000000000000000000000000000000000000000
    mem[96] = 416
    mem[480] = 6
    mem[512] = 0x6363336330300000000000000000000000000000000000000000000000000000
    mem[128] = 480
    mem[544] = 6
    mem[576] = 0x6333303030300000000000000000000000000000000000000000000000000000
    mem[160] = 544
    mem[608] = 6
    mem[640] = 0x6537333730300000000000000000000000000000000000000000000000000000
    mem[192] = 608
    mem[672] = 6
    mem[704] = 0x6336356134310000000000000000000000000000000000000000000000000000
    mem[224] = 672
    mem[736] = 6
    mem[768] = 0x6337316533650000000000000000000000000000000000000000000000000000
    mem[256] = 736
    mem[800] = 6
    mem[832] = 0x6162323132340000000000000000000000000000000000000000000000000000
    mem[288] = 800
    mem[864] = 6
    mem[896] = 0x3935326531610000000000000000000000000000000000000000000000000000
    mem[320] = 864
    mem[928] = 6
    mem[960] = 0x3761313631350000000000000000000000000000000000000000000000000000
    mem[352] = 928
    mem[992] = 6
    mem[1024] = 0x6561353931310000000000000000000000000000000000000000000000000000
    mem[384] = 992
    if arg1 >= 10:
        revert with 0, 50
    _12 = mem[(32 * arg1) + 96]
    mem[64] = 1120
    mem[1056] = 9
    mem[1088] = 0x52656374436f6c6f720000000000000000000000000000000000000000000000
    mem[1120] = 64
    _16 = mem[_12]
    mem[1184] = mem[_12]
    mem[1216 len ceil32(_16)] = mem[_12 + 32 len ceil32(_16)]
    if ceil32(_16) <= _16:
        return 64, ceil32(_16) + 96, mem[1184 len ceil32(_16) + 32], 9, 0, 0
    mem[_16 + 1216] = 0
    mem[ceil32(_16) + 1216] = 9
    mem[ceil32(_16) + 1248] = 0x52656374436f6c6f720000000000000000000000000000000000000000000000
    return 64, ceil32(_16) + 96, mem[1184 len _16 + 32], 0, mem[_16 + 1248 len ceil32(_16) + -_16 + 9], 0
}

function getPart(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[320] = 96
    mem[352 len 96] = 0x3e3c672069643d2268656164223e3c7265637420783d223534312e3439372220793d223136342e343338222077696474683d223530332e33393122206865696768743d223337382e333737222069643d2252656374436f6c6f72222f3e3c2f67
    mem[96] = 320
    mem[448] = 97
    mem[480 len 97] = 0x3e3c672069643d2262656c6c79223e3c7265637420783d223435312e3934342220793d223437332e393031222077696474683d223637312e35313222206865696768743d223633382e353737222069643d2252656374436f6c6f72222f3e3c2f67
    mem[128] = 448
    mem[608] = 128
    mem[640 len 128] = 0x3e3c672069643d227061775f72223e3c7061746820643d224d3536302e3635392c3534302e3337396c2d3334382e3034362c2d3131382e3834326c2d37342e3439382c3231382e3137386c3334382e3034362c3131382e3834326c37342e3439382c2d3231382e3137385a222069643d2252656374436f6c6f72222f3e3c2f67
    mem[160] = 608
    mem[768] = 96
    mem[800 len 96] = 0x3e3c672069643d227061775f6c223e3c7265637420783d223939342e34362220793d223536352e333838222077696474683d223336372e37373622206865696768743d223233302e353436222069643d2252656374436f6c6f72222f3e3c2f67
    mem[192] = 768
    mem[896] = 129
    mem[928 len 129] = 0xfe3c672069643d226c65675f6c223e3c7061746820643d224d313233322e34392c313233382e36396c2d3237372e30322c2d3234312e3930386c2d3135312e3634342c3137332e3635356c3237372e3032312c3234312e3930376c3135312e3634332c2d3137332e3635345a222069643d2252656374436f6c6f72222f3e3c2f67
    mem[224] = 896
    mem[1088] = 130
    mem[1120 len 130] = 0x3e3c672069643d226c65675f72223e3c7061746820643d224d3434362e3337392c3836332e3530386c2d3332332e3637362c3137342e3632346c3130392e3436352c3230322e3930316c3332332e3637362c2d3137342e3632336c2d3130392e3436352c2d3230322e3930325a222069643d2252656374436f6c6f72222f3e3c2f67
    mem[256] = 1088
    mem[64] = 1440
    mem[1280] = 127
    mem[1312 len 127] = 0x3e3c672069643d22616464223e3c7061746820643d224d313430382e37312c3530362e3536366c2d3338312e3030372c2d3134362e3032336c2d3230332e3634372c3533312e3335396c3338312e3030372c3134362e3032346c3230332e3634372c2d3533312e33365a222069643d2252656374436f6c6f72222f3e3c2f67
    mem[288] = 1280
    if arg1 >= 7:
        revert with 0, 50
    _10 = mem[(32 * arg1) + 96]
    mem[1440] = 32
    _13 = mem[_10]
    mem[1472] = mem[_10]
    mem[1504 len ceil32(_13)] = mem[_10 + 32 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + 1504] = 0
    return 32, mem[1472 len ceil32(_13) + 32]
}



}
