contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#  - sub_61a9d1b1(?)
#  - transfer(address arg1, uint256 arg2)
#
const feeDenominator = 100

const sub_3c22e516(?) = 1500000 * 10^18

const sub_56af7d06(?) = 5

const sub_68348dc1(?) = 75

const getCurrentTimestamp = block.timestamp

const sub_92f6576e(?) = 25

const sub_a0c14722(?) = 5

const sub_ab428a23(?) = 1500000 * 10^18


array of uint256 name;
array of uint256 symbol;
uint8 decimals;
address owner; offset 8
uint8 stor3; offset 160
uint8 stor3; offset 168
uint8 stor3; offset 176
uint8 stor3; offset 184
uint8 stor3; offset 192
uint8 stor3; offset 200
uint8 stor3; offset 208
uint8 stor3; offset 216
uint8 stor3; offset 224
uint8 stor3; offset 232
uint32 stor3; offset 224
uint64 stor3; offset 216
uint64 stor3; offset 208
uint64 stor3; offset 200
uint64 stor3; offset 192
uint128 stor3; offset 184
uint128 stor3; offset 176
uint128 stor3; offset 168
uint128 stor3; offset 160
address rebaserAddress;
uint256 sub_47e1b372;
uint256 sub_f477a2c5;
uint256 secondsPerDay;
uint256 sub_0af08314;
uint256 sub_d7832b11;
uint256 maxSellTransactionAmount;
uint256 maxBuyTransactionAmount;
uint256 sub_89375abf;
uint256 nextRebase;
uint256 sub_57b535c0;
uint256 sub_5fdd4ed5;
uint256 sub_6aa217a1;
mapping of uint8 stor16;
array of address sub_d6737a6e;
uint256 sub_333b33e5;
array of address sub_f6bbe516;
array of address sub_428ba489;
array of address sub_35179d6b;
mapping of uint8 stor22;
mapping of uint8 stor23;
mapping of uint8 stor24;
mapping of uint8 stor25;
address liquidityReceiverAddress;
address sub_08b1fd8fAddress;
address sub_7d4b5017Address;
address stableCoinAddress;
address routerAddress;
address factoryAddress;
address sub_4e8c0bf3Address;
address pairAddress;
uint256 liquidityFee;
uint256 treasuryFee;
uint256 burnFee;
uint256 sellBurnFee;
uint256 sub_9763eec4;
uint256 sub_8102c570;
uint256 sub_7ac82927;
uint256 sub_e77ef698;
uint256 sub_2e01803e;
uint256 sub_1dbbcf70;
uint256 totalBuyFee;
uint256 totalSellFee;
uint256 stor46;
uint256 stor47;
uint256 totalSupply;
uint256 stor50;
uint256 stor51;
mapping of uint256 sub_4527881e;
mapping of uint256 allowance;
uint256 stor2DC2;
array of address stor38878206584692966203415385907871375197469080758325516314230789535345649042549;
uint256 storC4E3;
array of address stor93369884277498597659590946175997448338802118867485977633968544981113634346220;

function maxSellTransactionAmount() {
    return maxSellTransactionAmount
}

function name() {
    return name[0 len name.length]
}

function isBurnEnabled() {
    return bool(uint8(stor3.field_200))
}

function sub_08b1fd8f(?) {
    return sub_08b1fd8fAddress
}

function sub_0af08314(?) {
    return sub_0af08314
}

function rebaser() {
    return rebaserAddress
}

function totalSupply() {
    return totalSupply
}

function sub_18a75569(?) {
    return bool(uint8(stor3.field_192))
}

function sub_1dbbcf70(?) {
    return sub_1dbbcf70
}

function liquidityReceiver() {
    return liquidityReceiverAddress
}

function currentIndex() {
    return sub_47e1b372
}

function sub_2e01803e(?) {
    return sub_2e01803e
}

function decimals() {
    return decimals
}

function sub_333b33e5(?) {
    return sub_333b33e5
}

function sub_35179d6b(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_35179d6b.length
    return sub_35179d6b[arg1]
}

function sub_428ba489(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_428ba489.length
    return sub_428ba489[arg1]
}

function sub_4527881e(?) {
    return sub_4527881e[this.address] >= stor51, sub_4527881e[this.address]
}

function sub_47e1b372(?) {
    return sub_47e1b372
}

function sub_4e66160c(?) {
    require calldata.size - 4 >= 32
    return bool(stor23[arg1])
}

function sub_4e8c0bf3(?) {
    return sub_4e8c0bf3Address
}

function sub_57b535c0(?) {
    return sub_57b535c0
}

function totalBuyFee() {
    return totalBuyFee
}

function maxBuyTransactionAmount() {
    return maxBuyTransactionAmount
}

function feesOnNormalTransfers() {
    return bool(uint8(stor3.field_184))
}

function sub_5e1af682(?) {
    return bool(uint8(stor3.field_224))
}

function sub_5fdd4ed5(?) {
    return sub_5fdd4ed5
}

function secondsPerDay() {
    return secondsPerDay
}

function sub_6aa217a1(?) {
    return sub_6aa217a1
}

function swapEnabled() {
    return bool(uint8(stor3.field_168))
}

function sub_7ac82927(?) {
    return sub_7ac82927
}

function sub_7d4b5017(?) {
    return sub_7d4b5017Address
}

function sub_8102c570(?) {
    return sub_8102c570
}

function sub_89375abf(?) {
    return sub_89375abf
}

function sub_8a31a632(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_d6737a6e.length
    return sub_d6737a6e[arg1]
}

function sub_8c755af4(?) {
    return bool(uint8(stor3.field_232))
}

function owner() {
    return owner
}

function autoRebase() {
    return bool(uint8(stor3.field_176))
}

function symbol() {
    return symbol[0 len symbol.length]
}

function sub_9763eec4(?) {
    return sub_9763eec4
}

function liquidityFee() {
    return liquidityFee
}

function stableCoin() {
    return stableCoinAddress
}

function totalSellFee() {
    return totalSellFee
}

function sub_9d99e8e6(?) {
    require calldata.size - 4 >= 32
    return bool(stor24[arg1])
}

function pair() {
    return pairAddress
}

function sellBurnFee() {
    return sellBurnFee
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    return bool(stor22[arg1])
}

function sub_b6e98ad6(?) {
    return bool(uint8(stor3.field_216))
}

function nextRebase() {
    return nextRebase
}

function sub_bfce486e(?) {
    return bool(uint8(stor3.field_208))
}

function sub_c0da424c(?) {
    require calldata.size - 4 >= 32
    return bool(stor25[arg1])
}

function factory() {
    return factoryAddress
}

function treasuryFee() {
    return treasuryFee
}

function initialDistributionFinished() {
    return bool(uint8(stor3.field_160))
}

function checkFeeExempt(address arg1) {
    require calldata.size - 4 >= 32
    return bool(stor16[address(arg1)])
}

function sub_d6737a6e(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_d6737a6e.length
    return sub_d6737a6e[arg1]
}

function sub_d7832b11(?) {
    return sub_d7832b11
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function sub_e77ef698(?) {
    return sub_e77ef698
}

function sub_f477a2c5(?) {
    return sub_f477a2c5
}

function sub_f6bbe516(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_f6bbe516.length
    return sub_f6bbe516[arg1]
}

function router() {
    return routerAddress
}

function burnFee() {
    return burnFee
}

function _fallback() payable {
    revert
}

function checkSwapThreshold() {
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    return (stor51 / stor50)
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'e1'
    emit OwnershipRenounced(owner);
    owner = 0
}

function sub_8b8a214e(?) {
    if owner != msg.sender:
        revert with 0, 'e1'
    uint8(stor3.field_232) = 1
    emit 0xb59dc360: 1, block.timestamp
}

function changeRouter(address arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    routerAddress = arg1
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    allowance[msg.sender][address(arg1)] = arg2
    emit 0xef8c5be1: arg2, msg.sender, arg1
    return 1
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    return (sub_4527881e[address(arg1)] / stor50)
}

function sub_01b16827(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    sub_0af08314 = arg1
    sub_d7832b11 = arg2
    emit 0xef6d28af: arg1, arg2, block.timestamp
}

function setTargetLiquidity(uint256 arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    stor46 = arg1
    stor47 = arg2
    emit 0x61b037fb: arg1, arg2
}

function sub_e088bfc0(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if not arg1:
        revert with 0, 'e26'
    stableCoinAddress = arg1
    emit 0x214c2cae: arg1
}

function sub_b915db5a(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 > 5:
        revert with 0, 'e27'
    sub_5fdd4ed5 = arg1
    emit 0x6b9cf7de: arg1, block.timestamp
}

function sub_4cd9ddf2(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 > 1800:
        revert with 0, 'e34'
    sub_89375abf = arg1
    emit 0x9147f2d3: arg1, block.timestamp
}

function setNextRebase(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 <= block.timestamp:
        revert with 0, 'e37'
    nextRebase = arg1
    emit 0x3a97bbcd: arg1, block.timestamp
}

function sub_0cda12da(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    emit 0x7e378ad8: arg1
    if not arg1:
        revert with 0, 'e4'
    emit 0x83abd335: rebaserAddress, arg1
    rebaserAddress = arg1
}

function sub_011bc987(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if sub_1dbbcf70 == arg1:
        revert with 0, 'e17'
    if arg1 > 75:
        revert with 0, 'e18'
    sub_1dbbcf70 = arg1
    emit 0x99595bf6: arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    emit TransferOwnerShip(arg1);
    if not arg1:
        revert with 0, 'e3'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function sub_03c4bb53(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_224)):
        revert with 0, 'e19'
    uint32(stor3.field_224) = uint32(arg1)
    emit 0xed329be1: arg1, block.timestamp
}

function sub_42762cbb(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_192)):
        revert with 0, 'e36'
    uint64(stor3.field_192) = uint64(arg1)
    emit 0x80c598eb: arg1, block.timestamp
}

function setMaxSellTransaction(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 <= 1500000 * 10^18:
        revert with 0, 'e38'
    maxSellTransactionAmount = arg1
    emit 0x283fcbdd: arg1, block.timestamp
}

function sub_1276089b(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_160)):
        revert with 0, 'Not changed'
    Mask(96, 0, stor3.field_160) = Mask(96, 0, arg1)
    emit 0xadd2ae1e: arg1
}

function setMaxBuyTransactionAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 <= 1500000 * 10^18:
        revert with 0, 'e39'
    maxBuyTransactionAmount = arg1
    emit 0x3c0d1676: arg1, block.timestamp
}

function setFeeExempt(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg2 == bool(stor16[address(arg1)]):
        revert with 0, 'e00'
    stor16[address(arg1)] = uint8(arg2)
    emit SetFeeExempt(arg1, arg2);
}

function setAutoRebase(bool arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_176)):
        revert with 0, 'e29'
    Mask(80, 0, stor3.field_176) = Mask(80, 0, arg1)
    emit 0x832ed789: arg1, block.timestamp
}

function sub_1d0d78dd(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_208)):
        revert with 0, 'e33'
    stor3.field_208 % 281474976710656 = arg1 % 281474976710656
    emit 0x4c517ace: arg1, block.timestamp
}

function setBurnFee(bool arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_200)):
        revert with 0, 'e30'
    stor3.field_200 % 72057594037927936 = arg1 % 72057594037927936
    emit 0x5fae21b3: arg1, block.timestamp
}

function setFeesOnNormalTransfers(bool arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_184)):
        revert with 0, 'e35'
    Mask(72, 0, stor3.field_184) = Mask(72, 0, arg1)
    emit 0x6667769b: arg1, block.timestamp
}

function sub_b6d438f3(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg1 == bool(uint8(stor3.field_216)):
        revert with 0, 'e31'
    if not uint8(stor3.field_216):
        revert with 0, 'e32'
    stor3.field_216 % 1099511627776 = arg1 % 1099511627776
    emit 0x9e188e4b: arg1, block.timestamp
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if arg2 + allowance[msg.sender][address(arg1)] < allowance[msg.sender][address(arg1)]:
        revert with 0, 'SafeMath: addition overflow'
    allowance[msg.sender][address(arg1)] += arg2
    emit 0xef8c5be1: (arg2 + allowance[msg.sender][address(arg1)]), msg.sender, arg1
    return 1
}

function sub_9251c598(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    require ext_code.size(stableCoinAddress)
    call stableCoinAddress.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg1), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function getCirculatingSupply() {
    if storC4E3 > 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000:
        revert with 0, 'SafeMath: subtraction overflow'
    if stor2DC2 > -storC4E3 - 39457584007913129639936:
        revert with 0, 'SafeMath: subtraction overflow'
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    return (-storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50)
}

function setFeeReceivers(address arg1, address arg2, address arg3) {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'e1'
    if not arg1:
        revert with 0, 'e20'
    if not arg2:
        revert with 0, 'e21'
    if not arg3:
        revert with 0, 'e22'
    liquidityReceiverAddress = arg1
    sub_08b1fd8fAddress = arg2
    sub_7d4b5017Address = arg3
    emit 0xb923dcdf: arg1, arg2, arg3
}

function clearStuckBalance(address arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'e1'
    if not arg1:
        revert with 0, 'e28'
    call arg1 with:
       value eth.balance(this.address) wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit 0x764ac18b: eth.balance(this.address), arg1, block.timestamp
}

function manualSync() {
    idx = 0
    while idx < sub_d6737a6e.length:
        mem[0] = 17
        mem[96] = 0xfff6cae900000000000000000000000000000000000000000000000000000000
        require ext_code.size(sub_d6737a6e[idx])
        call sub_d6737a6e[idx].sync() with:
             gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        idx = idx + 1
        continue 
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if arg2 >= allowance[msg.sender][address(arg1)]:
        allowance[msg.sender][address(arg1)] = 0
    else:
        if arg2 > allowance[msg.sender][address(arg1)]:
            revert with 0, 'SafeMath: subtraction overflow'
        allowance[msg.sender][address(arg1)] -= arg2
    emit 0xef8c5be1: allowance[msg.sender][address(arg1)], msg.sender, arg1
    return 1
}

function rescueToken(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    emit 0xed3c8f48: block.timestamp, arg1, msg.sender, arg2
    require ext_code.size(arg1)
    call arg1.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return bool(ext_call.return_data[0])
}

function sub_5fced4ee(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < sub_428ba489.length:
        mem[0] = 20
        mem[100] = arg1
        require ext_code.size(sub_428ba489[idx])
        staticcall sub_428ba489[idx].0x70a08231 with:
                gas gas_remaining wei
               args arg1
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    return (_14 * sub_428ba489.length)
}

function sub_d38af885(?) {
    require calldata.size - 4 >= 32
    idx = 0
    s = 0
    while idx < sub_f6bbe516.length:
        mem[0] = 19
        mem[100] = arg1
        require ext_code.size(sub_f6bbe516[idx])
        staticcall sub_f6bbe516[idx].0x1b4467cd with:
                gas gas_remaining wei
               args arg1
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    return (_14 * sub_f6bbe516.length)
}

function setSwapBackSettings(bool arg1, uint256 arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'e1'
    Mask(88, 0, stor3.field_168) = Mask(88, 0, arg1)
    if 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000 * arg2 / 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000 != arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not arg3:
        revert with 0, 'SafeMath: division by zero'
    stor51 = 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000 * arg2 / arg3
    emit 0x512cfe1a: arg1, arg2, arg3
}

function sub_65426095(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg2 == bool(stor25[address(arg1)]):
        revert with 0, 'e14'
    stor25[address(arg1)] = uint8(arg2)
    if not arg2:
        idx = 0
        while idx < sub_35179d6b.length:
            mem[0] = 21
            if sub_35179d6b[idx] != arg1:
                idx = idx + 1
                continue 
            require sub_35179d6b.length - 1 < sub_35179d6b.length
            require idx < sub_35179d6b.length
            sub_35179d6b[idx] = sub_35179d6b[sub_35179d6b.length]
            require sub_35179d6b.length
            sub_35179d6b[sub_35179d6b.length] = 0
            sub_35179d6b.length--
            emit 0x6b76292a: arg1, arg2
    else:
        sub_35179d6b.length++
        stor55F4[stor21.length] = arg1
    emit 0x6b76292a: arg1, arg2
}

function sub_3c5c7800(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg2 == bool(stor23[address(arg1)]):
        revert with 0, 'e11'
    stor23[address(arg1)] = uint8(arg2)
    if not arg2:
        idx = 0
        while idx < sub_f6bbe516.length:
            mem[0] = 19
            if sub_f6bbe516[idx] != arg1:
                idx = idx + 1
                continue 
            require sub_f6bbe516.length - 1 < sub_f6bbe516.length
            require idx < sub_f6bbe516.length
            sub_f6bbe516[idx] = sub_f6bbe516[sub_f6bbe516.length]
            require sub_f6bbe516.length
            sub_f6bbe516[sub_f6bbe516.length] = 0
            sub_f6bbe516.length--
            emit 0x8f1936dd: arg1, arg2
    else:
        sub_f6bbe516.length++
        sub_f6bbe516[sub_f6bbe516.length] = arg1
    emit 0x8f1936dd: arg1, arg2
}

function sub_e7e003da(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg2 == bool(stor24[address(arg1)]):
        revert with 0, 'e12'
    stor24[address(arg1)] = uint8(arg2)
    if not arg2:
        if 1 >= sub_428ba489.length:
            revert with 0, 'e13'
        idx = 0
        while idx < sub_428ba489.length:
            mem[0] = 20
            if sub_428ba489[idx] != arg1:
                idx = idx + 1
                continue 
            require sub_428ba489.length - 1 < sub_428ba489.length
            require idx < sub_428ba489.length
            sub_428ba489[idx] = sub_428ba489[sub_428ba489.length]
            require sub_428ba489.length
            sub_428ba489[sub_428ba489.length] = 0
            sub_428ba489.length--
            emit 0xe352b0cd: arg1, arg2
    else:
        sub_428ba489.length++
        storCE6D[stor20.length] = arg1
    emit 0xe352b0cd: arg1, arg2
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg2 == bool(stor22[address(arg1)]):
        revert with 0, 'e15'
    stor22[address(arg1)] = uint8(arg2)
    if not arg2:
        if 1 >= sub_d6737a6e.length:
            revert with 0, 'e16'
        idx = 0
        while idx < sub_d6737a6e.length:
            mem[0] = 17
            if sub_d6737a6e[idx] != arg1:
                idx = idx + 1
                continue 
            require sub_d6737a6e.length - 1 < sub_d6737a6e.length
            require idx < sub_d6737a6e.length
            sub_d6737a6e[idx] = sub_d6737a6e[sub_d6737a6e.length]
            require sub_d6737a6e.length
            sub_d6737a6e[sub_d6737a6e.length] = 0
            sub_d6737a6e.length--
            emit SetAutomatedMarketMakerPair(arg1, arg2);
    else:
        sub_d6737a6e.length++
        sub_d6737a6e[sub_d6737a6e.length] = arg1
        sub_333b33e5++
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function sub_2248e539(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_d6737a6e.length
    require ext_code.size(sub_d6737a6e[arg1])
    staticcall sub_d6737a6e[arg1].getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(sub_d6737a6e[arg1])
    staticcall sub_d6737a6e[arg1].token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_d6737a6e[arg1])
    staticcall sub_d6737a6e[arg1].token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if this.address == address(ext_call.return_data[0]):
        return ext_call.return_data[0] << 144, ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
    if ext_call.return_data[12 len 20] != this.address:
        return 0, ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
    return ext_call.return_data[32] << 144, ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
}

function sub_e294aaf5(?) {
    require calldata.size - 4 >= 32
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    idx = 0
    s = 0
    while idx < sub_f6bbe516.length:
        mem[0] = 19
        mem[164] = arg1
        require ext_code.size(sub_f6bbe516[idx])
        staticcall sub_f6bbe516[idx].0x1b4467cd with:
                gas gas_remaining wei
               args arg1
        mem[160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    idx = 0
    s = 0
    while idx < sub_428ba489.length:
        mem[0] = 20
        mem[164] = arg1
        require ext_code.size(sub_428ba489[idx])
        staticcall sub_428ba489[idx].0x70a08231 with:
                gas gas_remaining wei
               args arg1
        mem[160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _54 = ext_call.return_data[0]
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    if (_36 * sub_f6bbe516.length) + (sub_4527881e[address(arg1)] / stor50) < sub_4527881e[address(arg1)] / stor50:
        revert with 0, 'SafeMath: addition overflow'
    if _54 * sub_428ba489.length < 0:
        revert with 0, 'SafeMath: addition overflow'
    return (sub_4527881e[address(arg1)] / stor50)
}

function setFees(uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, uint256 arg7) {
    require calldata.size - 4 >= 224
    if owner != msg.sender:
        revert with 0, 'e1'
    if arg3 + arg1 < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if arg5 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if arg6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 > 25:
        revert with 0, 'e23'
    if arg2 > 25:
        revert with 0, 'e23'
    if arg3 > 25:
        revert with 0, 'e23'
    if arg5 > 25:
        revert with 0, 'e23'
    if arg6 > 25:
        revert with 0, 'e23'
    if arg2 + arg3 + arg1 >= 25:
        revert with 0, 'e24'
    if arg6 + arg5 + arg2 + arg3 + arg1 >= 25:
        revert with 0, 'e25'
    liquidityFee = arg1
    sub_9763eec4 = arg2
    treasuryFee = arg3
    sub_8102c570 = arg5
    sub_7ac82927 = arg6
    burnFee = arg4
    sellBurnFee = arg7
    if arg3 + arg1 < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalBuyFee = arg2 + arg3 + arg1
    if sub_8102c570 + totalBuyFee < totalBuyFee:
        revert with 0, 'SafeMath: addition overflow'
    if sub_7ac82927 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if sub_e77ef698 - sub_2e01803e < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalSellFee = sub_e77ef698 - sub_2e01803e + sub_7ac82927 + sub_8102c570 + totalBuyFee
    emit 0x741ea12e: arg5, arg6, arg4, sellBurnFee, totalBuyFee, arg1, arg2, arg3
}

function sub_fcf23291(?) {
    idx = 0
    s = 0
    t = 0
    t = 0
    t = 0
    t = 0
    t = 0
    t = 0
    while idx < sub_d6737a6e.length:
        mem[0] = 17
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].getReserves() with:
                gas gas_remaining wei
        mem[96 len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].token1() with:
                gas gas_remaining wei
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if this.address == address(ext_call.return_data[0]):
            idx = idx + 1
            s = s + Mask(112, 0, ext_call.return_data[0])
            t = sub_d6737a6e[idx]
            t = ext_call.return_data[0]
            t = ext_call.return_data[0]
            t = ext_call.return_data[64]
            t = ext_call.return_data[32]
            t = ext_call.return_data[0]
            continue 
        if ext_call.return_data[12 len 20] != this.address:
            idx = idx + 1
            s = s
            t = sub_d6737a6e[idx]
            t = ext_call.return_data[0]
            t = ext_call.return_data[0]
            t = ext_call.return_data[64]
            t = ext_call.return_data[32]
            t = ext_call.return_data[0]
            continue 
        idx = idx + 1
        s = s + Mask(112, 0, ext_call.return_data[32])
        t = sub_d6737a6e[idx]
        t = ext_call.return_data[0]
        t = ext_call.return_data[0]
        t = ext_call.return_data[64]
        t = ext_call.return_data[32]
        t = ext_call.return_data[0]
        continue 
    return s
}

function getLiquidityBacking(uint256 arg1) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 32
    idx = 0
    while idx < sub_d6737a6e.length:
        mem[0] = sub_d6737a6e[idx]
        mem[32] = 52
        _80 = mem[64]
        mem[64] = mem[64] + 64
        mem[_80] = 26
        mem[_80 + 32] = 'SafeMath: division by zero' << 48
        if stor50:
            _102 = mem[64]
            mem[64] = mem[64] + 64
            mem[_102] = 26
            mem[_102 + 32] = 'SafeMath: division by zero' << 48
            if sub_4527881e[stor17[idx]] / stor50 / 10^9 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        mem[mem[64] + 68] = 'SafeMath: division by zero' << 48
        idx = 32
        while idx < 26:
            mem[idx + mem[64] + 68] = mem[idx + _80 + 32]
            idx = idx + 32
            continue 
        revert with 0, 'SafeMath: division by zero'
    mem[32] = 52
    mem[0] = 57005
    _78 = mem[64]
    mem[64] = mem[64] + 64
    mem[_78] = 30
    mem[_78 + 32] = 'SafeMath: subtraction overflow'
    if storC4E3 > 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000:
        revert with 0, 'SafeMath: subtraction overflow'
    _89 = mem[64]
    mem[64] = mem[64] + 64
    mem[_89] = 30
    mem[_89 + 32] = 'SafeMath: subtraction overflow'
    if stor2DC2 > -storC4E3 - 39457584007913129639936:
        revert with 0, 'SafeMath: subtraction overflow'
    _105 = mem[64]
    mem[64] = mem[64] + 64
    mem[_105] = 26
    mem[_105 + 32] = 'SafeMath: division by zero' << 48
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    _121 = mem[64]
    mem[64] = mem[64] + 64
    mem[_121] = 26
    mem[_121 + 32] = 'SafeMath: division by zero' << 48
    if arg1:
        if 0 / arg1:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
    if not -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9:
        revert with 0, 'SafeMath: division by zero'
    return (0 / -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9)
}

function isOverLiquified(uint256 arg1, uint256 arg2) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 64
    idx = 0
    while idx < sub_d6737a6e.length:
        mem[0] = sub_d6737a6e[idx]
        mem[32] = 52
        _80 = mem[64]
        mem[64] = mem[64] + 64
        mem[_80] = 26
        mem[_80 + 32] = 'SafeMath: division by zero' << 48
        if stor50:
            _102 = mem[64]
            mem[64] = mem[64] + 64
            mem[_102] = 26
            mem[_102 + 32] = 'SafeMath: division by zero' << 48
            if sub_4527881e[stor17[idx]] / stor50 / 10^9 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        mem[mem[64] + 68] = 'SafeMath: division by zero' << 48
        idx = 32
        while idx < 26:
            mem[idx + mem[64] + 68] = mem[idx + _80 + 32]
            idx = idx + 32
            continue 
        revert with 0, 'SafeMath: division by zero'
    mem[32] = 52
    mem[0] = 57005
    _78 = mem[64]
    mem[64] = mem[64] + 64
    mem[_78] = 30
    mem[_78 + 32] = 'SafeMath: subtraction overflow'
    if storC4E3 > 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000:
        revert with 0, 'SafeMath: subtraction overflow'
    _89 = mem[64]
    mem[64] = mem[64] + 64
    mem[_89] = 30
    mem[_89 + 32] = 'SafeMath: subtraction overflow'
    if stor2DC2 > -storC4E3 - 39457584007913129639936:
        revert with 0, 'SafeMath: subtraction overflow'
    _105 = mem[64]
    mem[64] = mem[64] + 64
    mem[_105] = 26
    mem[_105 + 32] = 'SafeMath: division by zero' << 48
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    _121 = mem[64]
    mem[64] = mem[64] + 64
    mem[_121] = 26
    mem[_121 + 32] = 'SafeMath: division by zero' << 48
    if arg2:
        if 0 / arg2:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
    if not -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9:
        revert with 0, 'SafeMath: division by zero'
    return (0 / -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9 > arg1)
}

function sub_a3c4e7d3(?) {
    require calldata.size - 4 >= 32
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    idx = 0
    s = 0
    while idx < sub_f6bbe516.length:
        mem[0] = 19
        mem[164] = arg1
        require ext_code.size(sub_f6bbe516[idx])
        staticcall sub_f6bbe516[idx].0x1b4467cd with:
                gas gas_remaining wei
               args arg1
        mem[160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    idx = 0
    s = 0
    while idx < sub_428ba489.length:
        mem[0] = 20
        mem[164] = arg1
        require ext_code.size(sub_428ba489[idx])
        staticcall sub_428ba489[idx].0x70a08231 with:
                gas gas_remaining wei
               args arg1
        mem[160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _132 = ext_call.return_data[0]
        idx = idx + 1
        s = ext_call.return_data[0] + s
        continue 
    if (_75 * sub_f6bbe516.length) + (sub_4527881e[address(arg1)] / stor50) < sub_4527881e[address(arg1)] / stor50:
        revert with 0, 'SafeMath: addition overflow'
    if _132 * sub_428ba489.length < 0:
        revert with 0, 'SafeMath: addition overflow'
    idx = 0
    s = 0
    t = 0
    t = 0
    t = 0
    t = 0
    t = 0
    t = 0
    while idx < sub_d6737a6e.length:
        mem[0] = 17
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].getReserves() with:
                gas gas_remaining wei
        mem[160 len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_d6737a6e[idx])
        staticcall sub_d6737a6e[idx].token1() with:
                gas gas_remaining wei
        mem[160] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if this.address == address(ext_call.return_data[0]):
            idx = idx + 1
            s = s + Mask(112, 0, ext_call.return_data[0])
            t = sub_d6737a6e[idx]
            t = ext_call.return_data[0]
            t = ext_call.return_data[0]
            t = ext_call.return_data[64]
            t = ext_call.return_data[32]
            t = ext_call.return_data[0]
            continue 
        if address(ext_call.return_data[0]) != this.address:
            idx = idx + 1
            s = s
            t = sub_d6737a6e[idx]
            t = ext_call.return_data[0]
            t = ext_call.return_data[0]
            t = ext_call.return_data[64]
            t = ext_call.return_data[32]
            t = ext_call.return_data[0]
            continue 
        idx = idx + 1
        s = s + Mask(112, 0, ext_call.return_data[32])
        t = sub_d6737a6e[idx]
        t = ext_call.return_data[0]
        t = ext_call.return_data[0]
        t = ext_call.return_data[64]
        t = ext_call.return_data[32]
        t = ext_call.return_data[0]
        continue 
    if not sub_4527881e[address(arg1)] / stor50:
        if s:
            if 0 / s < 10:
                return (sub_5fdd4ed5 * 0 / s)
            return (10 * sub_5fdd4ed5)
        idx = 32
        revert with 0, 'SafeMath: division by zero'
    if 100 * sub_4527881e[address(arg1)] / stor50 / sub_4527881e[address(arg1)] / stor50 != 100:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not s:
        revert with 0, 'SafeMath: division by zero'
    if 100 * sub_4527881e[address(arg1)] / stor50 / s < 10:
        return (sub_5fdd4ed5 * 100 * sub_4527881e[address(arg1)] / stor50 / s)
    return (10 * sub_5fdd4ed5)
}

function sub_66eb3785(?) payable {
    mem[64] = 96
    require not msg.value
    if owner != msg.sender:
        revert with 0, 'e1'
    if totalSellFee + totalBuyFee < totalBuyFee:
        revert with 0, 'SafeMath: addition overflow'
    idx = 0
    while idx < sub_d6737a6e.length:
        mem[0] = sub_d6737a6e[idx]
        mem[32] = 52
        _15256 = mem[64]
        mem[64] = mem[64] + 64
        mem[_15256] = 26
        mem[_15256 + 32] = 'SafeMath: division by zero' << 48
        if stor50:
            _15278 = mem[64]
            mem[64] = mem[64] + 64
            mem[_15278] = 26
            mem[_15278 + 32] = 'SafeMath: division by zero' << 48
            if sub_4527881e[stor17[idx]] / stor50 / 10^9 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        mem[mem[64] + 68] = 'SafeMath: division by zero' << 48
        idx = 32
        while idx < 26:
            mem[idx + mem[64] + 68] = mem[idx + _15256 + 32]
            idx = idx + 32
            continue 
        revert with 0, 'SafeMath: division by zero'
    mem[32] = 52
    mem[0] = 57005
    _15254 = mem[64]
    mem[64] = mem[64] + 64
    mem[_15254] = 30
    mem[_15254 + 32] = 'SafeMath: subtraction overflow'
    if storC4E3 > 0xfffffffffffffffffffffffffffffffffffffffffffff7a50005900af4000000:
        revert with 0, 'SafeMath: subtraction overflow'
    _15265 = mem[64]
    mem[64] = mem[64] + 64
    mem[_15265] = 30
    mem[_15265 + 32] = 'SafeMath: subtraction overflow'
    if stor2DC2 > -storC4E3 - 39457584007913129639936:
        revert with 0, 'SafeMath: subtraction overflow'
    _15281 = mem[64]
    mem[64] = mem[64] + 64
    mem[_15281] = 26
    mem[_15281 + 32] = 'SafeMath: division by zero' << 48
    if not stor50:
        revert with 0, 'SafeMath: division by zero'
    _15297 = mem[64]
    mem[64] = mem[64] + 64
    mem[_15297] = 26
    mem[_15297 + 32] = 'SafeMath: division by zero' << 48
    if not stor47:
        _15301 = mem[64]
        mem[64] = mem[64] + 64
        mem[_15301] = 26
        mem[_15301 + 32] = 'SafeMath: division by zero' << 48
        if not -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9:
            revert with 0, 'SafeMath: division by zero'
        mem[0] = this.address
        mem[32] = 52
        if 0 / -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9 > stor46:
            _15329 = mem[64]
            mem[64] = mem[64] + 64
            mem[_15329] = 26
            mem[_15329 + 32] = 'SafeMath: division by zero' << 48
            if not stor50:
                revert with 0, 'SafeMath: division by zero'
            if not sub_4527881e[this.address] / stor50:
                _15389 = mem[64]
                mem[64] = mem[64] + 64
                mem[_15389] = 26
                mem[_15389 + 32] = 'SafeMath: division by zero' << 48
                if not totalSellFee + totalBuyFee:
                    revert with 0, 'SafeMath: division by zero'
                if not sub_9763eec4:
                    if sub_7ac82927 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15621 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15621] = 26
                        mem[_15621 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _15936 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15936] = 30
                        mem[_15936 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16397 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16397] = 30
                        mem[_16397 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _16973 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_16973]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_16973]
                                mem[_16973 + 260] = mem[_16973]
                                if Mask(251, 0, mem[_16973]):
                                    mem[_16973 + 292] = this.address
                                    mem[_16973 + 324 len floor32((32 * mem[_16973]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_16973], address(this.address), mem[_16973 + 324 len floor32((32 * mem[_16973]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_16973 + 260 len (32 * mem[_16973]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _16897 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16897] = 26
                            mem[_16897 + 32] = 'SafeMath: division by zero' << 48
                            _17513 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17513] = 30
                            mem[_17513 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18434 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18434]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18434]
                                mem[_18434 + 260] = mem[_18434]
                                if Mask(251, 0, mem[_18434]):
                                    mem[_18434 + 292] = this.address
                                    mem[_18434 + 324 len floor32((32 * mem[_18434]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18434], address(this.address), mem[_18434 + 324 len floor32((32 * mem[_18434]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18434 + 260 len (32 * mem[_18434]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18434 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18434 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18434 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19004 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19004]
                                mem[_19004 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19004]
                                mem[_19004 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19004]
                                mem[_19004 + 96] = stableCoinAddress
                                mem[_19004 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19004 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19004 + 164] = 0
                                mem[_19004 + 228] = this.address
                                mem[_19004 + 260] = block.timestamp
                                mem[_19004 + 196] = 160
                                mem[_19004 + 292] = mem[_19004]
                                mem[_19004 + 324 len floor32(mem[_19004])] = mem[_19004 + 32 len floor32(mem[_19004])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19004 + 292 len (32 * mem[_19004]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19004 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19004 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19004 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15645 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15645] = 26
                        mem[_15645 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16029 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16029] = 30
                        mem[_16029 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16458 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16458] = 30
                        mem[_16458 + 32] = 'SafeMath: subtraction overflow'
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    _17073 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17073]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17073]
                                    mem[_17073 + 260] = mem[_17073]
                                    if Mask(251, 0, mem[_17073]):
                                        mem[_17073 + 292] = this.address
                                        mem[_17073 + 324 len floor32((32 * mem[_17073]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17073], address(this.address), mem[_17073 + 324 len floor32((32 * mem[_17073]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17073 + 260 len (32 * mem[_17073]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16970 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_16970]
                                mem[_16970 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_16970]
                                mem[_16970 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_16970]
                                mem[_16970 + 96] = stableCoinAddress
                                mem[_16970 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_16970 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                mem[_16970 + 164] = 0
                                mem[_16970 + 228] = sub_7d4b5017Address
                                mem[_16970 + 260] = block.timestamp
                                mem[_16970 + 196] = 160
                                mem[_16970 + 292] = mem[_16970]
                                mem[_16970 + 324 len floor32(mem[_16970])] = mem[_16970 + 32 len floor32(mem[_16970])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_16970 + 292 len (32 * mem[_16970]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _16972 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16972] = 26
                            mem[_16972 + 32] = 'SafeMath: division by zero' << 48
                            _17624 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17624] = 30
                            mem[_17624 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18598 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18598]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18598]
                                mem[_18598 + 260] = mem[_18598]
                                if Mask(251, 0, mem[_18598]):
                                    mem[_18598 + 292] = this.address
                                    mem[_18598 + 324 len floor32((32 * mem[_18598]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18598], address(this.address), mem[_18598 + 324 len floor32((32 * mem[_18598]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18598 + 260 len (32 * mem[_18598]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18598 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18598 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18598 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19187 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19187]
                                mem[_19187 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19187]
                                mem[_19187 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19187]
                                mem[_19187 + 96] = stableCoinAddress
                                mem[_19187 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19187 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19187 + 164] = 0
                                mem[_19187 + 228] = this.address
                                mem[_19187 + 260] = block.timestamp
                                mem[_19187 + 196] = 160
                                mem[_19187 + 292] = mem[_19187]
                                mem[_19187 + 324 len floor32(mem[_19187])] = mem[_19187 + 32 len floor32(mem[_19187])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19187 + 292 len (32 * mem[_19187]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19187 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19187 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19187 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                else:
                    if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15644 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15644] = 26
                        mem[_15644 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16026 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16026] = 30
                        mem[_16026 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16455 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16455] = 30
                        mem[_16455 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17071 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17071]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17071]
                                mem[_17071 + 260] = mem[_17071]
                                if Mask(251, 0, mem[_17071]):
                                    mem[_17071 + 292] = this.address
                                    mem[_17071 + 324 len floor32((32 * mem[_17071]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17071], address(this.address), mem[_17071 + 324 len floor32((32 * mem[_17071]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17071 + 260 len (32 * mem[_17071]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _16967 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16967] = 26
                            mem[_16967 + 32] = 'SafeMath: division by zero' << 48
                            _17617 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17617] = 30
                            mem[_17617 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18591 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18591]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18591]
                                mem[_18591 + 260] = mem[_18591]
                                if Mask(251, 0, mem[_18591]):
                                    mem[_18591 + 292] = this.address
                                    mem[_18591 + 324 len floor32((32 * mem[_18591]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18591], address(this.address), mem[_18591 + 324 len floor32((32 * mem[_18591]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18591 + 260 len (32 * mem[_18591]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18591 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18591 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18591 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19184 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19184]
                                mem[_19184 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19184]
                                mem[_19184 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19184]
                                mem[_19184 + 96] = stableCoinAddress
                                mem[_19184 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19184 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19184 + 164] = 0
                                mem[_19184 + 228] = this.address
                                mem[_19184 + 260] = block.timestamp
                                mem[_19184 + 196] = 160
                                mem[_19184 + 292] = mem[_19184]
                                mem[_19184 + 324 len floor32(mem[_19184])] = mem[_19184 + 32 len floor32(mem[_19184])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19184 + 292 len (32 * mem[_19184]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19184 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19184 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19184 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15673 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15673] = 26
                        mem[_15673 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16128 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16128] = 30
                        mem[_16128 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16527 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16527] = 30
                        mem[_16527 + 32] = 'SafeMath: subtraction overflow'
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    _17204 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17204]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17204]
                                    mem[_17204 + 260] = mem[_17204]
                                    if Mask(251, 0, mem[_17204]):
                                        mem[_17204 + 292] = this.address
                                        mem[_17204 + 324 len floor32((32 * mem[_17204]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17204], address(this.address), mem[_17204 + 324 len floor32((32 * mem[_17204]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17204 + 260 len (32 * mem[_17204]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17068 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17068]
                                mem[_17068 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17068]
                                mem[_17068 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17068]
                                mem[_17068 + 96] = stableCoinAddress
                                mem[_17068 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17068 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                mem[_17068 + 164] = 0
                                mem[_17068 + 228] = sub_7d4b5017Address
                                mem[_17068 + 260] = block.timestamp
                                mem[_17068 + 196] = 160
                                mem[_17068 + 292] = mem[_17068]
                                mem[_17068 + 324 len floor32(mem[_17068])] = mem[_17068 + 32 len floor32(mem[_17068])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17068 + 292 len (32 * mem[_17068]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17070 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17070] = 26
                            mem[_17070 + 32] = 'SafeMath: division by zero' << 48
                            _17777 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17777] = 30
                            mem[_17777 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18788 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18788]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18788]
                                mem[_18788 + 260] = mem[_18788]
                                if Mask(251, 0, mem[_18788]):
                                    mem[_18788 + 292] = this.address
                                    mem[_18788 + 324 len floor32((32 * mem[_18788]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18788], address(this.address), mem[_18788 + 324 len floor32((32 * mem[_18788]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18788 + 260 len (32 * mem[_18788]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18788 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18788 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18788 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19346 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19346]
                                mem[_19346 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19346]
                                mem[_19346 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19346]
                                mem[_19346 + 96] = stableCoinAddress
                                mem[_19346 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19346 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19346 + 164] = 0
                                mem[_19346 + 228] = this.address
                                mem[_19346 + 260] = block.timestamp
                                mem[_19346 + 196] = 160
                                mem[_19346 + 292] = mem[_19346]
                                mem[_19346 + 324 len floor32(mem[_19346])] = mem[_19346 + 32 len floor32(mem[_19346])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19346 + 292 len (32 * mem[_19346]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19346 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19346 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19346 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
            else:
                if 0 / sub_4527881e[this.address] / stor50:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _15397 = mem[64]
                mem[64] = mem[64] + 64
                mem[_15397] = 26
                mem[_15397 + 32] = 'SafeMath: division by zero' << 48
                if not totalSellFee + totalBuyFee:
                    revert with 0, 'SafeMath: division by zero'
                if not sub_9763eec4:
                    if sub_7ac82927 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15643 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15643] = 26
                        mem[_15643 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16021 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16021] = 30
                        mem[_16021 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16451 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16451] = 30
                        mem[_16451 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17064 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17064]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17064]
                                mem[_17064 + 260] = mem[_17064]
                                if Mask(251, 0, mem[_17064]):
                                    mem[_17064 + 292] = this.address
                                    mem[_17064 + 324 len floor32((32 * mem[_17064]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17064], address(this.address), mem[_17064 + 324 len floor32((32 * mem[_17064]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17064 + 260 len (32 * mem[_17064]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _16963 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16963] = 26
                            mem[_16963 + 32] = 'SafeMath: division by zero' << 48
                            _17610 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17610] = 30
                            mem[_17610 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18582 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18582]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18582]
                                mem[_18582 + 260] = mem[_18582]
                                if Mask(251, 0, mem[_18582]):
                                    mem[_18582 + 292] = this.address
                                    mem[_18582 + 324 len floor32((32 * mem[_18582]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18582], address(this.address), mem[_18582 + 324 len floor32((32 * mem[_18582]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18582 + 260 len (32 * mem[_18582]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18582 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18582 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18582 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19178 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19178]
                                mem[_19178 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19178]
                                mem[_19178 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19178]
                                mem[_19178 + 96] = stableCoinAddress
                                mem[_19178 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19178 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19178 + 164] = 0
                                mem[_19178 + 228] = this.address
                                mem[_19178 + 260] = block.timestamp
                                mem[_19178 + 196] = 160
                                mem[_19178 + 292] = mem[_19178]
                                mem[_19178 + 324 len floor32(mem[_19178])] = mem[_19178 + 32 len floor32(mem[_19178])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19178 + 292 len (32 * mem[_19178]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19178 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19178 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19178 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15672 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15672] = 26
                        mem[_15672 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16124 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16124] = 30
                        mem[_16124 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16523 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16523] = 30
                        mem[_16523 + 32] = 'SafeMath: subtraction overflow'
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    _17198 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17198]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17198]
                                    mem[_17198 + 260] = mem[_17198]
                                    if Mask(251, 0, mem[_17198]):
                                        mem[_17198 + 292] = this.address
                                        mem[_17198 + 324 len floor32((32 * mem[_17198]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17198], address(this.address), mem[_17198 + 324 len floor32((32 * mem[_17198]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17198 + 260 len (32 * mem[_17198]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17061 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17061]
                                mem[_17061 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17061]
                                mem[_17061 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17061]
                                mem[_17061 + 96] = stableCoinAddress
                                mem[_17061 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17061 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                mem[_17061 + 164] = 0
                                mem[_17061 + 228] = sub_7d4b5017Address
                                mem[_17061 + 260] = block.timestamp
                                mem[_17061 + 196] = 160
                                mem[_17061 + 292] = mem[_17061]
                                mem[_17061 + 324 len floor32(mem[_17061])] = mem[_17061 + 32 len floor32(mem[_17061])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17061 + 292 len (32 * mem[_17061]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17063 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17063] = 26
                            mem[_17063 + 32] = 'SafeMath: division by zero' << 48
                            _17768 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17768] = 30
                            mem[_17768 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18778 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18778]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18778]
                                mem[_18778 + 260] = mem[_18778]
                                if Mask(251, 0, mem[_18778]):
                                    mem[_18778 + 292] = this.address
                                    mem[_18778 + 324 len floor32((32 * mem[_18778]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18778], address(this.address), mem[_18778 + 324 len floor32((32 * mem[_18778]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18778 + 260 len (32 * mem[_18778]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18778 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18778 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18778 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19339 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19339]
                                mem[_19339 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19339]
                                mem[_19339 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19339]
                                mem[_19339 + 96] = stableCoinAddress
                                mem[_19339 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19339 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19339 + 164] = 0
                                mem[_19339 + 228] = this.address
                                mem[_19339 + 260] = block.timestamp
                                mem[_19339 + 196] = 160
                                mem[_19339 + 292] = mem[_19339]
                                mem[_19339 + 324 len floor32(mem[_19339])] = mem[_19339 + 32 len floor32(mem[_19339])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19339 + 292 len (32 * mem[_19339]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19339 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19339 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19339 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                else:
                    if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15671 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15671] = 26
                        mem[_15671 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16121 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16121] = 30
                        mem[_16121 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16520 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16520] = 30
                        mem[_16520 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17196 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17196]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17196]
                                mem[_17196 + 260] = mem[_17196]
                                if Mask(251, 0, mem[_17196]):
                                    mem[_17196 + 292] = this.address
                                    mem[_17196 + 324 len floor32((32 * mem[_17196]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17196], address(this.address), mem[_17196 + 324 len floor32((32 * mem[_17196]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17196 + 260 len (32 * mem[_17196]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17058 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17058] = 26
                            mem[_17058 + 32] = 'SafeMath: division by zero' << 48
                            _17761 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17761] = 30
                            mem[_17761 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18771 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18771]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18771]
                                mem[_18771 + 260] = mem[_18771]
                                if Mask(251, 0, mem[_18771]):
                                    mem[_18771 + 292] = this.address
                                    mem[_18771 + 324 len floor32((32 * mem[_18771]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18771], address(this.address), mem[_18771 + 324 len floor32((32 * mem[_18771]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18771 + 260 len (32 * mem[_18771]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18771 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18771 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18771 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19336 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19336]
                                mem[_19336 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19336]
                                mem[_19336 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19336]
                                mem[_19336 + 96] = stableCoinAddress
                                mem[_19336 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19336 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19336 + 164] = 0
                                mem[_19336 + 228] = this.address
                                mem[_19336 + 260] = block.timestamp
                                mem[_19336 + 196] = 160
                                mem[_19336 + 292] = mem[_19336]
                                mem[_19336 + 324 len floor32(mem[_19336])] = mem[_19336 + 32 len floor32(mem[_19336])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19336 + 292 len (32 * mem[_19336]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19336 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19336 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19336 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15705 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15705] = 26
                        mem[_15705 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16223 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16223] = 30
                        mem[_16223 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16609 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16609] = 30
                        mem[_16609 + 32] = 'SafeMath: subtraction overflow'
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    _17331 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17331]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17331]
                                    mem[_17331 + 260] = mem[_17331]
                                    if Mask(251, 0, mem[_17331]):
                                        mem[_17331 + 292] = this.address
                                        mem[_17331 + 324 len floor32((32 * mem[_17331]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17331], address(this.address), mem[_17331 + 324 len floor32((32 * mem[_17331]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17331 + 260 len (32 * mem[_17331]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17193 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17193]
                                mem[_17193 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17193]
                                mem[_17193 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17193]
                                mem[_17193 + 96] = stableCoinAddress
                                mem[_17193 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17193 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                mem[_17193 + 164] = 0
                                mem[_17193 + 228] = sub_7d4b5017Address
                                mem[_17193 + 260] = block.timestamp
                                mem[_17193 + 196] = 160
                                mem[_17193 + 292] = mem[_17193]
                                mem[_17193 + 324 len floor32(mem[_17193])] = mem[_17193 + 32 len floor32(mem[_17193])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17193 + 292 len (32 * mem[_17193]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17195 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17195] = 26
                            mem[_17195 + 32] = 'SafeMath: division by zero' << 48
                            _17945 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17945] = 30
                            mem[_17945 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18983 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18983]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18983]
                                mem[_18983 + 260] = mem[_18983]
                                if Mask(251, 0, mem[_18983]):
                                    mem[_18983 + 292] = this.address
                                    mem[_18983 + 324 len floor32((32 * mem[_18983]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18983], address(this.address), mem[_18983 + 324 len floor32((32 * mem[_18983]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18983 + 260 len (32 * mem[_18983]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18983 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18983 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18983 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19499 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19499]
                                mem[_19499 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19499]
                                mem[_19499 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19499]
                                mem[_19499 + 96] = stableCoinAddress
                                mem[_19499 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19499 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19499 + 164] = 0
                                mem[_19499 + 228] = this.address
                                mem[_19499 + 260] = block.timestamp
                                mem[_19499 + 196] = 160
                                mem[_19499 + 292] = mem[_19499]
                                mem[_19499 + 324 len floor32(mem[_19499])] = mem[_19499 + 32 len floor32(mem[_19499])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19499 + 292 len (32 * mem[_19499]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19499 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19499 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19499 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
        else:
            _15330 = mem[64]
            mem[64] = mem[64] + 64
            mem[_15330] = 26
            mem[_15330 + 32] = 'SafeMath: division by zero' << 48
            if not stor50:
                revert with 0, 'SafeMath: division by zero'
            if not liquidityFee:
                if not sub_4527881e[this.address] / stor50:
                    _15392 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15392] = 26
                    mem[_15392 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15628 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15628] = 26
                            mem[_15628 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _15966 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15966] = 30
                            mem[_15966 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16417 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16417] = 30
                            mem[_16417 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17004 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17004]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17004]
                                    mem[_17004 + 260] = mem[_17004]
                                    if Mask(251, 0, mem[_17004]):
                                        mem[_17004 + 292] = this.address
                                        mem[_17004 + 324 len floor32((32 * mem[_17004]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17004], address(this.address), mem[_17004 + 324 len floor32((32 * mem[_17004]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17004 + 260 len (32 * mem[_17004]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16920 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16920] = 26
                                mem[_16920 + 32] = 'SafeMath: division by zero' << 48
                                _17546 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17546] = 30
                                mem[_17546 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18486 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18486]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18486]
                                    mem[_18486 + 260] = mem[_18486]
                                    if Mask(251, 0, mem[_18486]):
                                        mem[_18486 + 292] = this.address
                                        mem[_18486 + 324 len floor32((32 * mem[_18486]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18486], address(this.address), mem[_18486 + 324 len floor32((32 * mem[_18486]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18486 + 260 len (32 * mem[_18486]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18486 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18486 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18486 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19071 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19071]
                                    mem[_19071 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19071]
                                    mem[_19071 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19071]
                                    mem[_19071 + 96] = stableCoinAddress
                                    mem[_19071 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19071 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19071 + 164] = 0
                                    mem[_19071 + 228] = this.address
                                    mem[_19071 + 260] = block.timestamp
                                    mem[_19071 + 196] = 160
                                    mem[_19071 + 292] = mem[_19071]
                                    mem[_19071 + 324 len floor32(mem[_19071])] = mem[_19071 + 32 len floor32(mem[_19071])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19071 + 292 len (32 * mem[_19071]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19071 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19071 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19071 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15655 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15655] = 26
                            mem[_15655 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16063 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16063] = 30
                            mem[_16063 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16480 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16480] = 30
                            mem[_16480 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17117 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17117]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17117]
                                        mem[_17117 + 260] = mem[_17117]
                                        if Mask(251, 0, mem[_17117]):
                                            mem[_17117 + 292] = this.address
                                            mem[_17117 + 324 len floor32((32 * mem[_17117]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17117], address(this.address), mem[_17117 + 324 len floor32((32 * mem[_17117]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17117 + 260 len (32 * mem[_17117]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17001 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17001]
                                    mem[_17001 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17001]
                                    mem[_17001 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17001]
                                    mem[_17001 + 96] = stableCoinAddress
                                    mem[_17001 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17001 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17001 + 164] = 0
                                    mem[_17001 + 228] = sub_7d4b5017Address
                                    mem[_17001 + 260] = block.timestamp
                                    mem[_17001 + 196] = 160
                                    mem[_17001 + 292] = mem[_17001]
                                    mem[_17001 + 324 len floor32(mem[_17001])] = mem[_17001 + 32 len floor32(mem[_17001])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17001 + 292 len (32 * mem[_17001]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17003 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17003] = 26
                                mem[_17003 + 32] = 'SafeMath: division by zero' << 48
                                _17674 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17674] = 30
                                mem[_17674 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18661 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18661]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18661]
                                    mem[_18661 + 260] = mem[_18661]
                                    if Mask(251, 0, mem[_18661]):
                                        mem[_18661 + 292] = this.address
                                        mem[_18661 + 324 len floor32((32 * mem[_18661]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18661], address(this.address), mem[_18661 + 324 len floor32((32 * mem[_18661]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18661 + 260 len (32 * mem[_18661]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18661 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18661 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18661 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19244 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19244]
                                    mem[_19244 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19244]
                                    mem[_19244 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19244]
                                    mem[_19244 + 96] = stableCoinAddress
                                    mem[_19244 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19244 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19244 + 164] = 0
                                    mem[_19244 + 228] = this.address
                                    mem[_19244 + 260] = block.timestamp
                                    mem[_19244 + 196] = 160
                                    mem[_19244 + 292] = mem[_19244]
                                    mem[_19244 + 324 len floor32(mem[_19244])] = mem[_19244 + 32 len floor32(mem[_19244])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19244 + 292 len (32 * mem[_19244]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19244 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19244 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19244 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15654 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15654] = 26
                            mem[_15654 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16060 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16060] = 30
                            mem[_16060 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16477 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16477] = 30
                            mem[_16477 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17115 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17115]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17115]
                                    mem[_17115 + 260] = mem[_17115]
                                    if Mask(251, 0, mem[_17115]):
                                        mem[_17115 + 292] = this.address
                                        mem[_17115 + 324 len floor32((32 * mem[_17115]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17115], address(this.address), mem[_17115 + 324 len floor32((32 * mem[_17115]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17115 + 260 len (32 * mem[_17115]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16998 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16998] = 26
                                mem[_16998 + 32] = 'SafeMath: division by zero' << 48
                                _17667 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17667] = 30
                                mem[_17667 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18654 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18654]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18654]
                                    mem[_18654 + 260] = mem[_18654]
                                    if Mask(251, 0, mem[_18654]):
                                        mem[_18654 + 292] = this.address
                                        mem[_18654 + 324 len floor32((32 * mem[_18654]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18654], address(this.address), mem[_18654 + 324 len floor32((32 * mem[_18654]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18654 + 260 len (32 * mem[_18654]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18654 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18654 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18654 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19241 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19241]
                                    mem[_19241 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19241]
                                    mem[_19241 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19241]
                                    mem[_19241 + 96] = stableCoinAddress
                                    mem[_19241 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19241 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19241 + 164] = 0
                                    mem[_19241 + 228] = this.address
                                    mem[_19241 + 260] = block.timestamp
                                    mem[_19241 + 196] = 160
                                    mem[_19241 + 292] = mem[_19241]
                                    mem[_19241 + 324 len floor32(mem[_19241])] = mem[_19241 + 32 len floor32(mem[_19241])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19241 + 292 len (32 * mem[_19241]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19241 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19241 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19241 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15684 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15684] = 26
                            mem[_15684 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16163 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16163] = 30
                            mem[_16163 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16556 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16556] = 30
                            mem[_16556 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17253 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17253]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17253]
                                        mem[_17253 + 260] = mem[_17253]
                                        if Mask(251, 0, mem[_17253]):
                                            mem[_17253 + 292] = this.address
                                            mem[_17253 + 324 len floor32((32 * mem[_17253]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17253], address(this.address), mem[_17253 + 324 len floor32((32 * mem[_17253]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17253 + 260 len (32 * mem[_17253]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17112 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17112]
                                    mem[_17112 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17112]
                                    mem[_17112 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17112]
                                    mem[_17112 + 96] = stableCoinAddress
                                    mem[_17112 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17112 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17112 + 164] = 0
                                    mem[_17112 + 228] = sub_7d4b5017Address
                                    mem[_17112 + 260] = block.timestamp
                                    mem[_17112 + 196] = 160
                                    mem[_17112 + 292] = mem[_17112]
                                    mem[_17112 + 324 len floor32(mem[_17112])] = mem[_17112 + 32 len floor32(mem[_17112])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17112 + 292 len (32 * mem[_17112]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17114 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17114] = 26
                                mem[_17114 + 32] = 'SafeMath: division by zero' << 48
                                _17839 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17839] = 30
                                mem[_17839 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18860 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18860]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18860]
                                    mem[_18860 + 260] = mem[_18860]
                                    if Mask(251, 0, mem[_18860]):
                                        mem[_18860 + 292] = this.address
                                        mem[_18860 + 324 len floor32((32 * mem[_18860]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18860], address(this.address), mem[_18860 + 324 len floor32((32 * mem[_18860]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18860 + 260 len (32 * mem[_18860]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18860 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18860 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18860 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19401 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19401]
                                    mem[_19401 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19401]
                                    mem[_19401 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19401]
                                    mem[_19401 + 96] = stableCoinAddress
                                    mem[_19401 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19401 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19401 + 164] = 0
                                    mem[_19401 + 228] = this.address
                                    mem[_19401 + 260] = block.timestamp
                                    mem[_19401 + 196] = 160
                                    mem[_19401 + 292] = mem[_19401]
                                    mem[_19401 + 324 len floor32(mem[_19401])] = mem[_19401 + 32 len floor32(mem[_19401])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19401 + 292 len (32 * mem[_19401]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19401 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19401 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19401 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
                else:
                    if 0 / sub_4527881e[this.address] / stor50:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _15399 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15399] = 26
                    mem[_15399 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15653 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15653] = 26
                            mem[_15653 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16055 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16055] = 30
                            mem[_16055 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16473 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16473] = 30
                            mem[_16473 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17108 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17108]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17108]
                                    mem[_17108 + 260] = mem[_17108]
                                    if Mask(251, 0, mem[_17108]):
                                        mem[_17108 + 292] = this.address
                                        mem[_17108 + 324 len floor32((32 * mem[_17108]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17108], address(this.address), mem[_17108 + 324 len floor32((32 * mem[_17108]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17108 + 260 len (32 * mem[_17108]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16994 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16994] = 26
                                mem[_16994 + 32] = 'SafeMath: division by zero' << 48
                                _17660 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17660] = 30
                                mem[_17660 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18645 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18645]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18645]
                                    mem[_18645 + 260] = mem[_18645]
                                    if Mask(251, 0, mem[_18645]):
                                        mem[_18645 + 292] = this.address
                                        mem[_18645 + 324 len floor32((32 * mem[_18645]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18645], address(this.address), mem[_18645 + 324 len floor32((32 * mem[_18645]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18645 + 260 len (32 * mem[_18645]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18645 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18645 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18645 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19235 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19235]
                                    mem[_19235 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19235]
                                    mem[_19235 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19235]
                                    mem[_19235 + 96] = stableCoinAddress
                                    mem[_19235 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19235 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19235 + 164] = 0
                                    mem[_19235 + 228] = this.address
                                    mem[_19235 + 260] = block.timestamp
                                    mem[_19235 + 196] = 160
                                    mem[_19235 + 292] = mem[_19235]
                                    mem[_19235 + 324 len floor32(mem[_19235])] = mem[_19235 + 32 len floor32(mem[_19235])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19235 + 292 len (32 * mem[_19235]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19235 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19235 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19235 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15683 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15683] = 26
                            mem[_15683 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16159 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16159] = 30
                            mem[_16159 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16552 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16552] = 30
                            mem[_16552 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17247 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17247]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17247]
                                        mem[_17247 + 260] = mem[_17247]
                                        if Mask(251, 0, mem[_17247]):
                                            mem[_17247 + 292] = this.address
                                            mem[_17247 + 324 len floor32((32 * mem[_17247]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17247], address(this.address), mem[_17247 + 324 len floor32((32 * mem[_17247]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17247 + 260 len (32 * mem[_17247]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17105 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17105]
                                    mem[_17105 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17105]
                                    mem[_17105 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17105]
                                    mem[_17105 + 96] = stableCoinAddress
                                    mem[_17105 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17105 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17105 + 164] = 0
                                    mem[_17105 + 228] = sub_7d4b5017Address
                                    mem[_17105 + 260] = block.timestamp
                                    mem[_17105 + 196] = 160
                                    mem[_17105 + 292] = mem[_17105]
                                    mem[_17105 + 324 len floor32(mem[_17105])] = mem[_17105 + 32 len floor32(mem[_17105])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17105 + 292 len (32 * mem[_17105]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17107 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17107] = 26
                                mem[_17107 + 32] = 'SafeMath: division by zero' << 48
                                _17830 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17830] = 30
                                mem[_17830 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18850 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18850]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18850]
                                    mem[_18850 + 260] = mem[_18850]
                                    if Mask(251, 0, mem[_18850]):
                                        mem[_18850 + 292] = this.address
                                        mem[_18850 + 324 len floor32((32 * mem[_18850]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18850], address(this.address), mem[_18850 + 324 len floor32((32 * mem[_18850]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18850 + 260 len (32 * mem[_18850]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18850 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18850 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18850 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19394 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19394]
                                    mem[_19394 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19394]
                                    mem[_19394 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19394]
                                    mem[_19394 + 96] = stableCoinAddress
                                    mem[_19394 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19394 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19394 + 164] = 0
                                    mem[_19394 + 228] = this.address
                                    mem[_19394 + 260] = block.timestamp
                                    mem[_19394 + 196] = 160
                                    mem[_19394 + 292] = mem[_19394]
                                    mem[_19394 + 324 len floor32(mem[_19394])] = mem[_19394 + 32 len floor32(mem[_19394])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19394 + 292 len (32 * mem[_19394]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19394 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19394 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19394 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15682 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15682] = 26
                            mem[_15682 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16156 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16156] = 30
                            mem[_16156 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16549 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16549] = 30
                            mem[_16549 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17245 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17245]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17245]
                                    mem[_17245 + 260] = mem[_17245]
                                    if Mask(251, 0, mem[_17245]):
                                        mem[_17245 + 292] = this.address
                                        mem[_17245 + 324 len floor32((32 * mem[_17245]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17245], address(this.address), mem[_17245 + 324 len floor32((32 * mem[_17245]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17245 + 260 len (32 * mem[_17245]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17102 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17102] = 26
                                mem[_17102 + 32] = 'SafeMath: division by zero' << 48
                                _17823 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17823] = 30
                                mem[_17823 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18843 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18843]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18843]
                                    mem[_18843 + 260] = mem[_18843]
                                    if Mask(251, 0, mem[_18843]):
                                        mem[_18843 + 292] = this.address
                                        mem[_18843 + 324 len floor32((32 * mem[_18843]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18843], address(this.address), mem[_18843 + 324 len floor32((32 * mem[_18843]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18843 + 260 len (32 * mem[_18843]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18843 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18843 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18843 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19391 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19391]
                                    mem[_19391 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19391]
                                    mem[_19391 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19391]
                                    mem[_19391 + 96] = stableCoinAddress
                                    mem[_19391 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19391 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19391 + 164] = 0
                                    mem[_19391 + 228] = this.address
                                    mem[_19391 + 260] = block.timestamp
                                    mem[_19391 + 196] = 160
                                    mem[_19391 + 292] = mem[_19391]
                                    mem[_19391 + 324 len floor32(mem[_19391])] = mem[_19391 + 32 len floor32(mem[_19391])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19391 + 292 len (32 * mem[_19391]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19391 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19391 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19391 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15722 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15722] = 26
                            mem[_15722 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16255 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16255] = 30
                            mem[_16255 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16640 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16640] = 30
                            mem[_16640 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17366 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17366]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17366]
                                        mem[_17366 + 260] = mem[_17366]
                                        if Mask(251, 0, mem[_17366]):
                                            mem[_17366 + 292] = this.address
                                            mem[_17366 + 324 len floor32((32 * mem[_17366]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17366], address(this.address), mem[_17366 + 324 len floor32((32 * mem[_17366]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17366 + 260 len (32 * mem[_17366]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17242 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17242]
                                    mem[_17242 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17242]
                                    mem[_17242 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17242]
                                    mem[_17242 + 96] = stableCoinAddress
                                    mem[_17242 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17242 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17242 + 164] = 0
                                    mem[_17242 + 228] = sub_7d4b5017Address
                                    mem[_17242 + 260] = block.timestamp
                                    mem[_17242 + 196] = 160
                                    mem[_17242 + 292] = mem[_17242]
                                    mem[_17242 + 324 len floor32(mem[_17242])] = mem[_17242 + 32 len floor32(mem[_17242])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17242 + 292 len (32 * mem[_17242]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17244 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17244] = 26
                                mem[_17244 + 32] = 'SafeMath: division by zero' << 48
                                _18004 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18004] = 30
                                mem[_18004 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19050 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19050]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19050]
                                    mem[_19050 + 260] = mem[_19050]
                                    if Mask(251, 0, mem[_19050]):
                                        mem[_19050 + 292] = this.address
                                        mem[_19050 + 324 len floor32((32 * mem[_19050]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19050], address(this.address), mem[_19050 + 324 len floor32((32 * mem[_19050]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19050 + 260 len (32 * mem[_19050]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19050 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19050 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19050 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19559 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19559]
                                    mem[_19559 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19559]
                                    mem[_19559 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19559]
                                    mem[_19559 + 96] = stableCoinAddress
                                    mem[_19559 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19559 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19559 + 164] = 0
                                    mem[_19559 + 228] = this.address
                                    mem[_19559 + 260] = block.timestamp
                                    mem[_19559 + 196] = 160
                                    mem[_19559 + 292] = mem[_19559]
                                    mem[_19559 + 324 len floor32(mem[_19559])] = mem[_19559 + 32 len floor32(mem[_19559])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19559 + 292 len (32 * mem[_19559]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19559 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19559 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19559 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
            else:
                if 2 * liquidityFee / liquidityFee != 2:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not sub_4527881e[this.address] / stor50:
                    _15398 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15398] = 26
                    mem[_15398 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15650 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15650] = 26
                            mem[_15650 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16046 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16046] = 30
                            mem[_16046 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16468 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16468] = 30
                            mem[_16468 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17097 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17097]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17097]
                                    mem[_17097 + 260] = mem[_17097]
                                    if Mask(251, 0, mem[_17097]):
                                        mem[_17097 + 292] = this.address
                                        mem[_17097 + 324 len floor32((32 * mem[_17097]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17097], address(this.address), mem[_17097 + 324 len floor32((32 * mem[_17097]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17097 + 260 len (32 * mem[_17097]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16987 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16987] = 26
                                mem[_16987 + 32] = 'SafeMath: division by zero' << 48
                                _17648 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17648] = 30
                                mem[_17648 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18629 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18629]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18629]
                                    mem[_18629 + 260] = mem[_18629]
                                    if Mask(251, 0, mem[_18629]):
                                        mem[_18629 + 292] = this.address
                                        mem[_18629 + 324 len floor32((32 * mem[_18629]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18629], address(this.address), mem[_18629 + 324 len floor32((32 * mem[_18629]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18629 + 260 len (32 * mem[_18629]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18629 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18629 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18629 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19223 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19223]
                                    mem[_19223 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19223]
                                    mem[_19223 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19223]
                                    mem[_19223 + 96] = stableCoinAddress
                                    mem[_19223 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19223 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19223 + 164] = 0
                                    mem[_19223 + 228] = this.address
                                    mem[_19223 + 260] = block.timestamp
                                    mem[_19223 + 196] = 160
                                    mem[_19223 + 292] = mem[_19223]
                                    mem[_19223 + 324 len floor32(mem[_19223])] = mem[_19223 + 32 len floor32(mem[_19223])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19223 + 292 len (32 * mem[_19223]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19223 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19223 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19223 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15681 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15681] = 26
                            mem[_15681 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16150 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16150] = 30
                            mem[_16150 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16544 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16544] = 30
                            mem[_16544 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17234 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17234]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17234]
                                        mem[_17234 + 260] = mem[_17234]
                                        if Mask(251, 0, mem[_17234]):
                                            mem[_17234 + 292] = this.address
                                            mem[_17234 + 324 len floor32((32 * mem[_17234]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17234], address(this.address), mem[_17234 + 324 len floor32((32 * mem[_17234]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17234 + 260 len (32 * mem[_17234]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17094 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17094]
                                    mem[_17094 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17094]
                                    mem[_17094 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17094]
                                    mem[_17094 + 96] = stableCoinAddress
                                    mem[_17094 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17094 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17094 + 164] = 0
                                    mem[_17094 + 228] = sub_7d4b5017Address
                                    mem[_17094 + 260] = block.timestamp
                                    mem[_17094 + 196] = 160
                                    mem[_17094 + 292] = mem[_17094]
                                    mem[_17094 + 324 len floor32(mem[_17094])] = mem[_17094 + 32 len floor32(mem[_17094])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17094 + 292 len (32 * mem[_17094]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17096 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17096] = 26
                                mem[_17096 + 32] = 'SafeMath: division by zero' << 48
                                _17814 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17814] = 30
                                mem[_17814 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18831 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18831]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18831]
                                    mem[_18831 + 260] = mem[_18831]
                                    if Mask(251, 0, mem[_18831]):
                                        mem[_18831 + 292] = this.address
                                        mem[_18831 + 324 len floor32((32 * mem[_18831]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18831], address(this.address), mem[_18831 + 324 len floor32((32 * mem[_18831]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18831 + 260 len (32 * mem[_18831]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18831 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18831 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18831 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19381 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19381]
                                    mem[_19381 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19381]
                                    mem[_19381 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19381]
                                    mem[_19381 + 96] = stableCoinAddress
                                    mem[_19381 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19381 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19381 + 164] = 0
                                    mem[_19381 + 228] = this.address
                                    mem[_19381 + 260] = block.timestamp
                                    mem[_19381 + 196] = 160
                                    mem[_19381 + 292] = mem[_19381]
                                    mem[_19381 + 324 len floor32(mem[_19381])] = mem[_19381 + 32 len floor32(mem[_19381])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19381 + 292 len (32 * mem[_19381]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19381 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19381 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19381 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15680 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15680] = 26
                            mem[_15680 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16147 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16147] = 30
                            mem[_16147 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16541 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16541] = 30
                            mem[_16541 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17232 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17232]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17232]
                                    mem[_17232 + 260] = mem[_17232]
                                    if Mask(251, 0, mem[_17232]):
                                        mem[_17232 + 292] = this.address
                                        mem[_17232 + 324 len floor32((32 * mem[_17232]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17232], address(this.address), mem[_17232 + 324 len floor32((32 * mem[_17232]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17232 + 260 len (32 * mem[_17232]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17091 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17091] = 26
                                mem[_17091 + 32] = 'SafeMath: division by zero' << 48
                                _17807 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17807] = 30
                                mem[_17807 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18824 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18824]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18824]
                                    mem[_18824 + 260] = mem[_18824]
                                    if Mask(251, 0, mem[_18824]):
                                        mem[_18824 + 292] = this.address
                                        mem[_18824 + 324 len floor32((32 * mem[_18824]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18824], address(this.address), mem[_18824 + 324 len floor32((32 * mem[_18824]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18824 + 260 len (32 * mem[_18824]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18824 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18824 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18824 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19378 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19378]
                                    mem[_19378 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19378]
                                    mem[_19378 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19378]
                                    mem[_19378 + 96] = stableCoinAddress
                                    mem[_19378 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19378 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19378 + 164] = 0
                                    mem[_19378 + 228] = this.address
                                    mem[_19378 + 260] = block.timestamp
                                    mem[_19378 + 196] = 160
                                    mem[_19378 + 292] = mem[_19378]
                                    mem[_19378 + 324 len floor32(mem[_19378])] = mem[_19378 + 32 len floor32(mem[_19378])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19378 + 292 len (32 * mem[_19378]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19378 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19378 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19378 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15718 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15718] = 26
                            mem[_15718 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16247 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16247] = 30
                            mem[_16247 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16632 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16632] = 30
                            mem[_16632 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17358 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17358]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17358]
                                        mem[_17358 + 260] = mem[_17358]
                                        if Mask(251, 0, mem[_17358]):
                                            mem[_17358 + 292] = this.address
                                            mem[_17358 + 324 len floor32((32 * mem[_17358]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17358], address(this.address), mem[_17358 + 324 len floor32((32 * mem[_17358]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17358 + 260 len (32 * mem[_17358]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17229 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17229]
                                    mem[_17229 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17229]
                                    mem[_17229 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17229]
                                    mem[_17229 + 96] = stableCoinAddress
                                    mem[_17229 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17229 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17229 + 164] = 0
                                    mem[_17229 + 228] = sub_7d4b5017Address
                                    mem[_17229 + 260] = block.timestamp
                                    mem[_17229 + 196] = 160
                                    mem[_17229 + 292] = mem[_17229]
                                    mem[_17229 + 324 len floor32(mem[_17229])] = mem[_17229 + 32 len floor32(mem[_17229])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17229 + 292 len (32 * mem[_17229]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17231 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17231] = 26
                                mem[_17231 + 32] = 'SafeMath: division by zero' << 48
                                _17990 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17990] = 30
                                mem[_17990 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19034 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19034]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19034]
                                    mem[_19034 + 260] = mem[_19034]
                                    if Mask(251, 0, mem[_19034]):
                                        mem[_19034 + 292] = this.address
                                        mem[_19034 + 324 len floor32((32 * mem[_19034]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19034], address(this.address), mem[_19034 + 324 len floor32((32 * mem[_19034]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19034 + 260 len (32 * mem[_19034]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19034 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19034 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19034 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19544 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19544]
                                    mem[_19544 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19544]
                                    mem[_19544 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19544]
                                    mem[_19544 + 96] = stableCoinAddress
                                    mem[_19544 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19544 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19544 + 164] = 0
                                    mem[_19544 + 228] = this.address
                                    mem[_19544 + 260] = block.timestamp
                                    mem[_19544 + 196] = 160
                                    mem[_19544 + 292] = mem[_19544]
                                    mem[_19544 + 324 len floor32(mem[_19544])] = mem[_19544 + 32 len floor32(mem[_19544])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19544 + 292 len (32 * mem[_19544]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19544 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19544 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19544 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
                else:
                    if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != 2 * liquidityFee:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _15406 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15406] = 26
                    mem[_15406 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15679 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15679] = 26
                            mem[_15679 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16142 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16142] = 30
                            mem[_16142 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16537 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16537] = 30
                            mem[_16537 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        _17223 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17223]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17223]
                                        mem[_17223 + 260] = mem[_17223]
                                        if Mask(251, 0, mem[_17223]):
                                            mem[_17223 + 292] = this.address
                                            mem[_17223 + 324 len floor32((32 * mem[_17223]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17223], address(this.address), mem[_17223 + 324 len floor32((32 * mem[_17223]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17223 + 260 len (32 * mem[_17223]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17085 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17085]
                                    mem[_17085 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17085]
                                    mem[_17085 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17085]
                                    mem[_17085 + 96] = stableCoinAddress
                                    mem[_17085 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17085 + 132] = 0 / totalSellFee + totalBuyFee
                                    mem[_17085 + 164] = 0
                                    mem[_17085 + 228] = sub_7d4b5017Address
                                    mem[_17085 + 260] = block.timestamp
                                    mem[_17085 + 196] = 160
                                    mem[_17085 + 292] = mem[_17085]
                                    mem[_17085 + 324 len floor32(mem[_17085])] = mem[_17085 + 32 len floor32(mem[_17085])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17085 + 292 len (32 * mem[_17085]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17087 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17087] = 26
                                mem[_17087 + 32] = 'SafeMath: division by zero' << 48
                                _17800 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17800] = 30
                                mem[_17800 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18815 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18815]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18815]
                                    mem[_18815 + 260] = mem[_18815]
                                    if Mask(251, 0, mem[_18815]):
                                        mem[_18815 + 292] = this.address
                                        mem[_18815 + 324 len floor32((32 * mem[_18815]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18815], address(this.address), mem[_18815 + 324 len floor32((32 * mem[_18815]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18815 + 260 len (32 * mem[_18815]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18815 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18815 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18815 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19372 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19372]
                                    mem[_19372 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19372]
                                    mem[_19372 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19372]
                                    mem[_19372 + 96] = stableCoinAddress
                                    mem[_19372 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19372 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19372 + 164] = 0
                                    mem[_19372 + 228] = this.address
                                    mem[_19372 + 260] = block.timestamp
                                    mem[_19372 + 196] = 160
                                    mem[_19372 + 292] = mem[_19372]
                                    mem[_19372 + 324 len floor32(mem[_19372])] = mem[_19372 + 32 len floor32(mem[_19372])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19372 + 292 len (32 * mem[_19372]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19372 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19372 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19372 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15717 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15717] = 26
                            mem[_15717 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16243 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16243] = 30
                            mem[_16243 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16628 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16628] = 30
                            mem[_16628 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17352 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17352]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17352]
                                        mem[_17352 + 260] = mem[_17352]
                                        if Mask(251, 0, mem[_17352]):
                                            mem[_17352 + 292] = this.address
                                            mem[_17352 + 324 len floor32((32 * mem[_17352]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17352], address(this.address), mem[_17352 + 324 len floor32((32 * mem[_17352]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17352 + 260 len (32 * mem[_17352]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17220 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17220]
                                    mem[_17220 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17220]
                                    mem[_17220 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17220]
                                    mem[_17220 + 96] = stableCoinAddress
                                    mem[_17220 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17220 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17220 + 164] = 0
                                    mem[_17220 + 228] = sub_7d4b5017Address
                                    mem[_17220 + 260] = block.timestamp
                                    mem[_17220 + 196] = 160
                                    mem[_17220 + 292] = mem[_17220]
                                    mem[_17220 + 324 len floor32(mem[_17220])] = mem[_17220 + 32 len floor32(mem[_17220])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17220 + 292 len (32 * mem[_17220]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17222 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17222] = 26
                                mem[_17222 + 32] = 'SafeMath: division by zero' << 48
                                _17981 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17981] = 30
                                mem[_17981 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19022 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19022]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19022]
                                    mem[_19022 + 260] = mem[_19022]
                                    if Mask(251, 0, mem[_19022]):
                                        mem[_19022 + 292] = this.address
                                        mem[_19022 + 324 len floor32((32 * mem[_19022]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19022], address(this.address), mem[_19022 + 324 len floor32((32 * mem[_19022]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19022 + 260 len (32 * mem[_19022]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19022 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19022 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19022 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19536 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19536]
                                    mem[_19536 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19536]
                                    mem[_19536 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19536]
                                    mem[_19536 + 96] = stableCoinAddress
                                    mem[_19536 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19536 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19536 + 164] = 0
                                    mem[_19536 + 228] = this.address
                                    mem[_19536 + 260] = block.timestamp
                                    mem[_19536 + 196] = 160
                                    mem[_19536 + 292] = mem[_19536]
                                    mem[_19536 + 324 len floor32(mem[_19536])] = mem[_19536 + 32 len floor32(mem[_19536])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19536 + 292 len (32 * mem[_19536]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19536 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19536 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19536 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15716 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15716] = 26
                            mem[_15716 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16240 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16240] = 30
                            mem[_16240 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16625 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16625] = 30
                            mem[_16625 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        _17348 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17348]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17348]
                                        mem[_17348 + 260] = mem[_17348]
                                        if Mask(251, 0, mem[_17348]):
                                            mem[_17348 + 292] = this.address
                                            mem[_17348 + 324 len floor32((32 * mem[_17348]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17348], address(this.address), mem[_17348 + 324 len floor32((32 * mem[_17348]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17348 + 260 len (32 * mem[_17348]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17215 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17215]
                                    mem[_17215 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17215]
                                    mem[_17215 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17215]
                                    mem[_17215 + 96] = stableCoinAddress
                                    mem[_17215 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17215 + 132] = 0 / totalSellFee + totalBuyFee
                                    mem[_17215 + 164] = 0
                                    mem[_17215 + 228] = sub_7d4b5017Address
                                    mem[_17215 + 260] = block.timestamp
                                    mem[_17215 + 196] = 160
                                    mem[_17215 + 292] = mem[_17215]
                                    mem[_17215 + 324 len floor32(mem[_17215])] = mem[_17215 + 32 len floor32(mem[_17215])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17215 + 292 len (32 * mem[_17215]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17217 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17217] = 26
                                mem[_17217 + 32] = 'SafeMath: division by zero' << 48
                                _17974 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17974] = 30
                                mem[_17974 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19015 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19015]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19015]
                                    mem[_19015 + 260] = mem[_19015]
                                    if Mask(251, 0, mem[_19015]):
                                        mem[_19015 + 292] = this.address
                                        mem[_19015 + 324 len floor32((32 * mem[_19015]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19015], address(this.address), mem[_19015 + 324 len floor32((32 * mem[_19015]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19015 + 260 len (32 * mem[_19015]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19015 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19015 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19015 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19533 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19533]
                                    mem[_19533 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19533]
                                    mem[_19533 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19533]
                                    mem[_19533 + 96] = stableCoinAddress
                                    mem[_19533 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19533 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19533 + 164] = 0
                                    mem[_19533 + 228] = this.address
                                    mem[_19533 + 260] = block.timestamp
                                    mem[_19533 + 196] = 160
                                    mem[_19533 + 292] = mem[_19533]
                                    mem[_19533 + 324 len floor32(mem[_19533])] = mem[_19533 + 32 len floor32(mem[_19533])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19533 + 292 len (32 * mem[_19533]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19533 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19533 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19533 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15775 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15775] = 26
                            mem[_15775 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16328 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16328] = 30
                            mem[_16328 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16712 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16712] = 30
                            mem[_16712 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17436 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17436]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17436]
                                        mem[_17436 + 260] = mem[_17436]
                                        if Mask(251, 0, mem[_17436]):
                                            mem[_17436 + 292] = this.address
                                            mem[_17436 + 324 len floor32((32 * mem[_17436]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17436], address(this.address), mem[_17436 + 324 len floor32((32 * mem[_17436]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17436 + 260 len (32 * mem[_17436]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17345 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17345]
                                    mem[_17345 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17345]
                                    mem[_17345 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17345]
                                    mem[_17345 + 96] = stableCoinAddress
                                    mem[_17345 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17345 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17345 + 164] = 0
                                    mem[_17345 + 228] = sub_7d4b5017Address
                                    mem[_17345 + 260] = block.timestamp
                                    mem[_17345 + 196] = 160
                                    mem[_17345 + 292] = mem[_17345]
                                    mem[_17345 + 324 len floor32(mem[_17345])] = mem[_17345 + 32 len floor32(mem[_17345])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17345 + 292 len (32 * mem[_17345]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17347 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17347] = 26
                                mem[_17347 + 32] = 'SafeMath: division by zero' << 48
                                _18139 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18139] = 30
                                mem[_18139 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19198 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19198]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19198]
                                    mem[_19198 + 260] = mem[_19198]
                                    if Mask(251, 0, mem[_19198]):
                                        mem[_19198 + 292] = this.address
                                        mem[_19198 + 324 len floor32((32 * mem[_19198]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19198], address(this.address), mem[_19198 + 324 len floor32((32 * mem[_19198]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19198 + 260 len (32 * mem[_19198]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19198 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19198 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19198 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19713 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19713]
                                    mem[_19713 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19713]
                                    mem[_19713 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19713]
                                    mem[_19713 + 96] = stableCoinAddress
                                    mem[_19713 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19713 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19713 + 164] = 0
                                    mem[_19713 + 228] = this.address
                                    mem[_19713 + 260] = block.timestamp
                                    mem[_19713 + 196] = 160
                                    mem[_19713 + 292] = mem[_19713]
                                    mem[_19713 + 324 len floor32(mem[_19713])] = mem[_19713 + 32 len floor32(mem[_19713])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19713 + 292 len (32 * mem[_19713]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19713 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19713 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19713 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
    else:
        if 0 / stor47:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _15302 = mem[64]
        mem[64] = mem[64] + 64
        mem[_15302] = 26
        mem[_15302 + 32] = 'SafeMath: division by zero' << 48
        if not -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9:
            revert with 0, 'SafeMath: division by zero'
        mem[0] = this.address
        mem[32] = 52
        if 0 / -storC4E3 + -stor2DC2 - 39457584007913129639936 / stor50 / 10^9 > stor46:
            _15331 = mem[64]
            mem[64] = mem[64] + 64
            mem[_15331] = 26
            mem[_15331 + 32] = 'SafeMath: division by zero' << 48
            if not stor50:
                revert with 0, 'SafeMath: division by zero'
            if not sub_4527881e[this.address] / stor50:
                _15393 = mem[64]
                mem[64] = mem[64] + 64
                mem[_15393] = 26
                mem[_15393 + 32] = 'SafeMath: division by zero' << 48
                if not totalSellFee + totalBuyFee:
                    revert with 0, 'SafeMath: division by zero'
                if not sub_9763eec4:
                    if sub_7ac82927 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15633 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15633] = 26
                        mem[_15633 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _15982 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15982] = 30
                        mem[_15982 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16426 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16426] = 30
                        mem[_16426 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17022 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17022]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17022]
                                mem[_17022 + 260] = mem[_17022]
                                if Mask(251, 0, mem[_17022]):
                                    mem[_17022 + 292] = this.address
                                    mem[_17022 + 324 len floor32((32 * mem[_17022]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17022], address(this.address), mem[_17022 + 324 len floor32((32 * mem[_17022]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17022 + 260 len (32 * mem[_17022]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _16933 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16933] = 26
                            mem[_16933 + 32] = 'SafeMath: division by zero' << 48
                            _17565 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17565] = 30
                            mem[_17565 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18514 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18514]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18514]
                                mem[_18514 + 260] = mem[_18514]
                                if Mask(251, 0, mem[_18514]):
                                    mem[_18514 + 292] = this.address
                                    mem[_18514 + 324 len floor32((32 * mem[_18514]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18514], address(this.address), mem[_18514 + 324 len floor32((32 * mem[_18514]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18514 + 260 len (32 * mem[_18514]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18514 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18514 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18514 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19099 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19099]
                                mem[_19099 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19099]
                                mem[_19099 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19099]
                                mem[_19099 + 96] = stableCoinAddress
                                mem[_19099 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19099 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19099 + 164] = 0
                                mem[_19099 + 228] = this.address
                                mem[_19099 + 260] = block.timestamp
                                mem[_19099 + 196] = 160
                                mem[_19099 + 292] = mem[_19099]
                                mem[_19099 + 324 len floor32(mem[_19099])] = mem[_19099 + 32 len floor32(mem[_19099])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19099 + 292 len (32 * mem[_19099]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19099 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19099 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19099 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15660 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15660] = 26
                        mem[_15660 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16081 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16081] = 30
                        mem[_16081 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16493 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16493] = 30
                        mem[_16493 + 32] = 'SafeMath: subtraction overflow'
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    _17141 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17141]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17141]
                                    mem[_17141 + 260] = mem[_17141]
                                    if Mask(251, 0, mem[_17141]):
                                        mem[_17141 + 292] = this.address
                                        mem[_17141 + 324 len floor32((32 * mem[_17141]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17141], address(this.address), mem[_17141 + 324 len floor32((32 * mem[_17141]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17141 + 260 len (32 * mem[_17141]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17019 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17019]
                                mem[_17019 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17019]
                                mem[_17019 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17019]
                                mem[_17019 + 96] = stableCoinAddress
                                mem[_17019 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17019 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                mem[_17019 + 164] = 0
                                mem[_17019 + 228] = sub_7d4b5017Address
                                mem[_17019 + 260] = block.timestamp
                                mem[_17019 + 196] = 160
                                mem[_17019 + 292] = mem[_17019]
                                mem[_17019 + 324 len floor32(mem[_17019])] = mem[_17019 + 32 len floor32(mem[_17019])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17019 + 292 len (32 * mem[_17019]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17021 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17021] = 26
                            mem[_17021 + 32] = 'SafeMath: division by zero' << 48
                            _17702 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17702] = 30
                            mem[_17702 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18696 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18696]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18696]
                                mem[_18696 + 260] = mem[_18696]
                                if Mask(251, 0, mem[_18696]):
                                    mem[_18696 + 292] = this.address
                                    mem[_18696 + 324 len floor32((32 * mem[_18696]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18696], address(this.address), mem[_18696 + 324 len floor32((32 * mem[_18696]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18696 + 260 len (32 * mem[_18696]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18696 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18696 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18696 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19269 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19269]
                                mem[_19269 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19269]
                                mem[_19269 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19269]
                                mem[_19269 + 96] = stableCoinAddress
                                mem[_19269 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19269 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19269 + 164] = 0
                                mem[_19269 + 228] = this.address
                                mem[_19269 + 260] = block.timestamp
                                mem[_19269 + 196] = 160
                                mem[_19269 + 292] = mem[_19269]
                                mem[_19269 + 324 len floor32(mem[_19269])] = mem[_19269 + 32 len floor32(mem[_19269])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19269 + 292 len (32 * mem[_19269]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19269 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19269 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19269 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                else:
                    if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15659 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15659] = 26
                        mem[_15659 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16078 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16078] = 30
                        mem[_16078 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16490 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16490] = 30
                        mem[_16490 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17139 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17139]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17139]
                                mem[_17139 + 260] = mem[_17139]
                                if Mask(251, 0, mem[_17139]):
                                    mem[_17139 + 292] = this.address
                                    mem[_17139 + 324 len floor32((32 * mem[_17139]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17139], address(this.address), mem[_17139 + 324 len floor32((32 * mem[_17139]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17139 + 260 len (32 * mem[_17139]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17016 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17016] = 26
                            mem[_17016 + 32] = 'SafeMath: division by zero' << 48
                            _17695 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17695] = 30
                            mem[_17695 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18689 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18689]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18689]
                                mem[_18689 + 260] = mem[_18689]
                                if Mask(251, 0, mem[_18689]):
                                    mem[_18689 + 292] = this.address
                                    mem[_18689 + 324 len floor32((32 * mem[_18689]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18689], address(this.address), mem[_18689 + 324 len floor32((32 * mem[_18689]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18689 + 260 len (32 * mem[_18689]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18689 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18689 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18689 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19266 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19266]
                                mem[_19266 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19266]
                                mem[_19266 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19266]
                                mem[_19266 + 96] = stableCoinAddress
                                mem[_19266 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19266 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19266 + 164] = 0
                                mem[_19266 + 228] = this.address
                                mem[_19266 + 260] = block.timestamp
                                mem[_19266 + 196] = 160
                                mem[_19266 + 292] = mem[_19266]
                                mem[_19266 + 324 len floor32(mem[_19266])] = mem[_19266 + 32 len floor32(mem[_19266])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19266 + 292 len (32 * mem[_19266]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19266 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19266 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19266 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15690 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15690] = 26
                        mem[_15690 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16180 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16180] = 30
                        mem[_16180 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16572 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16572] = 30
                        mem[_16572 + 32] = 'SafeMath: subtraction overflow'
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    _17274 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17274]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17274]
                                    mem[_17274 + 260] = mem[_17274]
                                    if Mask(251, 0, mem[_17274]):
                                        mem[_17274 + 292] = this.address
                                        mem[_17274 + 324 len floor32((32 * mem[_17274]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17274], address(this.address), mem[_17274 + 324 len floor32((32 * mem[_17274]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17274 + 260 len (32 * mem[_17274]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17136 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17136]
                                mem[_17136 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17136]
                                mem[_17136 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17136]
                                mem[_17136 + 96] = stableCoinAddress
                                mem[_17136 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17136 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                mem[_17136 + 164] = 0
                                mem[_17136 + 228] = sub_7d4b5017Address
                                mem[_17136 + 260] = block.timestamp
                                mem[_17136 + 196] = 160
                                mem[_17136 + 292] = mem[_17136]
                                mem[_17136 + 324 len floor32(mem[_17136])] = mem[_17136 + 32 len floor32(mem[_17136])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17136 + 292 len (32 * mem[_17136]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17138 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17138] = 26
                            mem[_17138 + 32] = 'SafeMath: division by zero' << 48
                            _17869 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17869] = 30
                            mem[_17869 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18895 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18895]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18895]
                                mem[_18895 + 260] = mem[_18895]
                                if Mask(251, 0, mem[_18895]):
                                    mem[_18895 + 292] = this.address
                                    mem[_18895 + 324 len floor32((32 * mem[_18895]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18895], address(this.address), mem[_18895 + 324 len floor32((32 * mem[_18895]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18895 + 260 len (32 * mem[_18895]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18895 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18895 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18895 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19429 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19429]
                                mem[_19429 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19429]
                                mem[_19429 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19429]
                                mem[_19429 + 96] = stableCoinAddress
                                mem[_19429 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19429 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19429 + 164] = 0
                                mem[_19429 + 228] = this.address
                                mem[_19429 + 260] = block.timestamp
                                mem[_19429 + 196] = 160
                                mem[_19429 + 292] = mem[_19429]
                                mem[_19429 + 324 len floor32(mem[_19429])] = mem[_19429 + 32 len floor32(mem[_19429])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19429 + 292 len (32 * mem[_19429]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19429 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19429 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19429 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
            else:
                if 0 / sub_4527881e[this.address] / stor50:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _15400 = mem[64]
                mem[64] = mem[64] + 64
                mem[_15400] = 26
                mem[_15400 + 32] = 'SafeMath: division by zero' << 48
                if not totalSellFee + totalBuyFee:
                    revert with 0, 'SafeMath: division by zero'
                if not sub_9763eec4:
                    if sub_7ac82927 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15658 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15658] = 26
                        mem[_15658 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16073 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16073] = 30
                        mem[_16073 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16486 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16486] = 30
                        mem[_16486 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17132 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17132]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17132]
                                mem[_17132 + 260] = mem[_17132]
                                if Mask(251, 0, mem[_17132]):
                                    mem[_17132 + 292] = this.address
                                    mem[_17132 + 324 len floor32((32 * mem[_17132]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17132], address(this.address), mem[_17132 + 324 len floor32((32 * mem[_17132]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17132 + 260 len (32 * mem[_17132]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17012 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17012] = 26
                            mem[_17012 + 32] = 'SafeMath: division by zero' << 48
                            _17688 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17688] = 30
                            mem[_17688 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18680 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18680]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18680]
                                mem[_18680 + 260] = mem[_18680]
                                if Mask(251, 0, mem[_18680]):
                                    mem[_18680 + 292] = this.address
                                    mem[_18680 + 324 len floor32((32 * mem[_18680]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18680], address(this.address), mem[_18680 + 324 len floor32((32 * mem[_18680]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18680 + 260 len (32 * mem[_18680]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18680 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18680 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18680 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19260 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19260]
                                mem[_19260 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19260]
                                mem[_19260 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19260]
                                mem[_19260 + 96] = stableCoinAddress
                                mem[_19260 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19260 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19260 + 164] = 0
                                mem[_19260 + 228] = this.address
                                mem[_19260 + 260] = block.timestamp
                                mem[_19260 + 196] = 160
                                mem[_19260 + 292] = mem[_19260]
                                mem[_19260 + 324 len floor32(mem[_19260])] = mem[_19260 + 32 len floor32(mem[_19260])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19260 + 292 len (32 * mem[_19260]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19260 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19260 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19260 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15689 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15689] = 26
                        mem[_15689 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16176 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16176] = 30
                        mem[_16176 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16568 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16568] = 30
                        mem[_16568 + 32] = 'SafeMath: subtraction overflow'
                        if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    _17268 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17268]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17268]
                                    mem[_17268 + 260] = mem[_17268]
                                    if Mask(251, 0, mem[_17268]):
                                        mem[_17268 + 292] = this.address
                                        mem[_17268 + 324 len floor32((32 * mem[_17268]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17268], address(this.address), mem[_17268 + 324 len floor32((32 * mem[_17268]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17268 + 260 len (32 * mem[_17268]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17129 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17129]
                                mem[_17129 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17129]
                                mem[_17129 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17129]
                                mem[_17129 + 96] = stableCoinAddress
                                mem[_17129 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17129 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                mem[_17129 + 164] = 0
                                mem[_17129 + 228] = sub_7d4b5017Address
                                mem[_17129 + 260] = block.timestamp
                                mem[_17129 + 196] = 160
                                mem[_17129 + 292] = mem[_17129]
                                mem[_17129 + 324 len floor32(mem[_17129])] = mem[_17129 + 32 len floor32(mem[_17129])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17129 + 292 len (32 * mem[_17129]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17131 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17131] = 26
                            mem[_17131 + 32] = 'SafeMath: division by zero' << 48
                            _17860 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17860] = 30
                            mem[_17860 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18885 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18885]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18885]
                                mem[_18885 + 260] = mem[_18885]
                                if Mask(251, 0, mem[_18885]):
                                    mem[_18885 + 292] = this.address
                                    mem[_18885 + 324 len floor32((32 * mem[_18885]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18885], address(this.address), mem[_18885 + 324 len floor32((32 * mem[_18885]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18885 + 260 len (32 * mem[_18885]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18885 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18885 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18885 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19422 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19422]
                                mem[_19422 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19422]
                                mem[_19422 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19422]
                                mem[_19422 + 96] = stableCoinAddress
                                mem[_19422 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19422 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19422 + 164] = 0
                                mem[_19422 + 228] = this.address
                                mem[_19422 + 260] = block.timestamp
                                mem[_19422 + 196] = 160
                                mem[_19422 + 292] = mem[_19422]
                                mem[_19422 + 324 len floor32(mem[_19422])] = mem[_19422 + 32 len floor32(mem[_19422])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19422 + 292 len (32 * mem[_19422]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19422 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19422 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19422 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                else:
                    if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                        revert with 0, 'SafeMath: addition overflow'
                    if not sub_4527881e[this.address] / stor50:
                        _15688 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15688] = 26
                        mem[_15688 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16173 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16173] = 30
                        mem[_16173 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16565 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16565] = 30
                        mem[_16565 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                _17266 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_17266]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17266]
                                mem[_17266 + 260] = mem[_17266]
                                if Mask(251, 0, mem[_17266]):
                                    mem[_17266 + 292] = this.address
                                    mem[_17266 + 324 len floor32((32 * mem[_17266]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17266], address(this.address), mem[_17266 + 324 len floor32((32 * mem[_17266]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17266 + 260 len (32 * mem[_17266]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17126 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17126] = 26
                            mem[_17126 + 32] = 'SafeMath: division by zero' << 48
                            _17853 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17853] = 30
                            mem[_17853 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _18878 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_18878]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_18878]
                                mem[_18878 + 260] = mem[_18878]
                                if Mask(251, 0, mem[_18878]):
                                    mem[_18878 + 292] = this.address
                                    mem[_18878 + 324 len floor32((32 * mem[_18878]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18878], address(this.address), mem[_18878 + 324 len floor32((32 * mem[_18878]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18878 + 260 len (32 * mem[_18878]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_18878 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18878 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18878 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19419 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19419]
                                mem[_19419 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19419]
                                mem[_19419 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19419]
                                mem[_19419 + 96] = stableCoinAddress
                                mem[_19419 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19419 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19419 + 164] = 0
                                mem[_19419 + 228] = this.address
                                mem[_19419 + 260] = block.timestamp
                                mem[_19419 + 196] = 160
                                mem[_19419 + 292] = mem[_19419]
                                mem[_19419 + 324 len floor32(mem[_19419])] = mem[_19419 + 32 len floor32(mem[_19419])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19419 + 292 len (32 * mem[_19419]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19419 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19419 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19419 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                    else:
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _15733 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_15733] = 26
                        mem[_15733 + 32] = 'SafeMath: division by zero' << 48
                        if not totalSellFee + totalBuyFee:
                            revert with 0, 'SafeMath: division by zero'
                        _16270 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16270] = 30
                        mem[_16270 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                            revert with 0, 'SafeMath: subtraction overflow'
                        _16655 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_16655] = 30
                        mem[_16655 + 32] = 'SafeMath: subtraction overflow'
                        if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not 0 / totalSellFee + totalBuyFee:
                            if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    _17378 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17378]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17378]
                                    mem[_17378 + 260] = mem[_17378]
                                    if Mask(251, 0, mem[_17378]):
                                        mem[_17378 + 292] = this.address
                                        mem[_17378 + 324 len floor32((32 * mem[_17378]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17378], address(this.address), mem[_17378 + 324 len floor32((32 * mem[_17378]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17378 + 260 len (32 * mem[_17378]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17263 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_17263]
                                mem[_17263 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_17263]
                                mem[_17263 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_17263]
                                mem[_17263 + 96] = stableCoinAddress
                                mem[_17263 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_17263 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                mem[_17263 + 164] = 0
                                mem[_17263 + 228] = sub_7d4b5017Address
                                mem[_17263 + 260] = block.timestamp
                                mem[_17263 + 196] = 160
                                mem[_17263 + 292] = mem[_17263]
                                mem[_17263 + 324 len floor32(mem[_17263])] = mem[_17263 + 32 len floor32(mem[_17263])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17263 + 292 len (32 * mem[_17263]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                        else:
                            _17265 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17265] = 26
                            mem[_17265 + 32] = 'SafeMath: division by zero' << 48
                            _18030 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_18030] = 30
                            mem[_18030 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if uint8(stor3.field_192):
                                _19078 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                require 0 < mem[_19078]
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19078]
                                mem[_19078 + 260] = mem[_19078]
                                if Mask(251, 0, mem[_19078]):
                                    mem[_19078 + 292] = this.address
                                    mem[_19078 + 324 len floor32((32 * mem[_19078]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19078], address(this.address), mem[_19078 + 324 len floor32((32 * mem[_19078]) - 1) - 260]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19078 + 260 len (32 * mem[_19078]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19078 + 484 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19078 + 484 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19078 + 484 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                _19590 = mem[64]
                                mem[mem[64]] = 3
                                mem[64] = mem[64] + 128
                                require 0 < mem[_19590]
                                mem[_19590 + 32] = this.address
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.WAVAX() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require 1 < mem[_19590]
                                mem[_19590 + 64] = ext_call.return_data[12 len 20]
                                require 2 < mem[_19590]
                                mem[_19590 + 96] = stableCoinAddress
                                mem[_19590 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                mem[_19590 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                mem[_19590 + 164] = 0
                                mem[_19590 + 228] = this.address
                                mem[_19590 + 260] = block.timestamp
                                mem[_19590 + 196] = 160
                                mem[_19590 + 292] = mem[_19590]
                                mem[_19590 + 324 len floor32(mem[_19590])] = mem[_19590 + 32 len floor32(mem[_19590])]
                                require ext_code.size(routerAddress)
                                call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19590 + 292 len (32 * mem[_19590]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stableCoinAddress)
                                staticcall stableCoinAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(routerAddress)
                                call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                     gas gas_remaining wei
                                    args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[_19590 + 516 len 0] = None
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19590 + 516 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19590 + 516 len -100]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                        emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
        else:
            _15332 = mem[64]
            mem[64] = mem[64] + 64
            mem[_15332] = 26
            mem[_15332 + 32] = 'SafeMath: division by zero' << 48
            if not stor50:
                revert with 0, 'SafeMath: division by zero'
            if not liquidityFee:
                if not sub_4527881e[this.address] / stor50:
                    _15396 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15396] = 26
                    mem[_15396 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15640 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15640] = 26
                            mem[_15640 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16012 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16012] = 30
                            mem[_16012 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16446 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16446] = 30
                            mem[_16446 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17053 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17053]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17053]
                                    mem[_17053 + 260] = mem[_17053]
                                    if Mask(251, 0, mem[_17053]):
                                        mem[_17053 + 292] = this.address
                                        mem[_17053 + 324 len floor32((32 * mem[_17053]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17053], address(this.address), mem[_17053 + 324 len floor32((32 * mem[_17053]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17053 + 260 len (32 * mem[_17053]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _16956 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16956] = 26
                                mem[_16956 + 32] = 'SafeMath: division by zero' << 48
                                _17598 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17598] = 30
                                mem[_17598 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18566 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18566]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18566]
                                    mem[_18566 + 260] = mem[_18566]
                                    if Mask(251, 0, mem[_18566]):
                                        mem[_18566 + 292] = this.address
                                        mem[_18566 + 324 len floor32((32 * mem[_18566]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18566], address(this.address), mem[_18566 + 324 len floor32((32 * mem[_18566]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18566 + 260 len (32 * mem[_18566]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18566 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18566 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18566 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19166 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19166]
                                    mem[_19166 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19166]
                                    mem[_19166 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19166]
                                    mem[_19166 + 96] = stableCoinAddress
                                    mem[_19166 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19166 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19166 + 164] = 0
                                    mem[_19166 + 228] = this.address
                                    mem[_19166 + 260] = block.timestamp
                                    mem[_19166 + 196] = 160
                                    mem[_19166 + 292] = mem[_19166]
                                    mem[_19166 + 324 len floor32(mem[_19166])] = mem[_19166 + 32 len floor32(mem[_19166])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19166 + 292 len (32 * mem[_19166]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19166 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19166 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19166 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15670 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15670] = 26
                            mem[_15670 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16115 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16115] = 30
                            mem[_16115 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16515 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16515] = 30
                            mem[_16515 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17185 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17185]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17185]
                                        mem[_17185 + 260] = mem[_17185]
                                        if Mask(251, 0, mem[_17185]):
                                            mem[_17185 + 292] = this.address
                                            mem[_17185 + 324 len floor32((32 * mem[_17185]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17185], address(this.address), mem[_17185 + 324 len floor32((32 * mem[_17185]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17185 + 260 len (32 * mem[_17185]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17050 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17050]
                                    mem[_17050 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17050]
                                    mem[_17050 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17050]
                                    mem[_17050 + 96] = stableCoinAddress
                                    mem[_17050 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17050 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17050 + 164] = 0
                                    mem[_17050 + 228] = sub_7d4b5017Address
                                    mem[_17050 + 260] = block.timestamp
                                    mem[_17050 + 196] = 160
                                    mem[_17050 + 292] = mem[_17050]
                                    mem[_17050 + 324 len floor32(mem[_17050])] = mem[_17050 + 32 len floor32(mem[_17050])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17050 + 292 len (32 * mem[_17050]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17052 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17052] = 26
                                mem[_17052 + 32] = 'SafeMath: division by zero' << 48
                                _17752 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17752] = 30
                                mem[_17752 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18759 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18759]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18759]
                                    mem[_18759 + 260] = mem[_18759]
                                    if Mask(251, 0, mem[_18759]):
                                        mem[_18759 + 292] = this.address
                                        mem[_18759 + 324 len floor32((32 * mem[_18759]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18759], address(this.address), mem[_18759 + 324 len floor32((32 * mem[_18759]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18759 + 260 len (32 * mem[_18759]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18759 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18759 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18759 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19326 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19326]
                                    mem[_19326 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19326]
                                    mem[_19326 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19326]
                                    mem[_19326 + 96] = stableCoinAddress
                                    mem[_19326 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19326 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19326 + 164] = 0
                                    mem[_19326 + 228] = this.address
                                    mem[_19326 + 260] = block.timestamp
                                    mem[_19326 + 196] = 160
                                    mem[_19326 + 292] = mem[_19326]
                                    mem[_19326 + 324 len floor32(mem[_19326])] = mem[_19326 + 32 len floor32(mem[_19326])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19326 + 292 len (32 * mem[_19326]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19326 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19326 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19326 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15669 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15669] = 26
                            mem[_15669 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16112 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16112] = 30
                            mem[_16112 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16512 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16512] = 30
                            mem[_16512 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17183 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17183]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17183]
                                    mem[_17183 + 260] = mem[_17183]
                                    if Mask(251, 0, mem[_17183]):
                                        mem[_17183 + 292] = this.address
                                        mem[_17183 + 324 len floor32((32 * mem[_17183]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17183], address(this.address), mem[_17183 + 324 len floor32((32 * mem[_17183]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17183 + 260 len (32 * mem[_17183]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17047 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17047] = 26
                                mem[_17047 + 32] = 'SafeMath: division by zero' << 48
                                _17745 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17745] = 30
                                mem[_17745 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18752 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18752]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18752]
                                    mem[_18752 + 260] = mem[_18752]
                                    if Mask(251, 0, mem[_18752]):
                                        mem[_18752 + 292] = this.address
                                        mem[_18752 + 324 len floor32((32 * mem[_18752]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18752], address(this.address), mem[_18752 + 324 len floor32((32 * mem[_18752]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18752 + 260 len (32 * mem[_18752]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18752 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18752 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18752 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19323 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19323]
                                    mem[_19323 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19323]
                                    mem[_19323 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19323]
                                    mem[_19323 + 96] = stableCoinAddress
                                    mem[_19323 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19323 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19323 + 164] = 0
                                    mem[_19323 + 228] = this.address
                                    mem[_19323 + 260] = block.timestamp
                                    mem[_19323 + 196] = 160
                                    mem[_19323 + 292] = mem[_19323]
                                    mem[_19323 + 324 len floor32(mem[_19323])] = mem[_19323 + 32 len floor32(mem[_19323])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19323 + 292 len (32 * mem[_19323]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19323 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19323 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19323 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15701 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15701] = 26
                            mem[_15701 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16215 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16215] = 30
                            mem[_16215 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16601 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16601] = 30
                            mem[_16601 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17323 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17323]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17323]
                                        mem[_17323 + 260] = mem[_17323]
                                        if Mask(251, 0, mem[_17323]):
                                            mem[_17323 + 292] = this.address
                                            mem[_17323 + 324 len floor32((32 * mem[_17323]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17323], address(this.address), mem[_17323 + 324 len floor32((32 * mem[_17323]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17323 + 260 len (32 * mem[_17323]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17180 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17180]
                                    mem[_17180 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17180]
                                    mem[_17180 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17180]
                                    mem[_17180 + 96] = stableCoinAddress
                                    mem[_17180 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17180 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17180 + 164] = 0
                                    mem[_17180 + 228] = sub_7d4b5017Address
                                    mem[_17180 + 260] = block.timestamp
                                    mem[_17180 + 196] = 160
                                    mem[_17180 + 292] = mem[_17180]
                                    mem[_17180 + 324 len floor32(mem[_17180])] = mem[_17180 + 32 len floor32(mem[_17180])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17180 + 292 len (32 * mem[_17180]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17182 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17182] = 26
                                mem[_17182 + 32] = 'SafeMath: division by zero' << 48
                                _17931 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17931] = 30
                                mem[_17931 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18967 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18967]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18967]
                                    mem[_18967 + 260] = mem[_18967]
                                    if Mask(251, 0, mem[_18967]):
                                        mem[_18967 + 292] = this.address
                                        mem[_18967 + 324 len floor32((32 * mem[_18967]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18967], address(this.address), mem[_18967 + 324 len floor32((32 * mem[_18967]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18967 + 260 len (32 * mem[_18967]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18967 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18967 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18967 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19484 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19484]
                                    mem[_19484 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19484]
                                    mem[_19484 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19484]
                                    mem[_19484 + 96] = stableCoinAddress
                                    mem[_19484 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19484 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19484 + 164] = 0
                                    mem[_19484 + 228] = this.address
                                    mem[_19484 + 260] = block.timestamp
                                    mem[_19484 + 196] = 160
                                    mem[_19484 + 292] = mem[_19484]
                                    mem[_19484 + 324 len floor32(mem[_19484])] = mem[_19484 + 32 len floor32(mem[_19484])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19484 + 292 len (32 * mem[_19484]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19484 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19484 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19484 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
                else:
                    if 0 / sub_4527881e[this.address] / stor50:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _15402 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15402] = 26
                    mem[_15402 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15668 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15668] = 26
                            mem[_15668 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16107 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16107] = 30
                            mem[_16107 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16508 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16508] = 30
                            mem[_16508 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17176 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17176]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17176]
                                    mem[_17176 + 260] = mem[_17176]
                                    if Mask(251, 0, mem[_17176]):
                                        mem[_17176 + 292] = this.address
                                        mem[_17176 + 324 len floor32((32 * mem[_17176]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17176], address(this.address), mem[_17176 + 324 len floor32((32 * mem[_17176]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17176 + 260 len (32 * mem[_17176]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17043 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17043] = 26
                                mem[_17043 + 32] = 'SafeMath: division by zero' << 48
                                _17738 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17738] = 30
                                mem[_17738 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18743 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18743]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18743]
                                    mem[_18743 + 260] = mem[_18743]
                                    if Mask(251, 0, mem[_18743]):
                                        mem[_18743 + 292] = this.address
                                        mem[_18743 + 324 len floor32((32 * mem[_18743]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18743], address(this.address), mem[_18743 + 324 len floor32((32 * mem[_18743]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18743 + 260 len (32 * mem[_18743]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18743 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18743 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18743 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19317 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19317]
                                    mem[_19317 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19317]
                                    mem[_19317 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19317]
                                    mem[_19317 + 96] = stableCoinAddress
                                    mem[_19317 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19317 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19317 + 164] = 0
                                    mem[_19317 + 228] = this.address
                                    mem[_19317 + 260] = block.timestamp
                                    mem[_19317 + 196] = 160
                                    mem[_19317 + 292] = mem[_19317]
                                    mem[_19317 + 324 len floor32(mem[_19317])] = mem[_19317 + 32 len floor32(mem[_19317])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19317 + 292 len (32 * mem[_19317]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19317 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19317 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19317 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15700 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15700] = 26
                            mem[_15700 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16211 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16211] = 30
                            mem[_16211 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16597 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16597] = 30
                            mem[_16597 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17317 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17317]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17317]
                                        mem[_17317 + 260] = mem[_17317]
                                        if Mask(251, 0, mem[_17317]):
                                            mem[_17317 + 292] = this.address
                                            mem[_17317 + 324 len floor32((32 * mem[_17317]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17317], address(this.address), mem[_17317 + 324 len floor32((32 * mem[_17317]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17317 + 260 len (32 * mem[_17317]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17173 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17173]
                                    mem[_17173 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17173]
                                    mem[_17173 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17173]
                                    mem[_17173 + 96] = stableCoinAddress
                                    mem[_17173 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17173 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17173 + 164] = 0
                                    mem[_17173 + 228] = sub_7d4b5017Address
                                    mem[_17173 + 260] = block.timestamp
                                    mem[_17173 + 196] = 160
                                    mem[_17173 + 292] = mem[_17173]
                                    mem[_17173 + 324 len floor32(mem[_17173])] = mem[_17173 + 32 len floor32(mem[_17173])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17173 + 292 len (32 * mem[_17173]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17175 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17175] = 26
                                mem[_17175 + 32] = 'SafeMath: division by zero' << 48
                                _17922 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17922] = 30
                                mem[_17922 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18957 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18957]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18957]
                                    mem[_18957 + 260] = mem[_18957]
                                    if Mask(251, 0, mem[_18957]):
                                        mem[_18957 + 292] = this.address
                                        mem[_18957 + 324 len floor32((32 * mem[_18957]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18957], address(this.address), mem[_18957 + 324 len floor32((32 * mem[_18957]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18957 + 260 len (32 * mem[_18957]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18957 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18957 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18957 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19477 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19477]
                                    mem[_19477 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19477]
                                    mem[_19477 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19477]
                                    mem[_19477 + 96] = stableCoinAddress
                                    mem[_19477 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19477 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19477 + 164] = 0
                                    mem[_19477 + 228] = this.address
                                    mem[_19477 + 260] = block.timestamp
                                    mem[_19477 + 196] = 160
                                    mem[_19477 + 292] = mem[_19477]
                                    mem[_19477 + 324 len floor32(mem[_19477])] = mem[_19477 + 32 len floor32(mem[_19477])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19477 + 292 len (32 * mem[_19477]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19477 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19477 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19477 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15699 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15699] = 26
                            mem[_15699 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16208 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16208] = 30
                            mem[_16208 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16594 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16594] = 30
                            mem[_16594 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17315 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17315]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17315]
                                    mem[_17315 + 260] = mem[_17315]
                                    if Mask(251, 0, mem[_17315]):
                                        mem[_17315 + 292] = this.address
                                        mem[_17315 + 324 len floor32((32 * mem[_17315]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17315], address(this.address), mem[_17315 + 324 len floor32((32 * mem[_17315]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17315 + 260 len (32 * mem[_17315]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17170 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17170] = 26
                                mem[_17170 + 32] = 'SafeMath: division by zero' << 48
                                _17915 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17915] = 30
                                mem[_17915 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18950 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18950]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18950]
                                    mem[_18950 + 260] = mem[_18950]
                                    if Mask(251, 0, mem[_18950]):
                                        mem[_18950 + 292] = this.address
                                        mem[_18950 + 324 len floor32((32 * mem[_18950]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18950], address(this.address), mem[_18950 + 324 len floor32((32 * mem[_18950]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18950 + 260 len (32 * mem[_18950]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18950 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18950 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18950 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19474 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19474]
                                    mem[_19474 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19474]
                                    mem[_19474 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19474]
                                    mem[_19474 + 96] = stableCoinAddress
                                    mem[_19474 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19474 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19474 + 164] = 0
                                    mem[_19474 + 228] = this.address
                                    mem[_19474 + 260] = block.timestamp
                                    mem[_19474 + 196] = 160
                                    mem[_19474 + 292] = mem[_19474]
                                    mem[_19474 + 324 len floor32(mem[_19474])] = mem[_19474 + 32 len floor32(mem[_19474])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19474 + 292 len (32 * mem[_19474]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19474 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19474 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19474 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15750 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15750] = 26
                            mem[_15750 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16302 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16302] = 30
                            mem[_16302 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16686 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16686] = 30
                            mem[_16686 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17413 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17413]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17413]
                                        mem[_17413 + 260] = mem[_17413]
                                        if Mask(251, 0, mem[_17413]):
                                            mem[_17413 + 292] = this.address
                                            mem[_17413 + 324 len floor32((32 * mem[_17413]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17413], address(this.address), mem[_17413 + 324 len floor32((32 * mem[_17413]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17413 + 260 len (32 * mem[_17413]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17312 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17312]
                                    mem[_17312 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17312]
                                    mem[_17312 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17312]
                                    mem[_17312 + 96] = stableCoinAddress
                                    mem[_17312 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17312 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17312 + 164] = 0
                                    mem[_17312 + 228] = sub_7d4b5017Address
                                    mem[_17312 + 260] = block.timestamp
                                    mem[_17312 + 196] = 160
                                    mem[_17312 + 292] = mem[_17312]
                                    mem[_17312 + 324 len floor32(mem[_17312])] = mem[_17312 + 32 len floor32(mem[_17312])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17312 + 292 len (32 * mem[_17312]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17314 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17314] = 26
                                mem[_17314 + 32] = 'SafeMath: division by zero' << 48
                                _18089 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18089] = 30
                                mem[_18089 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19145 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19145]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19145]
                                    mem[_19145 + 260] = mem[_19145]
                                    if Mask(251, 0, mem[_19145]):
                                        mem[_19145 + 292] = this.address
                                        mem[_19145 + 324 len floor32((32 * mem[_19145]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19145], address(this.address), mem[_19145 + 324 len floor32((32 * mem[_19145]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19145 + 260 len (32 * mem[_19145]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19145 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19145 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19145 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19650 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19650]
                                    mem[_19650 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19650]
                                    mem[_19650 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19650]
                                    mem[_19650 + 96] = stableCoinAddress
                                    mem[_19650 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19650 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19650 + 164] = 0
                                    mem[_19650 + 228] = this.address
                                    mem[_19650 + 260] = block.timestamp
                                    mem[_19650 + 196] = 160
                                    mem[_19650 + 292] = mem[_19650]
                                    mem[_19650 + 324 len floor32(mem[_19650])] = mem[_19650 + 32 len floor32(mem[_19650])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19650 + 292 len (32 * mem[_19650]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19650 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19650 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19650 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
            else:
                if 2 * liquidityFee / liquidityFee != 2:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not sub_4527881e[this.address] / stor50:
                    _15401 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15401] = 26
                    mem[_15401 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15665 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15665] = 26
                            mem[_15665 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16098 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16098] = 30
                            mem[_16098 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16503 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16503] = 30
                            mem[_16503 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17165 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17165]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17165]
                                    mem[_17165 + 260] = mem[_17165]
                                    if Mask(251, 0, mem[_17165]):
                                        mem[_17165 + 292] = this.address
                                        mem[_17165 + 324 len floor32((32 * mem[_17165]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17165], address(this.address), mem[_17165 + 324 len floor32((32 * mem[_17165]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17165 + 260 len (32 * mem[_17165]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17036 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17036] = 26
                                mem[_17036 + 32] = 'SafeMath: division by zero' << 48
                                _17726 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17726] = 30
                                mem[_17726 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18727 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18727]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18727]
                                    mem[_18727 + 260] = mem[_18727]
                                    if Mask(251, 0, mem[_18727]):
                                        mem[_18727 + 292] = this.address
                                        mem[_18727 + 324 len floor32((32 * mem[_18727]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18727], address(this.address), mem[_18727 + 324 len floor32((32 * mem[_18727]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18727 + 260 len (32 * mem[_18727]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18727 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18727 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18727 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19305 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19305]
                                    mem[_19305 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19305]
                                    mem[_19305 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19305]
                                    mem[_19305 + 96] = stableCoinAddress
                                    mem[_19305 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19305 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19305 + 164] = 0
                                    mem[_19305 + 228] = this.address
                                    mem[_19305 + 260] = block.timestamp
                                    mem[_19305 + 196] = 160
                                    mem[_19305 + 292] = mem[_19305]
                                    mem[_19305 + 324 len floor32(mem[_19305])] = mem[_19305 + 32 len floor32(mem[_19305])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19305 + 292 len (32 * mem[_19305]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19305 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19305 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19305 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15698 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15698] = 26
                            mem[_15698 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16202 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16202] = 30
                            mem[_16202 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16589 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16589] = 30
                            mem[_16589 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17304 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17304]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17304]
                                        mem[_17304 + 260] = mem[_17304]
                                        if Mask(251, 0, mem[_17304]):
                                            mem[_17304 + 292] = this.address
                                            mem[_17304 + 324 len floor32((32 * mem[_17304]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17304], address(this.address), mem[_17304 + 324 len floor32((32 * mem[_17304]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17304 + 260 len (32 * mem[_17304]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17162 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17162]
                                    mem[_17162 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17162]
                                    mem[_17162 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17162]
                                    mem[_17162 + 96] = stableCoinAddress
                                    mem[_17162 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17162 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17162 + 164] = 0
                                    mem[_17162 + 228] = sub_7d4b5017Address
                                    mem[_17162 + 260] = block.timestamp
                                    mem[_17162 + 196] = 160
                                    mem[_17162 + 292] = mem[_17162]
                                    mem[_17162 + 324 len floor32(mem[_17162])] = mem[_17162 + 32 len floor32(mem[_17162])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17162 + 292 len (32 * mem[_17162]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17164 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17164] = 26
                                mem[_17164 + 32] = 'SafeMath: division by zero' << 48
                                _17906 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17906] = 30
                                mem[_17906 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18938 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18938]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18938]
                                    mem[_18938 + 260] = mem[_18938]
                                    if Mask(251, 0, mem[_18938]):
                                        mem[_18938 + 292] = this.address
                                        mem[_18938 + 324 len floor32((32 * mem[_18938]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18938], address(this.address), mem[_18938 + 324 len floor32((32 * mem[_18938]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18938 + 260 len (32 * mem[_18938]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18938 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18938 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18938 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19464 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19464]
                                    mem[_19464 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19464]
                                    mem[_19464 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19464]
                                    mem[_19464 + 96] = stableCoinAddress
                                    mem[_19464 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19464 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19464 + 164] = 0
                                    mem[_19464 + 228] = this.address
                                    mem[_19464 + 260] = block.timestamp
                                    mem[_19464 + 196] = 160
                                    mem[_19464 + 292] = mem[_19464]
                                    mem[_19464 + 324 len floor32(mem[_19464])] = mem[_19464 + 32 len floor32(mem[_19464])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19464 + 292 len (32 * mem[_19464]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19464 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19464 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19464 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15697 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15697] = 26
                            mem[_15697 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16199 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16199] = 30
                            mem[_16199 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16586 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16586] = 30
                            mem[_16586 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                    _17302 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_17302]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17302]
                                    mem[_17302 + 260] = mem[_17302]
                                    if Mask(251, 0, mem[_17302]):
                                        mem[_17302 + 292] = this.address
                                        mem[_17302 + 324 len floor32((32 * mem[_17302]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17302], address(this.address), mem[_17302 + 324 len floor32((32 * mem[_17302]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17302 + 260 len (32 * mem[_17302]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17159 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17159] = 26
                                mem[_17159 + 32] = 'SafeMath: division by zero' << 48
                                _17899 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17899] = 30
                                mem[_17899 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18931 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18931]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18931]
                                    mem[_18931 + 260] = mem[_18931]
                                    if Mask(251, 0, mem[_18931]):
                                        mem[_18931 + 292] = this.address
                                        mem[_18931 + 324 len floor32((32 * mem[_18931]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18931], address(this.address), mem[_18931 + 324 len floor32((32 * mem[_18931]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18931 + 260 len (32 * mem[_18931]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18931 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18931 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18931 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19461 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19461]
                                    mem[_19461 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19461]
                                    mem[_19461 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19461]
                                    mem[_19461 + 96] = stableCoinAddress
                                    mem[_19461 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19461 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19461 + 164] = 0
                                    mem[_19461 + 228] = this.address
                                    mem[_19461 + 260] = block.timestamp
                                    mem[_19461 + 196] = 160
                                    mem[_19461 + 292] = mem[_19461]
                                    mem[_19461 + 324 len floor32(mem[_19461])] = mem[_19461 + 32 len floor32(mem[_19461])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19461 + 292 len (32 * mem[_19461]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19461 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19461 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19461 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * 0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15746 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15746] = 26
                            mem[_15746 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16294 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16294] = 30
                            mem[_16294 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16678 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16678] = 30
                            mem[_16678 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 0 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17405 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17405]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17405]
                                        mem[_17405 + 260] = mem[_17405]
                                        if Mask(251, 0, mem[_17405]):
                                            mem[_17405 + 292] = this.address
                                            mem[_17405 + 324 len floor32((32 * mem[_17405]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17405], address(this.address), mem[_17405 + 324 len floor32((32 * mem[_17405]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17405 + 260 len (32 * mem[_17405]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17299 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17299]
                                    mem[_17299 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17299]
                                    mem[_17299 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17299]
                                    mem[_17299 + 96] = stableCoinAddress
                                    mem[_17299 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17299 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17299 + 164] = 0
                                    mem[_17299 + 228] = sub_7d4b5017Address
                                    mem[_17299 + 260] = block.timestamp
                                    mem[_17299 + 196] = 160
                                    mem[_17299 + 292] = mem[_17299]
                                    mem[_17299 + 324 len floor32(mem[_17299])] = mem[_17299 + 32 len floor32(mem[_17299])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17299 + 292 len (32 * mem[_17299]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17301 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17301] = 26
                                mem[_17301 + 32] = 'SafeMath: division by zero' << 48
                                _18075 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18075] = 30
                                mem[_18075 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / totalSellFee + totalBuyFee / 2 > 0 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19129 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19129]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19129]
                                    mem[_19129 + 260] = mem[_19129]
                                    if Mask(251, 0, mem[_19129]):
                                        mem[_19129 + 292] = this.address
                                        mem[_19129 + 324 len floor32((32 * mem[_19129]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19129], address(this.address), mem[_19129 + 324 len floor32((32 * mem[_19129]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19129 + 260 len (32 * mem[_19129]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19129 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19129 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19129 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19635 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19635]
                                    mem[_19635 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19635]
                                    mem[_19635 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19635]
                                    mem[_19635 + 96] = stableCoinAddress
                                    mem[_19635 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19635 + 132] = 0 / totalSellFee + totalBuyFee / 2
                                    mem[_19635 + 164] = 0
                                    mem[_19635 + 228] = this.address
                                    mem[_19635 + 260] = block.timestamp
                                    mem[_19635 + 196] = 160
                                    mem[_19635 + 292] = mem[_19635]
                                    mem[_19635 + 324 len floor32(mem[_19635])] = mem[_19635 + 32 len floor32(mem[_19635])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19635 + 292 len (32 * mem[_19635]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 0 / totalSellFee + totalBuyFee), 0, (0 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19635 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19635 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19635 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 0 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (0 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
                else:
                    if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != 2 * liquidityFee:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _15413 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_15413] = 26
                    mem[_15413 + 32] = 'SafeMath: division by zero' << 48
                    if not totalSellFee + totalBuyFee:
                        revert with 0, 'SafeMath: division by zero'
                    if not sub_9763eec4:
                        if sub_7ac82927 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15696 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15696] = 26
                            mem[_15696 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16194 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16194] = 30
                            mem[_16194 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16582 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16582] = 30
                            mem[_16582 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        _17293 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17293]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17293]
                                        mem[_17293 + 260] = mem[_17293]
                                        if Mask(251, 0, mem[_17293]):
                                            mem[_17293 + 292] = this.address
                                            mem[_17293 + 324 len floor32((32 * mem[_17293]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17293], address(this.address), mem[_17293 + 324 len floor32((32 * mem[_17293]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17293 + 260 len (32 * mem[_17293]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17153 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17153]
                                    mem[_17153 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17153]
                                    mem[_17153 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17153]
                                    mem[_17153 + 96] = stableCoinAddress
                                    mem[_17153 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17153 + 132] = 0 / totalSellFee + totalBuyFee
                                    mem[_17153 + 164] = 0
                                    mem[_17153 + 228] = sub_7d4b5017Address
                                    mem[_17153 + 260] = block.timestamp
                                    mem[_17153 + 196] = 160
                                    mem[_17153 + 292] = mem[_17153]
                                    mem[_17153 + 324 len floor32(mem[_17153])] = mem[_17153 + 32 len floor32(mem[_17153])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17153 + 292 len (32 * mem[_17153]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17155 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17155] = 26
                                mem[_17155 + 32] = 'SafeMath: division by zero' << 48
                                _17892 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17892] = 30
                                mem[_17892 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _18922 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_18922]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_18922]
                                    mem[_18922 + 260] = mem[_18922]
                                    if Mask(251, 0, mem[_18922]):
                                        mem[_18922 + 292] = this.address
                                        mem[_18922 + 324 len floor32((32 * mem[_18922]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18922], address(this.address), mem[_18922 + 324 len floor32((32 * mem[_18922]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_18922 + 260 len (32 * mem[_18922]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_18922 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_18922 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_18922 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19455 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19455]
                                    mem[_19455 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19455]
                                    mem[_19455 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19455]
                                    mem[_19455 + 96] = stableCoinAddress
                                    mem[_19455 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19455 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19455 + 164] = 0
                                    mem[_19455 + 228] = this.address
                                    mem[_19455 + 260] = block.timestamp
                                    mem[_19455 + 196] = 160
                                    mem[_19455 + 292] = mem[_19455]
                                    mem[_19455 + 324 len floor32(mem[_19455])] = mem[_19455 + 32 len floor32(mem[_19455])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19455 + 292 len (32 * mem[_19455]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19455 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19455 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19455 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee)
                        else:
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / sub_4527881e[this.address] / stor50 != sub_7ac82927:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15745 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15745] = 26
                            mem[_15745 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16290 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16290] = 30
                            mem[_16290 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16674 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16674] = 30
                            mem[_16674 + 32] = 'SafeMath: subtraction overflow'
                            if sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        _17399 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17399]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17399]
                                        mem[_17399 + 260] = mem[_17399]
                                        if Mask(251, 0, mem[_17399]):
                                            mem[_17399 + 292] = this.address
                                            mem[_17399 + 324 len floor32((32 * mem[_17399]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17399], address(this.address), mem[_17399 + 324 len floor32((32 * mem[_17399]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17399 + 260 len (32 * mem[_17399]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17290 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17290]
                                    mem[_17290 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17290]
                                    mem[_17290 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17290]
                                    mem[_17290 + 96] = stableCoinAddress
                                    mem[_17290 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17290 + 132] = sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee
                                    mem[_17290 + 164] = 0
                                    mem[_17290 + 228] = sub_7d4b5017Address
                                    mem[_17290 + 260] = block.timestamp
                                    mem[_17290 + 196] = 160
                                    mem[_17290 + 292] = mem[_17290]
                                    mem[_17290 + 324 len floor32(mem[_17290])] = mem[_17290 + 32 len floor32(mem[_17290])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17290 + 292 len (32 * mem[_17290]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17292 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17292] = 26
                                mem[_17292 + 32] = 'SafeMath: division by zero' << 48
                                _18066 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18066] = 30
                                mem[_18066 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19117 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19117]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19117]
                                    mem[_19117 + 260] = mem[_19117]
                                    if Mask(251, 0, mem[_19117]):
                                        mem[_19117 + 292] = this.address
                                        mem[_19117 + 324 len floor32((32 * mem[_19117]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19117], address(this.address), mem[_19117 + 324 len floor32((32 * mem[_19117]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19117 + 260 len (32 * mem[_19117]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19117 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19117 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19117 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19627 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19627]
                                    mem[_19627 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19627]
                                    mem[_19627 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19627]
                                    mem[_19627 + 96] = stableCoinAddress
                                    mem[_19627 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19627 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19627 + 164] = 0
                                    mem[_19627 + 228] = this.address
                                    mem[_19627 + 260] = block.timestamp
                                    mem[_19627 + 196] = 160
                                    mem[_19627 + 292] = mem[_19627]
                                    mem[_19627 + 324 len floor32(mem[_19627])] = mem[_19627 + 32 len floor32(mem[_19627])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19627 + 292 len (32 * mem[_19627]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19627 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19627 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19627 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (sub_7ac82927 * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee)
                    else:
                        if 2 * sub_9763eec4 / sub_9763eec4 != 2:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if sub_7ac82927 + (2 * sub_9763eec4) < 2 * sub_9763eec4:
                            revert with 0, 'SafeMath: addition overflow'
                        if not sub_4527881e[this.address] / stor50:
                            _15744 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15744] = 26
                            mem[_15744 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16287 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16287] = 30
                            mem[_16287 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16671 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16671] = 30
                            mem[_16671 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not 0 / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        _17395 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17395]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17395]
                                        mem[_17395 + 260] = mem[_17395]
                                        if Mask(251, 0, mem[_17395]):
                                            mem[_17395 + 292] = this.address
                                            mem[_17395 + 324 len floor32((32 * mem[_17395]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17395], address(this.address), mem[_17395 + 324 len floor32((32 * mem[_17395]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17395 + 260 len (32 * mem[_17395]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17285 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17285]
                                    mem[_17285 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17285]
                                    mem[_17285 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17285]
                                    mem[_17285 + 96] = stableCoinAddress
                                    mem[_17285 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17285 + 132] = 0 / totalSellFee + totalBuyFee
                                    mem[_17285 + 164] = 0
                                    mem[_17285 + 228] = sub_7d4b5017Address
                                    mem[_17285 + 260] = block.timestamp
                                    mem[_17285 + 196] = 160
                                    mem[_17285 + 292] = mem[_17285]
                                    mem[_17285 + 324 len floor32(mem[_17285])] = mem[_17285 + 32 len floor32(mem[_17285])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17285 + 292 len (32 * mem[_17285]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17287 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17287] = 26
                                mem[_17287 + 32] = 'SafeMath: division by zero' << 48
                                _18059 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18059] = 30
                                mem[_18059 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19110 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19110]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19110]
                                    mem[_19110 + 260] = mem[_19110]
                                    if Mask(251, 0, mem[_19110]):
                                        mem[_19110 + 292] = this.address
                                        mem[_19110 + 324 len floor32((32 * mem[_19110]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19110], address(this.address), mem[_19110 + 324 len floor32((32 * mem[_19110]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19110 + 260 len (32 * mem[_19110]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19110 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19110 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19110 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19624 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19624]
                                    mem[_19624 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19624]
                                    mem[_19624 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19624]
                                    mem[_19624 + 96] = stableCoinAddress
                                    mem[_19624 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19624 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19624 + 164] = 0
                                    mem[_19624 + 228] = this.address
                                    mem[_19624 + 260] = block.timestamp
                                    mem[_19624 + 196] = 160
                                    mem[_19624 + 292] = mem[_19624]
                                    mem[_19624 + 324 len floor32(mem[_19624])] = mem[_19624 + 32 len floor32(mem[_19624])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19624 + 292 len (32 * mem[_19624]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not 0 / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19624 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19624 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19624 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, 0 / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (0 / totalSellFee + totalBuyFee)
                        else:
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / sub_4527881e[this.address] / stor50 != sub_7ac82927 + (2 * sub_9763eec4):
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _15814 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15814] = 26
                            mem[_15814 + 32] = 'SafeMath: division by zero' << 48
                            if not totalSellFee + totalBuyFee:
                                revert with 0, 'SafeMath: division by zero'
                            _16365 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16365] = 30
                            mem[_16365 + 32] = 'SafeMath: subtraction overflow'
                            if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee > sub_4527881e[this.address] / stor50:
                                revert with 0, 'SafeMath: subtraction overflow'
                            _16749 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_16749] = 30
                            mem[_16749 + 32] = 'SafeMath: subtraction overflow'
                            if (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee > (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee):
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        _17471 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        require 0 < mem[_17471]
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require 1 < mem[_17471]
                                        mem[_17471 + 260] = mem[_17471]
                                        if Mask(251, 0, mem[_17471]):
                                            mem[_17471 + 292] = this.address
                                            mem[_17471 + 324 len floor32((32 * mem[_17471]) - 1)] = ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17471], address(this.address), mem[_17471 + 324 len floor32((32 * mem[_17471]) - 1) - 260]
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, mem[_17471 + 260 len (32 * mem[_17471]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    _17392 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_17392]
                                    mem[_17392 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_17392]
                                    mem[_17392 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_17392]
                                    mem[_17392 + 96] = stableCoinAddress
                                    mem[_17392 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_17392 + 132] = (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee
                                    mem[_17392 + 164] = 0
                                    mem[_17392 + 228] = sub_7d4b5017Address
                                    mem[_17392 + 260] = block.timestamp
                                    mem[_17392 + 196] = 160
                                    mem[_17392 + 292] = mem[_17392]
                                    mem[_17392 + 324 len floor32(mem[_17392])] = mem[_17392 + 32 len floor32(mem[_17392])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, mem[_17392 + 292 len (32 * mem[_17392]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                            else:
                                _17394 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17394] = 26
                                mem[_17394 + 32] = 'SafeMath: division by zero' << 48
                                _18215 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18215] = 30
                                mem[_18215 + 32] = 'SafeMath: subtraction overflow'
                                if 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2 > 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if uint8(stor3.field_192):
                                    _19280 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    require 0 < mem[_19280]
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19280]
                                    mem[_19280 + 260] = mem[_19280]
                                    if Mask(251, 0, mem[_19280]):
                                        mem[_19280 + 292] = this.address
                                        mem[_19280 + 324 len floor32((32 * mem[_19280]) - 1)] = ext_call.return_data[12 len 20], 0, Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19280], address(this.address), mem[_19280 + 324 len floor32((32 * mem[_19280]) - 1) - 260]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19280 + 260 len (32 * mem[_19280]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2));
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19280 + 484 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19280 + 484 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19280 + 484 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    _19811 = mem[64]
                                    mem[mem[64]] = 3
                                    mem[64] = mem[64] + 128
                                    require 0 < mem[_19811]
                                    mem[_19811 + 32] = this.address
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require 1 < mem[_19811]
                                    mem[_19811 + 64] = ext_call.return_data[12 len 20]
                                    require 2 < mem[_19811]
                                    mem[_19811 + 96] = stableCoinAddress
                                    mem[_19811 + 128] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[_19811 + 132] = 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2
                                    mem[_19811 + 164] = 0
                                    mem[_19811 + 228] = this.address
                                    mem[_19811 + 260] = block.timestamp
                                    mem[_19811 + 196] = 160
                                    mem[_19811 + 292] = mem[_19811]
                                    mem[_19811 + 324 len floor32(mem[_19811])] = mem[_19811 + 32 len floor32(mem[_19811])]
                                    require ext_code.size(routerAddress)
                                    call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, 160, address(this.address), block.timestamp, mem[_19811 + 292 len (32 * mem[_19811]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require ext_code.size(stableCoinAddress)
                                    staticcall stableCoinAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] > ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(routerAddress)
                                    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                         gas gas_remaining wei
                                        args this.address, stableCoinAddress, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2), 0, 0, 0, liquidityReceiverAddress, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit 0x7a4f8347: Mask(255, 1, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee), 0, (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee / 2)
                                    if not (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee:
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                    else:
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[_19811 + 516 len 0] = None
                                        require ext_code.size(routerAddress)
                                        call routerAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, 0, 160, sub_7d4b5017Address, block.timestamp, 3, mem[_19811 + 516 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee):
                                            require ext_code.size(routerAddress)
                                            staticcall routerAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(routerAddress)
                                            call routerAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, sub_08b1fd8fAddress, block.timestamp, 2, address(this.address), ext_call.return_data[12 len 20], 0, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee), 0, 160, 0, mem[_19811 + 516 len -100]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                            emit 0xa4903880: sub_4527881e[this.address] / stor50, 2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee, (sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee, (sub_4527881e[this.address] / stor50) - (2 * liquidityFee * sub_4527881e[this.address] / stor50 / totalSellFee + totalBuyFee) - ((sub_7ac82927 * sub_4527881e[this.address] / stor50) + (2 * sub_9763eec4 * sub_4527881e[this.address] / stor50) / totalSellFee + totalBuyFee)
}



}
