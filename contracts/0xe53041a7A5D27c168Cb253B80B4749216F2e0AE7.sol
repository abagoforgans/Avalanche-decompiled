contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#  - sub_67a1e48b(?)
#  - sub_d08a9937(?)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of struct allowance;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
uint256 totalShares;
uint256 totalReleased;
mapping of uint256 shares;
mapping of uint256 released;
array of address payee;
mapping of uint256 totalReleased;
mapping of uint256 released;
address nodeRewardManagerAddress;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
address futurUsePoolAddress;
address distributionPoolAddress;
array of address stor18;
uint8 sub_f7f94376;
uint8 openSell; offset 8
address deadWalletAddress; offset 16
uint256 stor19; offset 8
uint256 rewardsFee;
uint256 liquidityPoolFee;
uint256 futurFee;
uint256 totalFees;
uint256 maxBuy;
uint256 maxWallet;
uint256 sub_8124f7ac;
uint256 launchTime;
uint256 cashoutFee;
uint256 stor29;
uint8 stor30;
uint8 stor30; offset 8
uint256 stor30; offset 8
uint256 swapTokensAmount;
mapping of uint8 stor32;
mapping of uint256 sub_0e56a104;
mapping of uint8 stor34;
mapping of uint8 stor35;
mapping of struct referrals;

function sub_0e56a104(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_0e56a104[arg1]
}

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function _isBlacklisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor34[arg1])
}

function rewardsFee() {
    return rewardsFee
}

function totalShares() {
    return totalShares
}

function released(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return released[address(arg1)][address(arg2)]
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function liquidityPoolFee() {
    return liquidityPoolFee
}

function swapTokensAmount() {
    return swapTokensAmount
}

function cashoutFee() {
    return cashoutFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function maxBuy() {
    return maxBuy
}

function nodeRewardManager() {
    return nodeRewardManagerAddress
}

function launchTime() {
    return launchTime
}

function sub_8124f7ac(?) {
    return sub_8124f7ac
}

function deadWallet() {
    return deadWalletAddress
}

function payee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if arg1 >= payee.length:
        revert with 0, 50
    return payee[arg1]
}

function owner() {
    return owner
}

function released(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return released[address(arg1)]
}

function referrals(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return referrals[arg1].field_0, referrals[arg1].field_256
}

function futurUsePool() {
    return futurUsePoolAddress
}

function futurFee() {
    return futurFee
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor35[arg1])
}

function distributionPool() {
    return distributionPoolAddress
}

function shares(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return shares[address(arg1)]
}

function totalReleased(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return totalReleased[address(arg1)]
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function sub_ddf10b7f(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return bool(stor32[arg1])
}

function totalReleased() {
    return totalReleased
}

function openSell() {
    return bool(openSell)
}

function sub_f7f94376(?) {
    return bool(sub_f7f94376)
}

function maxWallet() {
    return maxWallet
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function updateRwSwapFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor29 = arg1
}

function updateCashoutFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    cashoutFee = arg1
}

function setTransferTax(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_8124f7ac = arg1
}

function sub_0282129a(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    maxBuy = arg1
    maxWallet = arg2
}

function updateSwapTokensAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    swapTokensAmount = arg1
}

function sub_4935d92a(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_f7f94376 = uint8(bool(arg1))
}

function sub_3c03b9a4(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor19 = Mask(248, 0, bool(arg1))
}

function updateFuturWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurUsePoolAddress = arg1
}

function updateRewardsWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    distributionPoolAddress = arg1
}

function setNodeManagement(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    nodeRewardManagerAddress = arg1
}

function changeSwapLiquify(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor30.field_8) = Mask(248, 0, arg1)
}

function sub_ddd5df38(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == bool(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor32[address(arg1)] = uint8(bool(arg2))
}

function blacklistMalicious(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor34[address(arg1)] = uint8(arg2)
}

function getNodePrice() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.nodePrice() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getClaimTime() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.claimTime() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getRewardPerNode() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.rewardPerNode() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getGasDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.gasForDistribution() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getDistriCount() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.lastDistributionCount() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalStakedReward() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalRewardStaked() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getTotalCreatedNodes() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.totalNodesCreated() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getAutoDistri() {
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.autoDistri() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    return bool(ext_call.return_data[0])
}

function changeGasDistri(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeGasDistri(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeNodePrice(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeNodePrice(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeClaimTime(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeClaimTime(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeRewardPerNode(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeRewardPerNode(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function changeAutoDistri(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._changeAutoDistri(bool arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getNodeNumberOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodeNumberOf(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_fcd79fc1(?) {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < stor18.length:
        mem[0] = address(stor18[idx])
        mem[32] = 34
        stor34[address(stor18[idx])] = 1
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    stor18.length = 0
    idx = 0
    while stor18.length > idx:
        uint256(stor18[idx]) = 0
        idx = idx + 1
        continue 
}

function boostReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 <= eth.balance(this.address):
        call owner with:
           value arg1 wei
             gas 2300 * is_zero(value) wei
    else:
        call owner with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function updateLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityPoolFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + arg1 > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + arg1 + futurFee
}

function updateRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    rewardsFee = arg1
    if arg1 > !liquidityPoolFee:
        revert with 0, 17
    if arg1 + liquidityPoolFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + liquidityPoolFee > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = arg1 + liquidityPoolFee + futurFee
}

function updateFuturFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurFee = arg1
    if rewardsFee > !liquidityPoolFee:
        revert with 0, 17
    if rewardsFee + liquidityPoolFee < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + liquidityPoolFee > !arg1:
        revert with 0, 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + liquidityPoolFee + arg1
}

function getSellTax() {
    if launchTime > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp < launchTime:
        revert with 0, 17
    if block.timestamp - launchTime <= 24 * 3600:
        return 20
    if launchTime > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp < launchTime:
        revert with 0, 17
    if block.timestamp - launchTime <= 48 * 24 * 3600:
        return 15
    if launchTime > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if block.timestamp < launchTime:
        revert with 0, 17
    if block.timestamp - launchTime > 72 * 24 * 3600:
        return 5
    return 10
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2PairAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'
    if arg2 == bool(stor35[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: Automated market maker pair is already set to that value'
    stor35[address(arg1)] = uint8(arg2)
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if arg2 > allowance[msg.sender][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[msg.sender][address(arg1)].field_0 < arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 - arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)].field_0 > !arg2:
        revert with 0, 17
    if allowance[msg.sender][address(arg1)].field_0 + arg2 < allowance[msg.sender][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 + arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function getRewardAmount() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0xd5426589 with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_05124558(?) {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    require calldata.size >= cd[4] + (32 * ('cd', 4).length) + 36
    s = cd[4] + 36
    t = 128
    u = 32 * ('cd', 4).length
    idx = 0
    while idx < ('cd', 4).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        u = cd[s]
        idx = idx + 1
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < ('cd', 4).length:
        if idx >= ('cd', 4).length:
            revert with 0, 50
        mem[0] = mem[(32 * idx) + 140 len 20]
        mem[32] = 33
        sub_0e56a104[mem[(32 * idx) + 140 len 20]] = 0
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function sub_f0225453(?) {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    require calldata.size >= cd[4] + (32 * ('cd', 4).length) + 36
    s = cd[4] + 36
    t = 128
    u = 32 * ('cd', 4).length
    idx = 0
    while idx < ('cd', 4).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        u = cd[s]
        idx = idx + 1
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < ('cd', 4).length:
        if idx >= ('cd', 4).length:
            revert with 0, 50
        mem[0] = mem[(32 * idx) + 140 len 20]
        mem[32] = 33
        if sub_0e56a104[mem[(32 * idx) + 140 len 20]] > -2:
            revert with 0, 17
        sub_0e56a104[mem[(32 * idx) + 140 len 20]]++
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TKN: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(uniswapV2RouterAddress)
    staticcall uniswapV2RouterAddress.WAVAX() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
}

function release(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not shares[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    if eth.balance(this.address) > !totalReleased:
        revert with 0, 17
    if eth.balance(this.address) + totalReleased and shares[address(arg1)] > -1 / eth.balance(this.address) + totalReleased:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares < released[address(arg1)]:
        revert with 0, 17
    if not ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)] > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    released[address(arg1)] = (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares
    if totalReleased > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]
    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0, 'Address: insufficient balance'
    call arg1 with:
       value ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)] wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit PaymentReleased(address(arg1), ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]);
}

function getNodesNames() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesNames(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function getNodesCreatime() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesCreationTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function getNodesLastClaims() {
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._isNodeOwner(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getNodesLastClaimTime(address arg1) with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _12 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _13 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _13
    require _12 + _13 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)] = mem[ceil32(return_data.size) + _12 + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + (2 * ceil32(return_data.size)) + 128] = 0
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _13
    mem[mem[64] + 64 len ceil32(_13)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + mem[64] + 64] = 0
    return Array(len=_13, data=mem[mem[64] + 64 len ceil32(_13)])
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor3.length):
            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor3.length):
                if 31 < uint255(stor3.length) * 0.5:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor3.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
        if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
            mem[(uint255(stor3.length) * 0.5) + ceil32(uint255(stor3.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 0, 34
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor3.length):
            if 31 < uint255(stor3.length) * 0.5:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while (uint255(stor3.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor4.length):
            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor4.length):
                if 31 < uint255(stor4.length) * 0.5:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor4.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
            mem[(uint255(stor4.length) * 0.5) + ceil32(uint255(stor4.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 0, 34
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor4.length):
            if 31 < uint255(stor4.length) * 0.5:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while (uint255(stor4.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function release(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not shares[address(arg2)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    mem[100] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !totalReleased[address(arg1)]:
        revert with 0, 17
    if ext_call.return_data[0] + totalReleased[address(arg1)] and shares[address(arg2)] > -1 / ext_call.return_data[0] + totalReleased[address(arg1)]:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares < released[address(arg1)][address(arg2)]:
        revert with 0, 17
    if not ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]:
        revert with 0, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)][address(arg2)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    released[address(arg1)][address(arg2)] = (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares
    if totalReleased[address(arg1)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    totalReleased[address(arg1)] = totalReleased[address(arg1)] + ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 132] = arg2
    mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196] = 32
    mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0
    mem[ceil32(return_data.size) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
            if not mem[ceil32(return_data.size) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit ERC20PaymentReleased(address(arg2), ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], arg1);
}

function sub_2e43b5f9(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint16(arg1)
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor34[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    mem[132] = uint16(arg1)
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0xa490c415 with:
            gas gas_remaining wei
           args msg.sender, uint16(arg1)
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if not uint8(stor30.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if stor35[stor17]:
            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if stor35[stor17]:
                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _225 = mem[64]
                mem[64] = mem[64] + 64
                mem[_225] = 30
                mem[_225 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _272 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_272] = 38
                    mem[_272 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_272 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _237 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_237] = return_data.size
                    mem[_237 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _275 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_275] = 38
                    mem[_275 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_275 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('ext_call.return_data', 0, 32), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and 10 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if 10 * ext_call.return_data[0] / ext_call.return_data[0] != 10:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 10 * ext_call.return_data[0] / 100
                mem[(2 * ceil32(return_data.size)) + 256] = 10 * ext_call.return_data[0] / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 10 * ext_call.return_data[0] / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _224 = mem[64]
                mem[64] = mem[64] + 64
                mem[_224] = 30
                mem[_224 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < 10 * ext_call.return_data[0] / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _266 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_266] = 38
                    mem[_266 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_266 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _236 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_236] = return_data.size
                    mem[_236 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < 10 * ext_call.return_data[0] / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _269 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_269] = 38
                    mem[_269 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_269 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('add', ('ext_call.return_data', 0, 32), ('mul', -1, ('div', ('mul', 10, ('ext_call.return_data', 0, 32)), 100))), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (10 * ext_call.return_data[0] / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100)
                emit Transfer((ext_call.return_data[0] - (10 * ext_call.return_data[0] / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress.0xac8ab79e with:
         gas gas_remaining wei
        args msg.sender, uint16(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function cashoutAll() {
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor34[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.0xd5426589 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if not uint8(stor30.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if stor35[stor17]:
            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if stor35[stor17]:
                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _225 = mem[64]
                mem[64] = mem[64] + 64
                mem[_225] = 30
                mem[_225 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _272 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_272] = 38
                    mem[_272 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_272 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _237 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_237] = return_data.size
                    mem[_237 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _275 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_275] = 38
                    mem[_275 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_275 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('ext_call.return_data', 0, 32), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _224 = mem[64]
                mem[64] = mem[64] + 64
                mem[_224] = 30
                mem[_224 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _266 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_266] = 38
                    mem[_266 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_266 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _236 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_236] = return_data.size
                    mem[_236 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _269 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_269] = 38
                    mem[_269 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_269 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('add', ('ext_call.return_data', 0, 32), ('mul', -1, ('div', ('mul', ('ext_call.return_data', 0, 32), ('stor', ('name', 'cashoutFee', 28))), 100))), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutAllNodesReward(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function cashoutReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor34[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    mem[100] = msg.sender
    mem[132] = arg1
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress._getRewardAmountOf(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args msg.sender, arg1
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to cash out'
    if not uint8(stor30.field_8):
        if not distributionPoolAddress:
            revert with 0, 'ERC20: transfer from the zero address'
        if not msg.sender:
            revert with 0, 'ERC20: transfer to the zero address'
        if stor35[stor17]:
            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
        if ext_call.return_data[0] > balanceOf[stor17]:
            revert with 0, 
                        32,
                        38,
                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                        0
        if balanceOf[stor17] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[stor17] -= ext_call.return_data[0]
        if balanceOf[msg.sender] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
    else:
        if not cashoutFee:
            if ext_call.return_data[0] < 0:
                revert with 0, 17
            if not distributionPoolAddress:
                revert with 0, 'ERC20: transfer from the zero address'
            if not msg.sender:
                revert with 0, 'ERC20: transfer to the zero address'
            if stor35[stor17]:
                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
            if ext_call.return_data[0] > balanceOf[stor17]:
                revert with 0, 
                            32,
                            38,
                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(return_data.size) + 166 len 26] >> 48,
                            0
            if balanceOf[stor17] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[stor17] -= ext_call.return_data[0]
            if balanceOf[msg.sender] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
        else:
            if not ext_call.return_data[0]:
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = 0
                mem[(2 * ceil32(return_data.size)) + 256] = 0
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = 0
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _225 = mem[64]
                mem[64] = mem[64] + 64
                mem[_225] = 30
                mem[_225 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _272 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_272] = 38
                    mem[_272 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_272 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _237 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_237] = return_data.size
                    mem[_237 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < 0:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _275 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_275] = 38
                    mem[_275 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_275 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('ext_call.return_data', 0, 32), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[stor17] -= ext_call.return_data[0]
                if balanceOf[msg.sender] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], distributionPoolAddress, msg.sender);
            else:
                if ext_call.return_data[0] and cashoutFee > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * cashoutFee / ext_call.return_data[0] != cashoutFee:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[ceil32(return_data.size) + 96] = 26
                mem[ceil32(return_data.size) + 128] = 'SafeMath: division by zero'
                mem[ceil32(return_data.size) + 160] = 2
                mem[ceil32(return_data.size) + 192] = this.address
                require ext_code.size(uniswapV2RouterAddress)
                staticcall uniswapV2RouterAddress.WAVAX() with:
                        gas gas_remaining wei
                mem[ceil32(return_data.size) + 256] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[ceil32(return_data.size) + 224] = ext_call.return_data[12 len 20]
                if not this.address:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 36
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve from the zero add'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7265737300000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                if not uniswapV2RouterAddress:
                    mem[(2 * ceil32(return_data.size)) + 256] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 260] = 32
                    mem[(2 * ceil32(return_data.size)) + 292] = 34
                    mem[(2 * ceil32(return_data.size)) + 324] = 'ERC20: approve to the zero addre'
                    mem[(2 * ceil32(return_data.size)) + 356] = 0x7373000000000000000000000000000000000000000000000000000000000000
                    revert with memory
                      from (2 * ceil32(return_data.size)) + 256
                       len ceil32(return_data.size) + 132
                mem[0] = uniswapV2RouterAddress
                mem[32] = sha3(address(this.address), 1)
                allowance[address(this.address)][stor14].field_0 = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 256] = ext_call.return_data[0] * cashoutFee / 100
                emit Approval(mem[(2 * ceil32(return_data.size)) + 256 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                mem[(2 * ceil32(return_data.size)) + 256] = 0x762b156200000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * cashoutFee / 100
                mem[(2 * ceil32(return_data.size)) + 292] = 0
                mem[(2 * ceil32(return_data.size)) + 324] = 160
                mem[(2 * ceil32(return_data.size)) + 420] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 452
                t = ceil32(return_data.size) + 192
                while idx < mem[ceil32(return_data.size) + 160]:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(2 * ceil32(return_data.size)) + 356] = this.address
                mem[(2 * ceil32(return_data.size)) + 388] = block.timestamp
                require ext_code.size(uniswapV2RouterAddress)
                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len (2 * ceil32(return_data.size)) + -mem[64] + 512]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _224 = mem[64]
                mem[64] = mem[64] + 64
                mem[_224] = 30
                mem[_224 + 32] = 'SafeMath: subtraction overflow'
                if eth.balance(this.address) > eth.balance(this.address):
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if eth.balance(this.address) < eth.balance(this.address):
                    revert with 0, 17
                call futurUsePoolAddress with:
                     gas gas_remaining wei
                if not return_data.size:
                    require ext_call.success
                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _266 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_266] = 38
                    mem[_266 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_266 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                else:
                    _236 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_236] = return_data.size
                    mem[_236 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require ext_call.success
                    if ext_call.return_data[0] < ext_call.return_data[0] * cashoutFee / 100:
                        revert with 0, 17
                    if not distributionPoolAddress:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer to the zero address'
                    mem[0] = distributionPoolAddress
                    mem[32] = 35
                    if stor35[stor17]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    _269 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_269] = 38
                    mem[_269 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                    if ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) > balanceOf[stor17]:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 38
                        mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_269 + 70 len 26]
                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                ('le', ('add', ('ext_call.return_data', 0, 32), ('mul', -1, ('div', ('mul', ('ext_call.return_data', 0, 32), ('stor', ('name', 'cashoutFee', 28))), 100))), ('stor', ('map', ('stor', ('name', 'stor17', 17)), ('name', 'balanceOf', 0))))
                if balanceOf[stor17] < ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100):
                    revert with 0, 17
                balanceOf[stor17] = balanceOf[stor17] - ext_call.return_data[0] + (ext_call.return_data[0] * cashoutFee / 100)
                if balanceOf[msg.sender] > !(ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)):
                    revert with 0, 17
                if balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100) < balanceOf[msg.sender]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(msg.sender)] = balanceOf[msg.sender] + ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)
                emit Transfer((ext_call.return_data[0] - (ext_call.return_data[0] * cashoutFee / 100)), distributionPoolAddress, msg.sender);
    require ext_code.size(nodeRewardManagerAddress)
    call nodeRewardManagerAddress._cashoutNodeReward(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if stor34[address(msg.sender)]:
        revert with 0, 'Blacklisted address'
    if stor34[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if not openSell:
        revert with 0, 'ERC20: SELL NOT OPEN YET'
    if not stor32[address(msg.sender)]:
        if arg2 > maxBuy:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERR: MaxBuy per transaction reached.'
    if not stor32[address(arg1)]:
        if balanceOf[address(arg1)] > maxWallet:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERR: Max token per wallet reached.'
        if arg2 > maxBuy:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERR: MaxBuy per transaction reached.'
    if uniswapV2RouterAddress != msg.sender:
        if stor32[address(arg1)]:
            if sub_f7f94376:
                if not stor32[address(arg1)]:
                    stor18.length++
                    address(stor18[stor18.length]) = arg1
                if not stor32[address(msg.sender)]:
                    stor18.length++
                    address(stor18[stor18.length]) = msg.sender
            if not msg.sender:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
            if not arg1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
            if stor35[address(msg.sender)]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            'You are not permitted to transfer more than 100,000 tokens'
            if arg2 > balanceOf[address(msg.sender)]:
                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
            if balanceOf[address(msg.sender)] < arg2:
                revert with 0, 17
            balanceOf[address(msg.sender)] -= arg2
            if balanceOf[arg1] > !arg2:
                revert with 0, 17
            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
            emit Transfer(arg2, msg.sender, arg1);
        else:
            if stor32[address(msg.sender)]:
                if sub_f7f94376:
                    if not stor32[address(arg1)]:
                        stor18.length++
                        address(stor18[stor18.length]) = arg1
                    if not stor32[address(msg.sender)]:
                        stor18.length++
                        address(stor18[stor18.length]) = msg.sender
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if stor35[address(msg.sender)]:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                'You are not permitted to transfer more than 100,000 tokens'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[arg1] > !arg2:
                    revert with 0, 17
                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                if 100 < sub_8124f7ac:
                    revert with 0, 17
                if not arg2:
                    if 0 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg2 < 0:
                        revert with 0, 17
                    if not msg.sender:
                        revert with 0, 'ERC20: burn from the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[290 len 30] >> 16, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= arg2
                    if arg2 > totalSupply:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if totalSupply < arg2:
                        revert with 0, 17
                    totalSupply -= arg2
                    emit Transfer(arg2, msg.sender, 0);
                    if sub_f7f94376:
                        if not stor32[address(arg1)]:
                            stor18.length++
                            address(stor18[stor18.length]) = arg1
                        if not stor32[address(msg.sender)]:
                            stor18.length++
                            address(stor18[stor18.length]) = msg.sender
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if 0 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < 0:
                        revert with 0, 17
                    if balanceOf[arg1] > -1:
                        revert with 0, 17
                    if balanceOf[arg1] < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1]
                    emit Transfer(0, msg.sender, arg1);
                else:
                    if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                        revert with 0, 17
                    if not msg.sender:
                        revert with 0, 'ERC20: burn from the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[290 len 30] >> 16, 0
                    if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                        revert with 0, 17
                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                        revert with 0, 17
                    totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                    emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                    if sub_f7f94376:
                        if not stor32[address(arg1)]:
                            stor18.length++
                            address(stor18[stor18.length]) = arg1
                        if not stor32[address(msg.sender)]:
                            stor18.length++
                            address(stor18[stor18.length]) = msg.sender
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                    if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                        revert with 0, 17
                    if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                    emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
    else:
        if launchTime > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow', 0
        if block.timestamp < launchTime:
            revert with 0, 17
        if block.timestamp - launchTime <= 24 * 3600:
            if not arg2:
                if 0 < arg2:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if stor35[address(msg.sender)]:
                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                if -arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < -arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += arg2
                if balanceOf[this.address] > !-arg2:
                    revert with 0, 17
                if balanceOf[this.address] - arg2 < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] - arg2
                emit Transfer(-arg2, msg.sender, this.address);
                if stor32[address(arg1)]:
                    if sub_f7f94376:
                        if not stor32[address(arg1)]:
                            stor18.length++
                            address(stor18[stor18.length]) = arg1
                        if not stor32[address(msg.sender)]:
                            stor18.length++
                            address(stor18[stor18.length]) = msg.sender
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if 0 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < 0:
                        revert with 0, 17
                    if balanceOf[arg1] > -1:
                        revert with 0, 17
                    if balanceOf[arg1] < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1]
                    emit Transfer(0, msg.sender, arg1);
                else:
                    if stor32[address(msg.sender)]:
                        if sub_f7f94376:
                            if not stor32[address(arg1)]:
                                stor18.length++
                                address(stor18[stor18.length]) = arg1
                            if not stor32[address(msg.sender)]:
                                stor18.length++
                                address(stor18[stor18.length]) = msg.sender
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if 0 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < 0:
                            revert with 0, 17
                        if balanceOf[arg1] > -1:
                            revert with 0, 17
                        if balanceOf[arg1] < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1]
                        emit Transfer(0, msg.sender, arg1);
                    else:
                        if 100 < sub_8124f7ac:
                            revert with 0, 17
                        if not arg2:
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if arg2 < 0:
                                revert with 0, 17
                            if not msg.sender:
                                revert with 0, 'ERC20: burn from the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[514 len 30] >> 16, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= arg2
                            if arg2 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if totalSupply < arg2:
                                revert with 0, 17
                            totalSupply -= arg2
                            emit Transfer(arg2, msg.sender, 0);
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[678 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[arg1] > -1:
                                revert with 0, 17
                            if balanceOf[arg1] < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1]
                            emit Transfer(0, msg.sender, arg1);
                        else:
                            if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                revert with 0, 17
                            if not msg.sender:
                                revert with 0, 'ERC20: burn from the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[514 len 30] >> 16, 0
                            if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[678 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                            if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
            else:
                if arg2 and 80 > -1 / arg2:
                    revert with 0, 17
                if not arg2:
                    revert with 0, 18
                if 80 * arg2 / arg2 != 80:
                    revert with 0, 'SafeMath: multiplication overflow'
                if 80 * arg2 / 100 < arg2:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if stor35[address(msg.sender)]:
                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                if (80 * arg2 / 100) - arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < (80 * arg2 / 100) - arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (80 * arg2 / 100) + arg2
                if balanceOf[this.address] > !((80 * arg2 / 100) - arg2):
                    revert with 0, 17
                if balanceOf[this.address] + (80 * arg2 / 100) - arg2 < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + (80 * arg2 / 100) - arg2
                emit Transfer(((80 * arg2 / 100) - arg2), msg.sender, this.address);
                if stor32[address(arg1)]:
                    if sub_f7f94376:
                        if not stor32[address(arg1)]:
                            stor18.length++
                            address(stor18[stor18.length]) = arg1
                        if not stor32[address(msg.sender)]:
                            stor18.length++
                            address(stor18[stor18.length]) = msg.sender
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if 80 * arg2 / 100 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < 80 * arg2 / 100:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= 80 * arg2 / 100
                    if balanceOf[arg1] > !(80 * arg2 / 100):
                        revert with 0, 17
                    if balanceOf[arg1] + (80 * arg2 / 100) < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + (80 * arg2 / 100)
                    emit Transfer((80 * arg2 / 100), msg.sender, arg1);
                else:
                    if stor32[address(msg.sender)]:
                        if sub_f7f94376:
                            if not stor32[address(arg1)]:
                                stor18.length++
                                address(stor18[stor18.length]) = arg1
                            if not stor32[address(msg.sender)]:
                                stor18.length++
                                address(stor18[stor18.length]) = msg.sender
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if 80 * arg2 / 100 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < 80 * arg2 / 100:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= 80 * arg2 / 100
                        if balanceOf[arg1] > !(80 * arg2 / 100):
                            revert with 0, 17
                        if balanceOf[arg1] + (80 * arg2 / 100) < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1] + (80 * arg2 / 100)
                        emit Transfer((80 * arg2 / 100), msg.sender, arg1);
                    else:
                        if 100 < sub_8124f7ac:
                            revert with 0, 17
                        if not arg2:
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if arg2 < 0:
                                revert with 0, 17
                            if not msg.sender:
                                revert with 0, 'ERC20: burn from the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[514 len 30] >> 16, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= arg2
                            if arg2 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if totalSupply < arg2:
                                revert with 0, 17
                            totalSupply -= arg2
                            emit Transfer(arg2, msg.sender, 0);
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[678 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[arg1] > -1:
                                revert with 0, 17
                            if balanceOf[arg1] < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1]
                            emit Transfer(0, msg.sender, arg1);
                        else:
                            if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                revert with 0, 'SafeMath: multiplication overflow'
                            if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                revert with 0, 17
                            if not msg.sender:
                                revert with 0, 'ERC20: burn from the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[514 len 30] >> 16, 0
                            if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[678 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                            if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                revert with 0, 17
                            if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                            emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
        else:
            if launchTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow', 0
            if block.timestamp < launchTime:
                revert with 0, 17
            if block.timestamp - launchTime <= 48 * 24 * 3600:
                if not arg2:
                    if 0 < arg2:
                        revert with 0, 17
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if -arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < -arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] += arg2
                    if balanceOf[this.address] > !-arg2:
                        revert with 0, 17
                    if balanceOf[this.address] - arg2 < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address] - arg2
                    emit Transfer(-arg2, msg.sender, this.address);
                    if stor32[address(arg1)]:
                        if sub_f7f94376:
                            if not stor32[address(arg1)]:
                                stor18.length++
                                address(stor18[stor18.length]) = arg1
                            if not stor32[address(msg.sender)]:
                                stor18.length++
                                address(stor18[stor18.length]) = msg.sender
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if 0 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < 0:
                            revert with 0, 17
                        if balanceOf[arg1] > -1:
                            revert with 0, 17
                        if balanceOf[arg1] < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1]
                        emit Transfer(0, msg.sender, arg1);
                    else:
                        if stor32[address(msg.sender)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[arg1] > -1:
                                revert with 0, 17
                            if balanceOf[arg1] < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1]
                            emit Transfer(0, msg.sender, arg1);
                        else:
                            if 100 < sub_8124f7ac:
                                revert with 0, 17
                            if not arg2:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: burn from the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[578 len 30] >> 16, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if arg2 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if totalSupply < arg2:
                                    revert with 0, 17
                                totalSupply -= arg2
                                emit Transfer(arg2, msg.sender, 0);
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[742 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[arg1] > -1:
                                    revert with 0, 17
                                if balanceOf[arg1] < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1]
                                emit Transfer(0, msg.sender, arg1);
                            else:
                                if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: burn from the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[578 len 30] >> 16, 0
                                if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[742 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
                else:
                    if arg2 and 85 > -1 / arg2:
                        revert with 0, 17
                    if not arg2:
                        revert with 0, 18
                    if 85 * arg2 / arg2 != 85:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if 85 * arg2 / 100 < arg2:
                        revert with 0, 17
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if (85 * arg2 / 100) - arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < (85 * arg2 / 100) - arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (85 * arg2 / 100) + arg2
                    if balanceOf[this.address] > !((85 * arg2 / 100) - arg2):
                        revert with 0, 17
                    if balanceOf[this.address] + (85 * arg2 / 100) - arg2 < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address] + (85 * arg2 / 100) - arg2
                    emit Transfer(((85 * arg2 / 100) - arg2), msg.sender, this.address);
                    if stor32[address(arg1)]:
                        if sub_f7f94376:
                            if not stor32[address(arg1)]:
                                stor18.length++
                                address(stor18[stor18.length]) = arg1
                            if not stor32[address(msg.sender)]:
                                stor18.length++
                                address(stor18[stor18.length]) = msg.sender
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if 85 * arg2 / 100 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < 85 * arg2 / 100:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= 85 * arg2 / 100
                        if balanceOf[arg1] > !(85 * arg2 / 100):
                            revert with 0, 17
                        if balanceOf[arg1] + (85 * arg2 / 100) < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1] + (85 * arg2 / 100)
                        emit Transfer((85 * arg2 / 100), msg.sender, arg1);
                    else:
                        if stor32[address(msg.sender)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 85 * arg2 / 100 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 85 * arg2 / 100:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= 85 * arg2 / 100
                            if balanceOf[arg1] > !(85 * arg2 / 100):
                                revert with 0, 17
                            if balanceOf[arg1] + (85 * arg2 / 100) < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + (85 * arg2 / 100)
                            emit Transfer((85 * arg2 / 100), msg.sender, arg1);
                        else:
                            if 100 < sub_8124f7ac:
                                revert with 0, 17
                            if not arg2:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: burn from the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[578 len 30] >> 16, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if arg2 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if totalSupply < arg2:
                                    revert with 0, 17
                                totalSupply -= arg2
                                emit Transfer(arg2, msg.sender, 0);
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[742 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[arg1] > -1:
                                    revert with 0, 17
                                if balanceOf[arg1] < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1]
                                emit Transfer(0, msg.sender, arg1);
                            else:
                                if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: burn from the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[578 len 30] >> 16, 0
                                if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[742 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                    revert with 0, 17
                                if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
            else:
                if launchTime > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if block.timestamp < launchTime:
                    revert with 0, 17
                if block.timestamp - launchTime > 72 * 24 * 3600:
                    if not arg2:
                        if 0 < arg2:
                            revert with 0, 17
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if -arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[422 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < -arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] += arg2
                        if balanceOf[this.address] > !-arg2:
                            revert with 0, 17
                        if balanceOf[this.address] - arg2 < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] - arg2
                        emit Transfer(-arg2, msg.sender, this.address);
                        if stor32[address(arg1)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[arg1] > -1:
                                revert with 0, 17
                            if balanceOf[arg1] < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1]
                            emit Transfer(0, msg.sender, arg1);
                        else:
                            if stor32[address(msg.sender)]:
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[arg1] > -1:
                                    revert with 0, 17
                                if balanceOf[arg1] < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1]
                                emit Transfer(0, msg.sender, arg1);
                            else:
                                if 100 < sub_8124f7ac:
                                    revert with 0, 17
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if arg2 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2:
                                        revert with 0, 17
                                    totalSupply -= arg2
                                    emit Transfer(arg2, msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[arg1] > -1:
                                        revert with 0, 17
                                    if balanceOf[arg1] < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1]
                                    emit Transfer(0, msg.sender, arg1);
                                else:
                                    if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                    if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
                    else:
                        if arg2 and 95 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 95 * arg2 / arg2 != 95:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if 95 * arg2 / 100 < arg2:
                            revert with 0, 17
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if (95 * arg2 / 100) - arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[422 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < (95 * arg2 / 100) - arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (95 * arg2 / 100) + arg2
                        if balanceOf[this.address] > !((95 * arg2 / 100) - arg2):
                            revert with 0, 17
                        if balanceOf[this.address] + (95 * arg2 / 100) - arg2 < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + (95 * arg2 / 100) - arg2
                        emit Transfer(((95 * arg2 / 100) - arg2), msg.sender, this.address);
                        if stor32[address(arg1)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 95 * arg2 / 100 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 95 * arg2 / 100:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= 95 * arg2 / 100
                            if balanceOf[arg1] > !(95 * arg2 / 100):
                                revert with 0, 17
                            if balanceOf[arg1] + (95 * arg2 / 100) < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + (95 * arg2 / 100)
                            emit Transfer((95 * arg2 / 100), msg.sender, arg1);
                        else:
                            if stor32[address(msg.sender)]:
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 95 * arg2 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 95 * arg2 / 100:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= 95 * arg2 / 100
                                if balanceOf[arg1] > !(95 * arg2 / 100):
                                    revert with 0, 17
                                if balanceOf[arg1] + (95 * arg2 / 100) < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + (95 * arg2 / 100)
                                emit Transfer((95 * arg2 / 100), msg.sender, arg1);
                            else:
                                if 100 < sub_8124f7ac:
                                    revert with 0, 17
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if arg2 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2:
                                        revert with 0, 17
                                    totalSupply -= arg2
                                    emit Transfer(arg2, msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[arg1] > -1:
                                        revert with 0, 17
                                    if balanceOf[arg1] < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1]
                                    emit Transfer(0, msg.sender, arg1);
                                else:
                                    if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                    if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
                else:
                    if not arg2:
                        if 0 < arg2:
                            revert with 0, 17
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if -arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[422 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < -arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] += arg2
                        if balanceOf[this.address] > !-arg2:
                            revert with 0, 17
                        if balanceOf[this.address] - arg2 < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] - arg2
                        emit Transfer(-arg2, msg.sender, this.address);
                        if stor32[address(arg1)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 0 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 0:
                                revert with 0, 17
                            if balanceOf[arg1] > -1:
                                revert with 0, 17
                            if balanceOf[arg1] < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1]
                            emit Transfer(0, msg.sender, arg1);
                        else:
                            if stor32[address(msg.sender)]:
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[arg1] > -1:
                                    revert with 0, 17
                                if balanceOf[arg1] < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1]
                                emit Transfer(0, msg.sender, arg1);
                            else:
                                if 100 < sub_8124f7ac:
                                    revert with 0, 17
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if arg2 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2:
                                        revert with 0, 17
                                    totalSupply -= arg2
                                    emit Transfer(arg2, msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[arg1] > -1:
                                        revert with 0, 17
                                    if balanceOf[arg1] < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1]
                                    emit Transfer(0, msg.sender, arg1);
                                else:
                                    if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                    if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
                    else:
                        if arg2 and 90 > -1 / arg2:
                            revert with 0, 17
                        if not arg2:
                            revert with 0, 18
                        if 90 * arg2 / arg2 != 90:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if 90 * arg2 / 100 < arg2:
                            revert with 0, 17
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if (90 * arg2 / 100) - arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[422 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < (90 * arg2 / 100) - arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (90 * arg2 / 100) + arg2
                        if balanceOf[this.address] > !((90 * arg2 / 100) - arg2):
                            revert with 0, 17
                        if balanceOf[this.address] + (90 * arg2 / 100) - arg2 < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + (90 * arg2 / 100) - arg2
                        emit Transfer(((90 * arg2 / 100) - arg2), msg.sender, this.address);
                        if stor32[address(arg1)]:
                            if sub_f7f94376:
                                if not stor32[address(arg1)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = arg1
                                if not stor32[address(msg.sender)]:
                                    stor18.length++
                                    address(stor18[stor18.length]) = msg.sender
                            if not msg.sender:
                                revert with 0, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0, 'ERC20: transfer to the zero address'
                            if stor35[address(msg.sender)]:
                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                            if 90 * arg2 / 100 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < 90 * arg2 / 100:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= 90 * arg2 / 100
                            if balanceOf[arg1] > !(90 * arg2 / 100):
                                revert with 0, 17
                            if balanceOf[arg1] + (90 * arg2 / 100) < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + (90 * arg2 / 100)
                            emit Transfer((90 * arg2 / 100), msg.sender, arg1);
                        else:
                            if stor32[address(msg.sender)]:
                                if sub_f7f94376:
                                    if not stor32[address(arg1)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = arg1
                                    if not stor32[address(msg.sender)]:
                                        stor18.length++
                                        address(stor18[stor18.length]) = msg.sender
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if stor35[address(msg.sender)]:
                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                if 90 * arg2 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[518 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 90 * arg2 / 100:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= 90 * arg2 / 100
                                if balanceOf[arg1] > !(90 * arg2 / 100):
                                    revert with 0, 17
                                if balanceOf[arg1] + (90 * arg2 / 100) < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + (90 * arg2 / 100)
                                emit Transfer((90 * arg2 / 100), msg.sender, arg1);
                            else:
                                if 100 < sub_8124f7ac:
                                    revert with 0, 17
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if arg2 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2:
                                        revert with 0, 17
                                    totalSupply -= arg2
                                    emit Transfer(arg2, msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[arg1] > -1:
                                        revert with 0, 17
                                    if balanceOf[arg1] < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1]
                                    emit Transfer(0, msg.sender, arg1);
                                else:
                                    if arg2 and -sub_8124f7ac + 100 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / arg2 != -sub_8124f7ac + 100:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: burn from the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 34, 0xfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[642 len 30] >> 16, 0
                                    if balanceOf[address(msg.sender)] < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    if arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100) > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if totalSupply < arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    totalSupply = totalSupply - arg2 + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer((arg2 - ((100 * arg2) - (sub_8124f7ac * arg2) / 100)), msg.sender, 0);
                                    if sub_f7f94376:
                                        if not stor32[address(arg1)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = arg1
                                        if not stor32[address(msg.sender)]:
                                            stor18.length++
                                            address(stor18[stor18.length]) = msg.sender
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if stor35[address(msg.sender)]:
                                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                    if (100 * arg2) - (sub_8124f7ac * arg2) / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[806 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < (100 * arg2) - (sub_8124f7ac * arg2) / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= (100 * arg2) - (sub_8124f7ac * arg2) / 100
                                    if balanceOf[arg1] > !((100 * arg2) - (sub_8124f7ac * arg2) / 100):
                                        revert with 0, 17
                                    if balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + ((100 * arg2) - (sub_8124f7ac * arg2) / 100)
                                    emit Transfer(((100 * arg2) - (sub_8124f7ac * arg2) / 100), msg.sender, arg1);
    return 1
}

function sub_e7fb1a4f(?) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg1.length
    require arg1 + arg1.length + 36 <= calldata.size
    mem[128 len arg1.length] = arg1[all]
    mem[arg1.length + 128] = 0
    if arg1.length <= 3:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if arg1.length >= 32:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if not msg.sender:
        revert with 0, 'NODE CREATION:  creation from the zero address'
    if stor34[address(msg.sender)]:
        revert with 0, 'NODE CREATION: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
    if distributionPoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
    require ext_code.size(nodeRewardManagerAddress)
    staticcall nodeRewardManagerAddress.nodePrice() with:
            gas gas_remaining wei
    mem[ceil32(ceil32(arg1.length)) + 97] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
        revert with 0, 'NODE CREATION: Balance too low for creation.'
    if balanceOf[address(this.address)] < swapTokensAmount:
        if not msg.sender:
            revert with 0, 'ERC20: transfer from the zero address'
        if not this.address:
            revert with 0, 'ERC20: transfer to the zero address'
        if stor35[address(msg.sender)]:
            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
        if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
            revert with 0, 
                        32,
                        38,
                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 167 len 26] >> 48,
                        0
        if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
            revert with 0, 17
        balanceOf[address(msg.sender)] -= ext_call.return_data[0]
        if balanceOf[this.address] > !ext_call.return_data[0]:
            revert with 0, 17
        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
        emit Transfer(ext_call.return_data[0], msg.sender, this.address);
        require ext_code.size(nodeRewardManagerAddress)
        call nodeRewardManagerAddress.0xe6c5ccf2 with:
             gas gas_remaining wei
            args msg.sender, Array(len=arg1.length, data=arg1[all])
    else:
        if not uint8(stor30.field_8):
            if not msg.sender:
                revert with 0, 'ERC20: transfer from the zero address'
            if not this.address:
                revert with 0, 'ERC20: transfer to the zero address'
            if stor35[address(msg.sender)]:
                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                revert with 0, 
                            32,
                            38,
                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 167 len 26] >> 48,
                            0
            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                revert with 0, 17
            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
            if balanceOf[this.address] > !ext_call.return_data[0]:
                revert with 0, 17
            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
            require ext_code.size(nodeRewardManagerAddress)
            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                 gas gas_remaining wei
                args msg.sender, Array(len=arg1.length, data=arg1[all])
        else:
            if uint8(stor30.field_0):
                if not msg.sender:
                    revert with 0, 'ERC20: transfer from the zero address'
                if not this.address:
                    revert with 0, 'ERC20: transfer to the zero address'
                if stor35[address(msg.sender)]:
                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                38,
                                0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 167 len 26] >> 48,
                                0
                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                    revert with 0, 17
                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                if balanceOf[this.address] > !ext_call.return_data[0]:
                    revert with 0, 17
                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                require ext_code.size(nodeRewardManagerAddress)
                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                     gas gas_remaining wei
                    args msg.sender, Array(len=arg1.length, data=arg1[all])
            else:
                if owner == msg.sender:
                    if not msg.sender:
                        revert with 0, 'ERC20: transfer from the zero address'
                    if not this.address:
                        revert with 0, 'ERC20: transfer to the zero address'
                    if stor35[address(msg.sender)]:
                        revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                    if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                        revert with 0, 
                                    32,
                                    38,
                                    0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 167 len 26] >> 48,
                                    0
                    if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                    if balanceOf[this.address] > !ext_call.return_data[0]:
                        revert with 0, 17
                    if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                    emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                    require ext_code.size(nodeRewardManagerAddress)
                    call nodeRewardManagerAddress.0xe6c5ccf2 with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all])
                else:
                    if stor35[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0, 'ERC20: transfer from the zero address'
                        if not this.address:
                            revert with 0, 'ERC20: transfer to the zero address'
                        if stor35[address(msg.sender)]:
                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                        if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                            revert with 0, 
                                        32,
                                        38,
                                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 167 len 26] >> 48,
                                        0
                        if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                        if balanceOf[this.address] > !ext_call.return_data[0]:
                            revert with 0, 17
                        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                        emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                        require ext_code.size(nodeRewardManagerAddress)
                        call nodeRewardManagerAddress.0xe6c5ccf2 with:
                             gas gas_remaining wei
                            args msg.sender, Array(len=arg1.length, data=arg1[all])
                    else:
                        uint8(stor30.field_0) = 1
                        if balanceOf[address(this.address)]:
                            if balanceOf[address(this.address)] and futurFee > -1 / balanceOf[address(this.address)]:
                                revert with 0, 17
                            if not balanceOf[address(this.address)]:
                                revert with 0, 18
                            if balanceOf[address(this.address)] * futurFee / balanceOf[address(this.address)] != futurFee:
                                revert with 0, 'SafeMath: multiplication overflow'
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 97] = 26
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 129] = 'SafeMath: division by zero'
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161] = 2
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 193] = this.address
                            require ext_code.size(uniswapV2RouterAddress)
                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                    gas gas_remaining wei
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 257] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 225] = ext_call.return_data[12 len 20]
                            if not this.address:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = 32
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 36
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 'ERC20: approve from the zero add'
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                revert with memory
                                  from ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257
                                   len ceil32(return_data.size) + 132
                            if not uniswapV2RouterAddress:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = 32
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 34
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 'ERC20: approve to the zero addre'
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                revert with memory
                                  from ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257
                                   len ceil32(return_data.size) + 132
                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * futurFee / 100
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = balanceOf[address(this.address)] * futurFee / 100
                            emit Approval(mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x762b156200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = balanceOf[address(this.address)] * futurFee / 100
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 0
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 160
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 421] = 2
                            idx = 0
                            s = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 453
                            t = ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 193
                            while idx < mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161]:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = this.address
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 389] = block.timestamp
                            require ext_code.size(uniswapV2RouterAddress)
                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args balanceOf[address(this.address)] * futurFee / 100, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 421 len (32 * mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 30
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 289] = 'SafeMath: subtraction overflow'
                            if eth.balance(this.address) > eth.balance(this.address):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if eth.balance(this.address) < eth.balance(this.address):
                                revert with 0, 17
                            call futurUsePoolAddress with:
                                 gas gas_remaining wei
                            if return_data.size:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = return_data.size
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if not balanceOf[address(this.address)]:
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 322] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 354] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                    idx = 0
                                    s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                    t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                    while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 32
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 'SafeMath: subtraction overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 708] = 0
                                        revert with memory
                                          from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610
                                           len (5 * ceil32(return_data.size)) + 100
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas gas_remaining wei
                                    if not return_data.size:
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        if not distributionPoolAddress:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        if stor35[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                               len (5 * ceil32(return_data.size)) + 132
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                               len (5 * ceil32(return_data.size)) + 100
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = 0
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len (13 * ceil32(return_data.size)) + 96],
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                        mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                        t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor30.field_0) = 0
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(msg.sender)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                        if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                        if balanceOf[this.address] > !ext_call.return_data[0]:
                                            revert with 0, 17
                                        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=arg1.length, data=arg1[all])
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 611] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 643] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 37
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer from the zero ad'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if not distributionPoolAddress:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 35
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer to the zero addr'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if stor35[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 58
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'You are not permitted to transfe'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 'r more than 100,000 tokens'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 707 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 877] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 27
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1091] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                                                0,
                                                                0,
                                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1123] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1187] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1223] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1287] = 160
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415
                                            t = ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1251 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1315] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1319] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1351] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1383] = mem[96]
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])])
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 33
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: multiplication overflo'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 871] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 967] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 999] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1031] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1061] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1159] = this.address
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + -mem[64] + 1251]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10592 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10592] = 30
                                            mem[_10592 + 32] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[mem[64] + 68] = 0
                                            mem[mem[64] + 100] = 0
                                            mem[mem[64] + 132] = 0
                                            mem[mem[64] + 164] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 96
                                            mem[mem[64] + 32] = 0
                                            mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[0] = this.address
                                            mem[32] = 0
                                            _11718 = mem[64]
                                            mem[mem[64]] = 2
                                            mem[64] = mem[64] + 96
                                            mem[_11718 + 32 len 64] = call.data[calldata.size len 64]
                                            if 0 >= mem[_11718]:
                                                revert with 0, 50
                                            mem[_11718 + 32] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[_11718 + 96] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _11718 + ceil32(return_data.size) + 96
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            if 1 >= mem[_11718]:
                                                revert with 0, 50
                                            mem[_11718 + 64] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[_11718 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[_11718 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                            mem[_11718 + ceil32(return_data.size) + 132] = 0
                                            mem[_11718 + ceil32(return_data.size) + 164] = 160
                                            mem[_11718 + ceil32(return_data.size) + 260] = mem[_11718]
                                            idx = 0
                                            s = _11718 + ceil32(return_data.size) + 292
                                            t = _11718 + 32
                                            while idx < mem[_11718]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[_11718 + ceil32(return_data.size) + 196] = this.address
                                            mem[_11718 + ceil32(return_data.size) + 228] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _11718 + ceil32(return_data.size) + (32 * mem[_11718]) + -mem[64] + 288]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            mem[0] = msg.sender
                                            mem[32] = 35
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            _14428 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_14428] = 38
                                            mem[_14428 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14428 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[mem[64]] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = mem[96]
                                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 100] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 322] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 354] = 'SafeMath: division by zero'
                                    if balanceOf[address(this.address)] * rewardsFee / 100:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor29 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / balanceOf[address(this.address)] * rewardsFee / 100 != stor29:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 708] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610
                                               len (5 * ceil32(return_data.size)) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if return_data.size:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 773] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 877] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 871] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 967] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 999] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1031] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1061] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100),
                                                                    0,
                                                                    (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2),
                                                                    mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1187] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1223] = balanceOf[address(this.address)]
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415
                                            t = ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=mem[128 len ceil32(arg1.length)])
                                        else:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 772] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len (13 * ceil32(return_data.size)) + 96],
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=arg1.length, data=arg1[all])
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len (13 * ceil32(return_data.size)) + 96],
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 
                                                                'ERC20: transfer from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: transfer to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 
                                                                'You are not permitted to transfer more than 100,000 tokens',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                    revert with 0, 
                                                                32,
                                                                38,
                                                                0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420 len (17 * ceil32(return_data.size)) + 26]
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 
                                                                'SafeMath: addition overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 17 * ceil32(return_data.size)]
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                                if ceil32(arg1.length) > arg1.length:
                                                    mem[arg1.length + ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=arg1.length, data=mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len (17 * ceil32(return_data.size)) + ceil32(arg1.length)])
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 708] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610
                                               len (5 * ceil32(return_data.size)) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 772] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=arg1[all])
                                        else:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 611] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 643] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 773] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 707 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 877] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if balanceOf[address(this.address)]:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 871] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 967] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 999] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1031] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1061] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1159] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + -mem[64] + 1251]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10588 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10588] = 30
                                                mem[_10588 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11710 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11710 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11710]:
                                                    revert with 0, 50
                                                mem[_11710 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11710 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11710 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11710]:
                                                    revert with 0, 50
                                                mem[_11710 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11710 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11710 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11710 + ceil32(return_data.size) + 132] = 0
                                                mem[_11710 + ceil32(return_data.size) + 164] = 160
                                                mem[_11710 + ceil32(return_data.size) + 260] = mem[_11710]
                                                idx = 0
                                                s = _11710 + ceil32(return_data.size) + 292
                                                t = _11710 + 32
                                                while idx < mem[_11710]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_11710 + ceil32(return_data.size) + 260 len (32 * mem[_11710]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                mem[_11710 + ceil32(return_data.size) + 96] = 38
                                                mem[_11710 + ceil32(return_data.size) + 128 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[_11710 + ceil32(return_data.size) + 192] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[_11710 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_11710 + ceil32(return_data.size) + 228] = 64
                                                mem[_11710 + ceil32(return_data.size) + 260] = mem[96]
                                                mem[_11710 + ceil32(return_data.size) + 292 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _11710 + ceil32(return_data.size) + 292] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_11710 + ceil32(return_data.size) + 292 len ceil32(mem[96])])
                                            else:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1159] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + -mem[64] + 1251]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10589 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10589] = 30
                                                mem[_10589 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11712 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11712 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11712]:
                                                    revert with 0, 50
                                                mem[_11712 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11712 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11712 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11712]:
                                                    revert with 0, 50
                                                mem[_11712 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11712 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11712 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11712 + ceil32(return_data.size) + 132] = 0
                                                mem[_11712 + ceil32(return_data.size) + 164] = 160
                                                mem[_11712 + ceil32(return_data.size) + 260] = mem[_11712]
                                                idx = 0
                                                s = _11712 + ceil32(return_data.size) + 292
                                                t = _11712 + 32
                                                while idx < mem[_11712]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_11712 + ceil32(return_data.size) + 196] = this.address
                                                mem[_11712 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _11712 + ceil32(return_data.size) + (32 * mem[_11712]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14419 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14419] = 38
                                                mem[_14419 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14419 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[mem[64]] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = mem[96]
                                                mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 100] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            else:
                                require ext_call.success
                                if not balanceOf[address(this.address)]:
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                    idx = 0
                                    s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                    t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                    while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas gas_remaining wei
                                    if return_data.size:
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(this.address)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = this.address
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=arg1[all])
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = arg1.length
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                    else:
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(this.address)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 160
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1249 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = mem[96]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])])
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1249 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1419] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = mem[96]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 96]
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353] = 'SafeMath: division by zero'
                                    if balanceOf[address(this.address)] * rewardsFee / 100:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor29 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / balanceOf[address(this.address)] * rewardsFee / 100 != stor29:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if return_data.size:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=arg1.length, data=arg1[all])
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 37
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer from the zero ad'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 35
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer to the zero addr'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if stor35[address(msg.sender)]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 58
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'You are not permitted to transfe'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 'r more than 100,000 tokens'
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 38
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 27
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                       len (5 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = msg.sender
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 64
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = arg1.length
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                                if ceil32(arg1.length) > arg1.length:
                                                    mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                        else:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if balanceOf[address(this.address)]:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 160
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1249 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = msg.sender
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 64
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = mem[96]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])])
                                            else:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1157] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + -mem[64] + 1249]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10571 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10571] = 30
                                                mem[_10571 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11676 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11676 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11676]:
                                                    revert with 0, 50
                                                mem[_11676 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11676 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11676 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11676]:
                                                    revert with 0, 50
                                                mem[_11676 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11676 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11676 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11676 + ceil32(return_data.size) + 132] = 0
                                                mem[_11676 + ceil32(return_data.size) + 164] = 160
                                                mem[_11676 + ceil32(return_data.size) + 260] = mem[_11676]
                                                idx = 0
                                                s = _11676 + ceil32(return_data.size) + 292
                                                t = _11676 + 32
                                                while idx < mem[_11676]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[_11676 + ceil32(return_data.size) + 260 len (32 * mem[_11676]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                mem[_11676 + ceil32(return_data.size) + 96] = 38
                                                mem[_11676 + ceil32(return_data.size) + 128 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[_11676 + ceil32(return_data.size) + 192] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[_11676 + ceil32(return_data.size) + 196] = msg.sender
                                                mem[_11676 + ceil32(return_data.size) + 228] = 64
                                                mem[_11676 + ceil32(return_data.size) + 260] = mem[96]
                                                mem[_11676 + ceil32(return_data.size) + 292 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + _11676 + ceil32(return_data.size) + 292] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[_11676 + ceil32(return_data.size) + 292 len ceil32(mem[96])])
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if return_data.size:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = arg1.length
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                        else:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 37
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer from the zero ad'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 35
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer to the zero addr'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if stor35[address(msg.sender)]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 58
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'You are not permitted to transfe'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 'r more than 100,000 tokens'
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1249 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 38
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1419] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 27
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                       len (5 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = msg.sender
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 64
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = mem[96]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317 len ceil32(mem[96]) + (5 * ceil32(return_data.size)) + 96]
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1157] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + -mem[64] + 1249]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10574 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10574] = 30
                                                mem[_10574 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11682 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11682 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11682]:
                                                    revert with 0, 50
                                                mem[_11682 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11682 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11682 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11682]:
                                                    revert with 0, 50
                                                mem[_11682 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11682 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11682 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11682 + ceil32(return_data.size) + 132] = 0
                                                mem[_11682 + ceil32(return_data.size) + 164] = 160
                                                mem[_11682 + ceil32(return_data.size) + 260] = mem[_11682]
                                                idx = 0
                                                s = _11682 + ceil32(return_data.size) + 292
                                                t = _11682 + 32
                                                while idx < mem[_11682]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_11682 + ceil32(return_data.size) + 196] = this.address
                                                mem[_11682 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _11682 + ceil32(return_data.size) + (32 * mem[_11682]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14374 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14374] = 38
                                                mem[_14374 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14374 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[mem[64]] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = msg.sender
                                                mem[mem[64] + 36] = 64
                                                mem[mem[64] + 68] = mem[96]
                                                mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + mem[64] + 100] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                        else:
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 97] = 26
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 129] = 'SafeMath: division by zero'
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161] = 2
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 193] = this.address
                            require ext_code.size(uniswapV2RouterAddress)
                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                    gas gas_remaining wei
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 257] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 225] = ext_call.return_data[12 len 20]
                            if not this.address:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = 32
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 36
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 'ERC20: approve from the zero add'
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = 0x7265737300000000000000000000000000000000000000000000000000000000
                                revert with memory
                                  from ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257
                                   len ceil32(return_data.size) + 132
                            if not uniswapV2RouterAddress:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = 32
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 34
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 'ERC20: approve to the zero addre'
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = 0x7373000000000000000000000000000000000000000000000000000000000000
                                revert with memory
                                  from ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257
                                   len ceil32(return_data.size) + 132
                            allowance[address(this.address)][stor14].field_0 = 0
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0
                            emit Approval(mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257 len ceil32(return_data.size) + 32], this.address, uniswapV2RouterAddress);
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 0x762b156200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 261] = 0
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 293] = 0
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 325] = 160
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 421] = 2
                            idx = 0
                            s = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 453
                            t = ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 193
                            while idx < mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161]:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 357] = this.address
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 389] = block.timestamp
                            require ext_code.size(uniswapV2RouterAddress)
                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                 gas gas_remaining wei
                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 421 len (32 * mem[ceil32(ceil32(arg1.length)) + ceil32(return_data.size) + 161]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 257] = 30
                            mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 289] = 'SafeMath: subtraction overflow'
                            if eth.balance(this.address) > eth.balance(this.address):
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if eth.balance(this.address) < eth.balance(this.address):
                                revert with 0, 17
                            call futurUsePoolAddress with:
                                 gas gas_remaining wei
                            if not return_data.size:
                                require ext_call.success
                                if not balanceOf[address(this.address)]:
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                    idx = 0
                                    s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                    t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                    while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas gas_remaining wei
                                    if not return_data.size:
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(this.address)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=mem[128 len ceil32(arg1.length)])
                                        else:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1221] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1253] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1285] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1419] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1313
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1349] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1381] = arg1.length
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413 len ceil32(arg1.length)] = mem[128 len ceil32(arg1.length)]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1413] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1317 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not distributionPoolAddress:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(this.address)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            revert with 0, 
                                                        32,
                                                        38,
                                                        0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26] >> 48,
                                                        0
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = this.address
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=arg1[all])
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = arg1.length
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353] = 'SafeMath: division by zero'
                                    if balanceOf[address(this.address)] * rewardsFee / 100:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor29 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / balanceOf[address(this.address)] * rewardsFee / 100 != stor29:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 707] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609
                                               len (5 * ceil32(return_data.size)) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if return_data.size:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 772] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = 0
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len (13 * ceil32(return_data.size)) + 96],
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 
                                                            'ERC20: transfer from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: transfer to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 
                                                            'You are not permitted to transfer more than 100,000 tokens',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350 len 17 * ceil32(return_data.size)]
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420 len (17 * ceil32(return_data.size)) + 26]
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 
                                                            'SafeMath: addition overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 17 * ceil32(return_data.size)]
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len (17 * ceil32(return_data.size)) + ceil32(arg1.length)])
                                        else:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 771] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 875] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1317 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = 0
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 869] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 965] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 997] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1029] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1059] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1317 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121 len (13 * ceil32(return_data.size)) + 96],
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1253] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1285] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1381] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1381 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 
                                                            'ERC20: transfer from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349 len 17 * ceil32(return_data.size)]
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: transfer to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349 len 17 * ceil32(return_data.size)]
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 
                                                            'You are not permitted to transfer more than 100,000 tokens',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349 len 17 * ceil32(return_data.size)]
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1419] = 0
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48,
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1419 len (17 * ceil32(return_data.size)) + 26]
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 
                                                            'SafeMath: addition overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413 len 17 * ceil32(return_data.size)]
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413 len ceil32(arg1.length)] = mem[128 len ceil32(arg1.length)]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413 len (17 * ceil32(return_data.size)) + ceil32(arg1.length)])
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 385] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 417] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 513] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 549] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 581] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 481
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 449]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 545] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 577] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 613] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 645] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 707] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609
                                               len (5 * ceil32(return_data.size)) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if return_data.size:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 772] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=arg1[all])
                                        else:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 609] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 641] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 771] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 677] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 709] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 741] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673
                                                   len (5 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 673] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 705 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 743 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 875] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1317 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121 len (13 * ceil32(return_data.size)) + 96],
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1285] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1381] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1317] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]) + -mem[64] + 1409]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14449 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14449] = 38
                                                mem[_14449 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14449 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 773] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 805] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 837] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 869] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769
                                                       len (5 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 769] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 801] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 833] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 865] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 897] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 929] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 965] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 997] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1029] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1059] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1057] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 1025] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1061] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1093] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1125] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 993
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + 961]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1057] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1089] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1219 len (9 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253 len 9 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1189] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1221] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1285] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1317 len 9 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + 1121 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121 len (13 * ceil32(return_data.size)) + 96],
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1217] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1185] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1217] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1253] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1285] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1381] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1413
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1153
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1317] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1349] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1121]) + -mem[64] + 1409]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14446 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14446] = 38
                                                mem[_14446 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14446 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            ('le', ('ext_call.return_data', 0, 32), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[mem[64]] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = mem[96]
                                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 100] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            else:
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 321] = return_data.size
                                mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + 353 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                require ext_call.success
                                if not balanceOf[address(this.address)]:
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 322] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 354] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WAVAX() with:
                                            gas gas_remaining wei
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor14].field_0 = 0
                                    emit Approval(0, this.address, uniswapV2RouterAddress);
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                    idx = 0
                                    s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                    t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                    while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 32
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 'SafeMath: subtraction overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 708] = 0
                                        revert with memory
                                          from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610
                                           len (5 * ceil32(return_data.size)) + 100
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 0, 17
                                    call distributionPoolAddress with:
                                         gas gas_remaining wei
                                    if not return_data.size:
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        if not distributionPoolAddress:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        if stor35[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                               len (5 * ceil32(return_data.size)) + 132
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                               len (5 * ceil32(return_data.size)) + 132
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                               len (5 * ceil32(return_data.size)) + 100
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = this.address
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                        else:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                            t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1220 len (9 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254 len 9 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len 9 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = 0
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len (13 * ceil32(return_data.size)) + 96],
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor30.field_0) = 0
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(msg.sender)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                        if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                        if balanceOf[this.address] > !ext_call.return_data[0]:
                                            revert with 0, 17
                                        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=arg1.length, data=arg1[all])
                                    else:
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        require ext_call.success
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 611] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 643] = 'SafeMath: subtraction overflow'
                                        if not this.address:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 37
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer from the zero ad'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if not distributionPoolAddress:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 35
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer to the zero addr'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if stor35[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 58
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'You are not permitted to transfe'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 'r more than 100,000 tokens'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 707 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if 0 > balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 877] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                        if balanceOf[address(this.address)] < 0:
                                            revert with 0, 17
                                        if balanceOf[stor17] > -1:
                                            revert with 0, 17
                                        if balanceOf[stor17] < balanceOf[stor17]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 27
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                               len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                        balanceOf[stor17] = balanceOf[stor17]
                                        emit Transfer(0, this.address, distributionPoolAddress);
                                        if not balanceOf[address(this.address)]:
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1091] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = 0
                                            emit Approval(0, this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                0,
                                                                0,
                                                                0,
                                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                        else:
                                            if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                revert with 0, 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 0, 18
                                            if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 33
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: multiplication overflo'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 871] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 967] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 999] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1031] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1061] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                revert with 0, 17
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            allowance[address(this.address)][stor14].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                            while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1091] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                revert with 0, 
                                                            'SafeMath: subtraction overflow',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 
                                                            'ERC20: approve from the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 
                                                            'ERC20: approve to the zero address',
                                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                            allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                            mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100),
                                                                0,
                                                                (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2),
                                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                        mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1123] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1187] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                        emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1223] = balanceOf[address(this.address)]
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1287] = 160
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415
                                        t = ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155
                                        while idx < 2:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        uint8(stor30.field_0) = 0
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if stor35[address(msg.sender)]:
                                            revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 38
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1251 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                        if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                        if balanceOf[this.address] > !ext_call.return_data[0]:
                                            revert with 0, 17
                                        if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1315] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1319] = msg.sender
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1351] = 64
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1383] = mem[96]
                                        mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                        if ceil32(mem[96]) > mem[96]:
                                            mem[mem[96] + ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415] = 0
                                        require ext_code.size(nodeRewardManagerAddress)
                                        call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=mem[96], data=mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])])
                                else:
                                    if balanceOf[address(this.address)] and rewardsFee > -1 / balanceOf[address(this.address)]:
                                        revert with 0, 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 0, 18
                                    if balanceOf[address(this.address)] * rewardsFee / balanceOf[address(this.address)] != rewardsFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 322] = 26
                                    mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 354] = 'SafeMath: division by zero'
                                    if not balanceOf[address(this.address)] * rewardsFee / 100:
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = 0
                                        emit Approval(0, this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 32
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 'SafeMath: subtraction overflow'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 708] = 0
                                            revert with memory
                                              from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610
                                               len (5 * ceil32(return_data.size)) + 100
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if not return_data.size:
                                            require ext_call.success
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 772] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 876] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 774] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 806] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 838] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 870] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770
                                                       len (5 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 966] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 998] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1030] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1060] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962
                                                       len (5 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1158] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                                t = ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len (32 * mem[ceil32(ceil32(arg1.length)) + (7 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(msg.sender)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=arg1.length, data=arg1[all])
                                        else:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 611] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 643] = 'SafeMath: subtraction overflow'
                                            if 0 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 773] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < 0:
                                                revert with 0, 17
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if not distributionPoolAddress:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if stor35[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 679] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 711] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 743] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 707 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if balanceOf[address(this.address)] * rewardsFee / 100 > balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 877] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 17
                                            balanceOf[address(this.address)] -= balanceOf[address(this.address)] * rewardsFee / 100
                                            if balanceOf[stor17] > !(balanceOf[address(this.address)] * rewardsFee / 100):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) < balanceOf[stor17]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                   len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                            balanceOf[stor17] += balanceOf[address(this.address)] * rewardsFee / 100
                                            emit Transfer((balanceOf[address(this.address)] * rewardsFee / 100), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1187] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1223] = balanceOf[address(this.address)]
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415
                                                t = ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=arg1.length, data=mem[128 len ceil32(arg1.length)])
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 775] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 807] = 33
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 839] = 'SafeMath: multiplication overflo'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 871] = 0x7700000000000000000000000000000000000000000000000000000000000000
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 967] = 32
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 999] = 30
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1031] = 'SafeMath: subtraction overflow'
                                                    mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1061] = 0
                                                    revert with memory
                                                      from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963
                                                       len (9 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223 len (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1091] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221] = 0
                                                    revert with 0, 
                                                                'SafeMath: subtraction overflow',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1221 len (17 * ceil32(return_data.size)) + 2]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 
                                                                'ERC20: approve from the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 
                                                                'ERC20: approve to the zero address',
                                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255 len 17 * ceil32(return_data.size)]
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1287] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp, mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1319 len 17 * ceil32(return_data.size)]
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1123 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100),
                                                                    0,
                                                                    (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2),
                                                                    mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219 len 20 * ceil32(return_data.size)],
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1123] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1219] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1187] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1223] = balanceOf[address(this.address)]
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1287] = 160
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415
                                                t = ceil32(ceil32(arg1.length)) + (12 * ceil32(return_data.size)) + 1155
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1219] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1251 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0 >> 48, 0
                                                if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                                if balanceOf[this.address] > !ext_call.return_data[0]:
                                                    revert with 0, 17
                                                if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                                emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1315] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1319] = msg.sender
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1351] = 64
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1383] = mem[96]
                                                mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                                if ceil32(mem[96]) > mem[96]:
                                                    mem[mem[96] + ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415] = 0
                                                require ext_code.size(nodeRewardManagerAddress)
                                                call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                     gas gas_remaining wei
                                                    args msg.sender, Array(len=mem[96], data=mem[ceil32(ceil32(arg1.length)) + (13 * ceil32(return_data.size)) + 1415 len ceil32(mem[96])])
                                    else:
                                        if balanceOf[address(this.address)] * rewardsFee / 100 and stor29 > -1 / balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 17
                                        if not balanceOf[address(this.address)] * rewardsFee / 100:
                                            revert with 0, 18
                                        if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / balanceOf[address(this.address)] * rewardsFee / 100 != stor29:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 386] = 26
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 418] = 'SafeMath: division by zero'
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450] = 2
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WAVAX() with:
                                                gas gas_remaining wei
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 514] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        emit Approval((balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 550] = balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 582] = 0
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 614] = 160
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710] = 2
                                        idx = 0
                                        s = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 742
                                        t = ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 482
                                        while idx < mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 646] = this.address
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 678] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 710 len (32 * mem[ceil32(ceil32(arg1.length)) + (2 * ceil32(return_data.size)) + ceil32(return_data.size) + 450]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 546] = 30
                                        mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 578] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 0, 17
                                        call distributionPoolAddress with:
                                             gas gas_remaining wei
                                        if not return_data.size:
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 674] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 706 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 744 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 770] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 802] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 834] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 866] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 898] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 930] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 1026] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1062] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1094] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1126] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254
                                                t = ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 994
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222 len (32 * mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 962]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1058] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1090] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1190] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                mem[ceil32(ceil32(arg1.length)) + (6 * ceil32(return_data.size)) + ceil32(return_data.size) + 1122 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WAVAX() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1186] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                            emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = balanceOf[address(this.address)]
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 2
                                            idx = 0
                                            s = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414
                                            t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1154
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            uint8(stor30.field_0) = 0
                                            if not msg.sender:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 37
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer from the zero ad'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6472657373000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if not this.address:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 35
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'ERC20: transfer to the zero addr'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 0x6573730000000000000000000000000000000000000000000000000000000000
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if stor35[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1222] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1254] = 58
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1286] = 'You are not permitted to transfe'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 'r more than 100,000 tokens'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1218
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 38
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, 0
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1420] = 0
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = 32
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 27
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1314
                                                   len (5 * ceil32(return_data.size)) + 100
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318] = msg.sender
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1350] = 64
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1382] = arg1.length
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                                            if ceil32(arg1.length) > arg1.length:
                                                mem[arg1.length + ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1414] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + ceil32(return_data.size) + 1318 len ceil32(arg1.length) + (5 * ceil32(return_data.size)) + 96]
                                        else:
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 610] = return_data.size
                                            mem[ceil32(ceil32(arg1.length)) + (4 * ceil32(return_data.size)) + ceil32(return_data.size) + 642 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            require ext_call.success
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 611] = 30
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 643] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100 > balanceOf[address(this.address)] * rewardsFee / 100:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * rewardsFee / 100 < balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100:
                                                revert with 0, 17
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not distributionPoolAddress:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if stor35[address(this.address)]:
                                                revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 675] = 38
                                            mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 707 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) > balanceOf[address(this.address)]:
                                                revert with 0, 
                                                            32,
                                                            38,
                                                            0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 745 len 26] >> 48,
                                                            0
                                            if balanceOf[address(this.address)] < (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100):
                                                revert with 0, 17
                                            balanceOf[address(this.address)] = balanceOf[address(this.address)] - (balanceOf[address(this.address)] * rewardsFee / 100) + (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            if balanceOf[stor17] > !((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)):
                                                revert with 0, 17
                                            if balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100) < balanceOf[stor17]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[stor17] = balanceOf[stor17] + (balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)
                                            emit Transfer(((balanceOf[address(this.address)] * rewardsFee / 100) - (balanceOf[address(this.address)] * rewardsFee / 100 * stor29 / 100)), this.address, distributionPoolAddress);
                                            if not balanceOf[address(this.address)]:
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1159] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + -mem[64] + 1251]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10609 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10609] = 30
                                                mem[_10609 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = 0
                                                emit Approval(0, this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, 0, 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = 0
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    0,
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11752 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11752 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11752]:
                                                    revert with 0, 50
                                                mem[_11752 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11752 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11752 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11752]:
                                                    revert with 0, 50
                                                mem[_11752 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11752 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11752 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11752 + ceil32(return_data.size) + 132] = 0
                                                mem[_11752 + ceil32(return_data.size) + 164] = 160
                                                mem[_11752 + ceil32(return_data.size) + 260] = mem[_11752]
                                                idx = 0
                                                s = _11752 + ceil32(return_data.size) + 292
                                                t = _11752 + 32
                                                while idx < mem[_11752]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_11752 + ceil32(return_data.size) + 196] = this.address
                                                mem[_11752 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _11752 + ceil32(return_data.size) + (32 * mem[_11752]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14479 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14479] = 38
                                                mem[_14479 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14479 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            else:
                                                if balanceOf[address(this.address)] and liquidityPoolFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 0, 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 0, 18
                                                if balanceOf[address(this.address)] * liquidityPoolFee / balanceOf[address(this.address)] != liquidityPoolFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 771] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 803] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 835] = 26
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 867] = 'SafeMath: division by zero'
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 899] = 30
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 931] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2 > balanceOf[address(this.address)] * liquidityPoolFee / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityPoolFee / 100 < balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2:
                                                    revert with 0, 17
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963] = 2
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1059] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 1027] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                allowance[address(this.address)][stor14].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1059] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1063] = balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1095] = 0
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1127] = 160
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1223] = 2
                                                idx = 0
                                                s = ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1255
                                                t = ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 995
                                                while idx < mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1159] = this.address
                                                mem[ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + 1191] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len ceil32(ceil32(arg1.length)) + (10 * ceil32(return_data.size)) + (32 * mem[ceil32(ceil32(arg1.length)) + (8 * ceil32(return_data.size)) + 963]) + -mem[64] + 1251]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _10608 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_10608] = 30
                                                mem[_10608 + 32] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 0, 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[mem[64] + 68] = 0
                                                mem[mem[64] + 100] = 0
                                                mem[mem[64] + 132] = 0
                                                mem[mem[64] + 164] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 96
                                                mem[mem[64] + 32] = 0
                                                mem[mem[64] + 64] = (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2)
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[address(this.address)] * liquidityPoolFee / 100), 0, (balanceOf[address(this.address)] * liquidityPoolFee / 100) - (balanceOf[address(this.address)] * liquidityPoolFee / 100 / 2));
                                                mem[0] = this.address
                                                mem[32] = 0
                                                _11750 = mem[64]
                                                mem[mem[64]] = 2
                                                mem[64] = mem[64] + 96
                                                mem[_11750 + 32 len 64] = call.data[calldata.size len 64]
                                                if 0 >= mem[_11750]:
                                                    revert with 0, 50
                                                mem[_11750 + 32] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WAVAX() with:
                                                        gas gas_remaining wei
                                                mem[_11750 + 96] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _11750 + ceil32(return_data.size) + 96
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                if 1 >= mem[_11750]:
                                                    revert with 0, 50
                                                mem[_11750 + 64] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor14].field_0 = balanceOf[address(this.address)]
                                                emit Approval(balanceOf[address(this.address)], this.address, uniswapV2RouterAddress);
                                                mem[_11750 + ceil32(return_data.size) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                                                mem[_11750 + ceil32(return_data.size) + 100] = balanceOf[address(this.address)]
                                                mem[_11750 + ceil32(return_data.size) + 132] = 0
                                                mem[_11750 + ceil32(return_data.size) + 164] = 160
                                                mem[_11750 + ceil32(return_data.size) + 260] = mem[_11750]
                                                idx = 0
                                                s = _11750 + ceil32(return_data.size) + 292
                                                t = _11750 + 32
                                                while idx < mem[_11750]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[_11750 + ceil32(return_data.size) + 196] = this.address
                                                mem[_11750 + ceil32(return_data.size) + 228] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len _11750 + ceil32(return_data.size) + (32 * mem[_11750]) + -mem[64] + 288]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                uint8(stor30.field_0) = 0
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                mem[0] = msg.sender
                                                mem[32] = 35
                                                if stor35[address(msg.sender)]:
                                                    revert with 0, 'You are not permitted to transfer more than 100,000 tokens'
                                                _14476 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14476] = 38
                                                mem[_14476 + 32 len 38] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if ext_call.return_data[0] > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0x6545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14476 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            ('le', ('ext_call.return_data', 0, 32), ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', 'balanceOf', 0))))
                                            if balanceOf[address(msg.sender)] < ext_call.return_data[0]:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= ext_call.return_data[0]
                                            if balanceOf[this.address] > !ext_call.return_data[0]:
                                                revert with 0, 17
                                            if balanceOf[this.address] + ext_call.return_data[0] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + ext_call.return_data[0]
                                            emit Transfer(ext_call.return_data[0], msg.sender, this.address);
                                            mem[mem[64]] = 0xe6c5ccf200000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = msg.sender
                                            mem[mem[64] + 36] = 64
                                            mem[mem[64] + 68] = mem[96]
                                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                                            if ceil32(mem[96]) > mem[96]:
                                                mem[mem[96] + mem[64] + 100] = 0
                                            require ext_code.size(nodeRewardManagerAddress)
                                            call nodeRewardManagerAddress.0xe6c5ccf2 with:
                                                 gas gas_remaining wei
                                                args msg.sender, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}



}
