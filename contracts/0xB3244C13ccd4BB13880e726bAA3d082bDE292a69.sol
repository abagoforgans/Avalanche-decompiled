contract main {




// =====================  Runtime code  =====================


#
#  - sub_2096879b(?)
#
address owner;
uint256 totalShares;
uint256 totalReleased;
mapping of uint256 shares;
mapping of uint256 released;
array of address payee;
mapping of uint256 totalReleased;
mapping of uint256 released;
address sub_e5888867Address;
address sub_fba94647Address;
address sub_28ec092eAddress;
address sub_2dcdd4f0Address;
address zeusAddress;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
address futurUsePoolAddress;
address distributionPoolAddress;
address sub_b18d9840Address;
address tokenAddress;
address deadWalletAddress;
address sub_b12cbc76Address;
uint256 rewardsFee;
uint256 liquidityPoolFee;
uint256 futurFee;
uint256 totalFees;
uint256 sub_8700ee59;
uint256 cashoutFee;
uint256 stor28;
uint8 stor29;
uint8 stor29; offset 8
uint256 stor29; offset 8
uint256 swapTokensAmount;
mapping of uint256 walletBalances;
mapping of uint8 stor32;
mapping of uint8 stor33;
mapping of uint256 sub_c7e17a17;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function _isBlacklisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor32[arg1])
}

function sub_28ec092e(?) {
    return sub_28ec092eAddress
}

function rewardsFee() {
    return rewardsFee
}

function sub_2dcdd4f0(?) {
    return sub_2dcdd4f0Address
}

function totalShares() {
    return totalShares
}

function released(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return released[address(arg1)][address(arg2)]
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function liquidityPoolFee() {
    return liquidityPoolFee
}

function swapTokensAmount() {
    return swapTokensAmount
}

function Zeus() {
    return zeusAddress
}

function cashoutFee() {
    return cashoutFee
}

function walletBalances(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return walletBalances[arg1]
}

function deadWallet() {
    return deadWalletAddress
}

function sub_8700ee59(?) {
    return sub_8700ee59
}

function payee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if arg1 >= payee.length:
        revert with 0, 50
    return payee[arg1]
}

function owner() {
    return owner
}

function released(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return released[address(arg1)]
}

function futurUsePool() {
    return futurUsePoolAddress
}

function futurFee() {
    return futurFee
}

function sub_b12cbc76(?) {
    return sub_b12cbc76Address
}

function sub_b18d9840(?) {
    return sub_b18d9840Address
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor33[arg1])
}

function distributionPool() {
    return distributionPoolAddress
}

function sub_c7e17a17(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_c7e17a17[arg1]
}

function shares(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return shares[address(arg1)]
}

function totalReleased(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return totalReleased[address(arg1)]
}

function totalReleased() {
    return totalReleased
}

function sub_e5888867(?) {
    return sub_e5888867Address
}

function sub_fba94647(?) {
    return sub_fba94647Address
}

function token() {
    return tokenAddress
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function sub_df3b9053(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_8700ee59 = arg1
}

function updateRwSwapFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor28 = arg1
}

function updateCashoutFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    cashoutFee = arg1
}

function updateSwapTokensAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    swapTokensAmount = arg1
}

function updateFuturWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurUsePoolAddress = arg1
}

function sub_913a0aa6(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_b18d9840Address = address(arg1)
}

function sub_92662bc7(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_b12cbc76Address = address(arg1)
}

function updateRewardsWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    distributionPoolAddress = arg1
}

function changeSwapLiquify(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor29.field_8) = Mask(248, 0, arg1)
}

function blacklistMalicious(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor32[address(arg1)] = uint8(arg2)
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    staticcall tokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function sub_c77d6a3d(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not -uint32(arg2):
        sub_fba94647Address = address(arg1)
    if not -uint32(arg2) + 1:
        sub_28ec092eAddress = address(arg1)
    if not -uint32(arg2) + 2:
        sub_2dcdd4f0Address = address(arg1)
    if not -uint32(arg2) + 3:
        sub_e5888867Address = address(arg1)
}

function boostReward(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 <= eth.balance(this.address):
        call owner with:
           value arg1 wei
             gas 2300 * is_zero(value) wei
    else:
        call owner with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function updateLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityPoolFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + arg1 > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + arg1 + futurFee
}

function updateRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    rewardsFee = arg1
    if arg1 > !liquidityPoolFee:
        revert with 0, 17
    if arg1 + liquidityPoolFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + liquidityPoolFee > !futurFee:
        revert with 0, 17
    if futurFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = arg1 + liquidityPoolFee + futurFee
}

function updateFuturFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    futurFee = arg1
    if rewardsFee > !liquidityPoolFee:
        revert with 0, 17
    if rewardsFee + liquidityPoolFee < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    if rewardsFee + liquidityPoolFee > !arg1:
        revert with 0, 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + liquidityPoolFee + arg1
}

function sub_e60cfa5e(?) {
    require calldata.size - 4 >= 32
    if arg1 > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args msg.sender, address(this.address), 10^18 * arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if walletBalances[address(msg.sender)] > !arg1:
        revert with 0, 17
    walletBalances[address(msg.sender)] += arg1
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1 - uniswapV2PairAddress:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'
    if not bool(stor33[address(arg1)]) - arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'TKN: Automated market maker pair is already set to that value'
    stor33[address(arg1)] = uint8(arg2)
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1 - uniswapV2RouterAddress:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TKN: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    staticcall uniswapV2RouterAddress.0x73b295c2 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
}

function release(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not shares[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    if eth.balance(this.address) > !totalReleased:
        revert with 0, 17
    if eth.balance(this.address) + totalReleased and shares[address(arg1)] > -1 / eth.balance(this.address) + totalReleased:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares < released[address(arg1)]:
        revert with 0, 17
    if not -((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) + released[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)] > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    released[address(arg1)] = (eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares
    if totalReleased > !(((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]
    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0, 'Address: insufficient balance'
    call arg1 with:
       value ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)] wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit PaymentReleased(address(arg1), ((eth.balance(this.address) * shares[address(arg1)]) + (totalReleased * shares[address(arg1)]) / totalShares) - released[address(arg1)]);
}

function sub_c7533fee(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call 0x0._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_fba94647Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
}

function sub_259b2794(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x27b3bf11 with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_2dca7264(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x613ff46f with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_c2802fbe(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0x8a327eaa with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_df26f1a1(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8527aef with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.0xb8527aef with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_563a624b(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.autoDistri() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.autoDistri() with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    return bool(ext_call.return_data[0])
}

function sub_f2d252d6(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call 0x0._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_fba94647Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address._distributeRewards() with:
                         gas gas_remaining wei
                else:
                    call sub_e5888867Address._distributeRewards() with:
                         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
}

function sub_eed035a7(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.gasForDistribution() with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_b88104fd(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                            gas gas_remaining wei
                else:
                    staticcall sub_e5888867Address.lastDistributionCount() with:
                            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_b7a0b098(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0xb8c7a1a2 with:
                            gas gas_remaining wei
                           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_8bdaa265(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint32(arg2)
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall 0x0.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_fba94647Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x139fae2c with:
                            gas gas_remaining wei
                           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_fb184a27(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint32(arg2)
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall 0x0.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_fba94647Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x4491a7e4 with:
                            gas gas_remaining wei
                           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_f4fbdc44(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall 0x0.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_fba94647Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
                else:
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_56e6f075(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call 0x0.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_fba94647Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0xd2b6fc4c with:
                         gas gas_remaining wei
                        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'Not enough funds to withdraw'
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args distributionPoolAddress, msg.sender, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_13c189a4(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xd1871a89 with:
                         gas gas_remaining wei
                        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_4cf16875(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0x9a037aa0 with:
                         gas gas_remaining wei
                        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_82a7ef5c(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xc6faedc8 with:
                         gas gas_remaining wei
                        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_bf9b81b4(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xcece91eb with:
                         gas gas_remaining wei
                        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_13455a88(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                         gas gas_remaining wei
                        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_8a02b1dd(?) {
    require calldata.size - 4 >= 64
    require arg1 == bool(arg1)
    require arg2 == uint32(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(0)
                    call 0x0._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
            else:
                if -uint32(arg2) + 3:
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
                else:
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                         gas gas_remaining wei
                        args bool(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_684b6741(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor32[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < 100:
        revert with 0, 'Nodes less than 100'
    if not sub_c7e17a17[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if sub_c7e17a17[address(msg.sender)] < sub_c7e17a17[address(msg.sender)]:
        revert with 0, 17
    sub_c7e17a17[address(msg.sender)] = 0
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args distributionPoolAddress, msg.sender, sub_c7e17a17[address(msg.sender)]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_77150ca8(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'MANIA CSHT:  creation from the zero address'
    if stor32[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call 0x0.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_fba94647Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    call sub_28ec092eAddress.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
            else:
                if -uint32(arg1) + 3:
                    call sub_2dcdd4f0Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
                else:
                    call sub_e5888867Address.0x5c298b1c with:
                         gas gas_remaining wei
                        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if ext_call.return_data[0] <= 0:
        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
    if uint8(stor29.field_8):
        call tokenAddress.0x23b872dd with:
             gas gas_remaining wei
            args distributionPoolAddress, sub_b12cbc76Address, ext_call.return_data[32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if ext_call.return_data[32] > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if ext_call.return_data[0] < ext_call.return_data[32]:
        revert with 0, 17
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args distributionPoolAddress, msg.sender, ext_call.return_data[0] - ext_call.return_data[32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function release(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not shares[address(arg2)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    mem[100] = this.address
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !totalReleased[address(arg1)]:
        revert with 0, 17
    if ext_call.return_data[0] + totalReleased[address(arg1)] and shares[address(arg2)] > -1 / ext_call.return_data[0] + totalReleased[address(arg1)]:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares < released[address(arg1)][address(arg2)]:
        revert with 0, 17
    if not -((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) + released[address(arg1)][address(arg2)]:
        revert with 0, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)][address(arg2)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    released[address(arg1)][address(arg2)] = (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares
    if totalReleased[address(arg1)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    totalReleased[address(arg1)] = totalReleased[address(arg1)] + ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 132] = arg2
    mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196] = 32
    mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0
    mem[ceil32(return_data.size) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
            if not mem[ceil32(return_data.size) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit ERC20PaymentReleased(address(arg2), ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], arg1);
}

function sub_9b41056c(?) {
    require calldata.size - 4 >= 64
    require arg2 == uint32(arg2)
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT:  creation from the zero address'
    if stor32[address(msg.sender)]:
        revert with 0, 'MANIA CSHT: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    if distributionPoolAddress == msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CSHT: futur and rewardsPool cannot cashout rewards'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    call 0x0.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
            else:
                if -uint32(arg2) + 3:
                    call sub_2dcdd4f0Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    call sub_28ec092eAddress.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
            else:
                if -uint32(arg2) + 3:
                    call sub_2dcdd4f0Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    call sub_fba94647Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
            else:
                if -uint32(arg2) + 3:
                    call sub_2dcdd4f0Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    call sub_28ec092eAddress.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
            else:
                if -uint32(arg2) + 3:
                    call sub_2dcdd4f0Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
                else:
                    call sub_e5888867Address.0x6edb7002 with:
                         gas gas_remaining wei
                        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if ext_call.return_data[0] <= 0:
        revert with 0, 'CSHT: You don't have enough reward to cash out'
    if uint8(stor29.field_8):
        call tokenAddress.0x23b872dd with:
             gas gas_remaining wei
            args distributionPoolAddress, sub_b12cbc76Address, ext_call.return_data[32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if ext_call.return_data[32] > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if ext_call.return_data[0] < ext_call.return_data[32]:
        revert with 0, 17
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args distributionPoolAddress, msg.sender, ext_call.return_data[0] - ext_call.return_data[32]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_ebc77991(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall 0x0.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall 0x0.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
            else:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
            else:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_fba94647Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_fba94647Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
            else:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
            else:
                if -uint32(arg1) + 3:
                    if -uint32(arg1) + 2:
                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
                else:
                    if -uint32(arg1) + 2:
                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                gas gas_remaining wei
                    else:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_a5e1d73f(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall 0x0.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_28ec092eAddress.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
    else:
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_fba94647Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_fba94647Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
        else:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall sub_28ec092eAddress.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_28ec092eAddress.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
            else:
                if -uint32(arg1) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_2dcdd4f0Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
                else:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    staticcall sub_e5888867Address.0x619a635e with:
                            gas gas_remaining wei
                           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_5dcdbb35(?) {
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require calldata.size > cd[4] + 35
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 4).length) + 97
    mem[96] = ('cd', 4).length
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    s = 128
    idx = cd[4] + 36
    while idx < cd[4] + (32 * ('cd', 4).length) + 36:
        mem[s] = cd[idx]
        s = s + 32
        idx = idx + 32
        continue 
    require cd[36] == uint32(cd[36])
    if -uint32(cd[36]):
        if -uint32(cd[36]) + 1:
            if -uint32(cd[36]) + 2:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _466 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call 0x0.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _466
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _514 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_514]:
                            revert with 0, 17
                        if mem[_514] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_514] > !mem[_514 + 32]:
                            revert with 0, 17
                        if mem[_514] + mem[_514 + 32] < mem[_514]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _468 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _468
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _515 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_515]:
                            revert with 0, 17
                        if mem[_515] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_515] > !mem[_515 + 32]:
                            revert with 0, 17
                        if mem[_515] + mem[_515 + 32] < mem[_515]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _470 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_2dcdd4f0Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _470
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _516 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_516]:
                            revert with 0, 17
                        if mem[_516] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_516] > !mem[_516 + 32]:
                            revert with 0, 17
                        if mem[_516] + mem[_516 + 32] < mem[_516]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _472 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _472
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _517 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_517]:
                            revert with 0, 17
                        if mem[_517] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_517] > !mem[_517 + 32]:
                            revert with 0, 17
                        if mem[_517] + mem[_517 + 32] < mem[_517]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
        else:
            if -uint32(cd[36]) + 2:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _474 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_28ec092eAddress.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _474
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _518 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_518]:
                            revert with 0, 17
                        if mem[_518] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_518] > !mem[_518 + 32]:
                            revert with 0, 17
                        if mem[_518] + mem[_518 + 32] < mem[_518]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _476 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _476
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _519 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_519]:
                            revert with 0, 17
                        if mem[_519] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_519] > !mem[_519 + 32]:
                            revert with 0, 17
                        if mem[_519] + mem[_519 + 32] < mem[_519]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _478 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_2dcdd4f0Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _478
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _520 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_520]:
                            revert with 0, 17
                        if mem[_520] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_520] > !mem[_520 + 32]:
                            revert with 0, 17
                        if mem[_520] + mem[_520 + 32] < mem[_520]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _480 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _480
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _521 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_521]:
                            revert with 0, 17
                        if mem[_521] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_521] > !mem[_521 + 32]:
                            revert with 0, 17
                        if mem[_521] + mem[_521 + 32] < mem[_521]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
    else:
        if -uint32(cd[36]) + 1:
            if -uint32(cd[36]) + 2:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _482 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_fba94647Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _482
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _522 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_522]:
                            revert with 0, 17
                        if mem[_522] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_522] > !mem[_522 + 32]:
                            revert with 0, 17
                        if mem[_522] + mem[_522 + 32] < mem[_522]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _484 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _484
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _523 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_523]:
                            revert with 0, 17
                        if mem[_523] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_523] > !mem[_523 + 32]:
                            revert with 0, 17
                        if mem[_523] + mem[_523 + 32] < mem[_523]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _486 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_2dcdd4f0Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _486
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _524 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_524]:
                            revert with 0, 17
                        if mem[_524] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_524] > !mem[_524 + 32]:
                            revert with 0, 17
                        if mem[_524] + mem[_524 + 32] < mem[_524]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _488 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _488
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _525 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_525]:
                            revert with 0, 17
                        if mem[_525] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_525] > !mem[_525 + 32]:
                            revert with 0, 17
                        if mem[_525] + mem[_525 + 32] < mem[_525]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
        else:
            if -uint32(cd[36]) + 2:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _490 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_28ec092eAddress.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _490
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _526 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_526]:
                            revert with 0, 17
                        if mem[_526] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_526] > !mem[_526 + 32]:
                            revert with 0, 17
                        if mem[_526] + mem[_526 + 32] < mem[_526]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _492 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _492
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _527 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_527]:
                            revert with 0, 17
                        if mem[_527] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_527] > !mem[_527 + 32]:
                            revert with 0, 17
                        if mem[_527] + mem[_527 + 32] < mem[_527]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                if -uint32(cd[36]) + 3:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _494 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_2dcdd4f0Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _494
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _528 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_528]:
                            revert with 0, 17
                        if mem[_528] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_528] > !mem[_528 + 32]:
                            revert with 0, 17
                        if mem[_528] + mem[_528 + 32] < mem[_528]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    idx = 0
                    while idx < ('cd', 4).length:
                        if idx >= mem[96]:
                            revert with 0, 50
                        _496 = mem[(32 * idx) + 128]
                        mem[mem[64] + 36] = mem[(32 * idx) + 128]
                        call sub_e5888867Address.0x6edb7002 with:
                             gas gas_remaining wei
                            args msg.sender, _496
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _529 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        if 0 > !mem[_529]:
                            revert with 0, 17
                        if mem[_529] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if mem[_529] > !mem[_529 + 32]:
                            revert with 0, 17
                        if mem[_529] + mem[_529 + 32] < mem[_529]:
                            revert with 0, 'SafeMath: addition overflow'
                        if not idx + 1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
    walletBalances[address(msg.sender)] = 0
}

function sub_a2c89bfb(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    mem[96] = 0x41a0894d00000000000000000000000000000000000000000000000000000000
    mem[100] = msg.sender
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if -uint32(arg1) + 3:
                    staticcall 0x0.0x41a0894d with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + 96
                    require return_data.size >= 32
                    _37 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                    _57 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                    if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
                    mem[ceil32(return_data.size) + 96] = _57
                    require _37 + (32 * _57) + 32 <= return_data.size
                    s = ceil32(return_data.size) + 128
                    idx = _37 + 128
                    while idx < _37 + (32 * _57) + 128:
                        require mem[idx] == mem[idx + 12 len 20]
                        mem[s] = mem[idx]
                        s = s + 32
                        idx = idx + 32
                        continue 
                    _193 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _57
                    idx = 0
                    s = mem[64] + 64
                    t = ceil32(return_data.size) + 128
                    while idx < _57:
                        mem[s] = mem[t + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    return memory
                      from mem[64]
                       len _193 + (32 * _57) + -mem[64] + 64
                staticcall sub_e5888867Address.0x41a0894d with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 96
                require return_data.size >= 32
                _38 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _58 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
                mem[ceil32(return_data.size) + 96] = _58
                require _38 + (32 * _58) + 32 <= return_data.size
                s = ceil32(return_data.size) + 128
                idx = _38 + 128
                while idx < _38 + (32 * _58) + 128:
                    require mem[idx] == mem[idx + 12 len 20]
                    mem[s] = mem[idx]
                    s = s + 32
                    idx = idx + 32
                    continue 
                _194 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _58
                idx = 0
                s = mem[64] + 64
                t = ceil32(return_data.size) + 128
                while idx < _58:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _194 + (32 * _58) + -mem[64] + 64
            if -uint32(arg1) + 3:
                staticcall sub_2dcdd4f0Address.0x41a0894d with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 96
                require return_data.size >= 32
                _49 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _65 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
                mem[ceil32(return_data.size) + 96] = _65
                require _49 + (32 * _65) + 32 <= return_data.size
                s = ceil32(return_data.size) + 128
                idx = _49 + 128
                while idx < _49 + (32 * _65) + 128:
                    require mem[idx] == mem[idx + 12 len 20]
                    mem[s] = mem[idx]
                    s = s + 32
                    idx = idx + 32
                    continue 
                _195 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _65
                idx = 0
                s = mem[64] + 64
                t = ceil32(return_data.size) + 128
                while idx < _65:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _195 + (32 * _65) + -mem[64] + 64
            staticcall sub_e5888867Address.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _50 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _66 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _66
            require _50 + (32 * _66) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _50 + 128
            while idx < _50 + (32 * _66) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _196 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _66
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _66:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _196 + (32 * _66) + -mem[64] + 64
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_28ec092eAddress.0x41a0894d with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 96
                require return_data.size >= 32
                _51 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _67 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
                mem[ceil32(return_data.size) + 96] = _67
                require _51 + (32 * _67) + 32 <= return_data.size
                s = ceil32(return_data.size) + 128
                idx = _51 + 128
                while idx < _51 + (32 * _67) + 128:
                    require mem[idx] == mem[idx + 12 len 20]
                    mem[s] = mem[idx]
                    s = s + 32
                    idx = idx + 32
                    continue 
                _197 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _67
                idx = 0
                s = mem[64] + 64
                t = ceil32(return_data.size) + 128
                while idx < _67:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _197 + (32 * _67) + -mem[64] + 64
            staticcall sub_e5888867Address.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _52 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _68 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _68
            require _52 + (32 * _68) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _52 + 128
            while idx < _52 + (32 * _68) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _198 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _68
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _68:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _198 + (32 * _68) + -mem[64] + 64
        if -uint32(arg1) + 3:
            staticcall sub_2dcdd4f0Address.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _59 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _73 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _73
            require _59 + (32 * _73) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _59 + 128
            while idx < _59 + (32 * _73) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _199 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _73
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _73:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _199 + (32 * _73) + -mem[64] + 64
        staticcall sub_e5888867Address.0x41a0894d with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _60 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _74 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _74
        require _60 + (32 * _74) + 32 <= return_data.size
        s = ceil32(return_data.size) + 128
        idx = _60 + 128
        while idx < _60 + (32 * _74) + 128:
            require mem[idx] == mem[idx + 12 len 20]
            mem[s] = mem[idx]
            s = s + 32
            idx = idx + 32
            continue 
        _200 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _74
        idx = 0
        s = mem[64] + 64
        t = ceil32(return_data.size) + 128
        while idx < _74:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _200 + (32 * _74) + -mem[64] + 64
    if -uint32(arg1) + 1:
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_fba94647Address.0x41a0894d with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 96
                require return_data.size >= 32
                _53 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _69 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
                mem[ceil32(return_data.size) + 96] = _69
                require _53 + (32 * _69) + 32 <= return_data.size
                s = ceil32(return_data.size) + 128
                idx = _53 + 128
                while idx < _53 + (32 * _69) + 128:
                    require mem[idx] == mem[idx + 12 len 20]
                    mem[s] = mem[idx]
                    s = s + 32
                    idx = idx + 32
                    continue 
                _201 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _69
                idx = 0
                s = mem[64] + 64
                t = ceil32(return_data.size) + 128
                while idx < _69:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _201 + (32 * _69) + -mem[64] + 64
            staticcall sub_e5888867Address.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _54 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _70 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _70
            require _54 + (32 * _70) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _54 + 128
            while idx < _54 + (32 * _70) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _202 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _70
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _70:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _202 + (32 * _70) + -mem[64] + 64
        if -uint32(arg1) + 3:
            staticcall sub_2dcdd4f0Address.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _61 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _75 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _75
            require _61 + (32 * _75) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _61 + 128
            while idx < _61 + (32 * _75) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _203 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _75
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _75:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _203 + (32 * _75) + -mem[64] + 64
        staticcall sub_e5888867Address.0x41a0894d with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _62 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _76 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _76
        require _62 + (32 * _76) + 32 <= return_data.size
        s = ceil32(return_data.size) + 128
        idx = _62 + 128
        while idx < _62 + (32 * _76) + 128:
            require mem[idx] == mem[idx + 12 len 20]
            mem[s] = mem[idx]
            s = s + 32
            idx = idx + 32
            continue 
        _204 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _76
        idx = 0
        s = mem[64] + 64
        t = ceil32(return_data.size) + 128
        while idx < _76:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _204 + (32 * _76) + -mem[64] + 64
    if -uint32(arg1) + 2:
        if -uint32(arg1) + 3:
            staticcall sub_28ec092eAddress.0x41a0894d with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 96
            require return_data.size >= 32
            _63 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _77 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
            mem[ceil32(return_data.size) + 96] = _77
            require _63 + (32 * _77) + 32 <= return_data.size
            s = ceil32(return_data.size) + 128
            idx = _63 + 128
            while idx < _63 + (32 * _77) + 128:
                require mem[idx] == mem[idx + 12 len 20]
                mem[s] = mem[idx]
                s = s + 32
                idx = idx + 32
                continue 
            _205 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _77
            idx = 0
            s = mem[64] + 64
            t = ceil32(return_data.size) + 128
            while idx < _77:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _205 + (32 * _77) + -mem[64] + 64
        staticcall sub_e5888867Address.0x41a0894d with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _64 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _78 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _78
        require _64 + (32 * _78) + 32 <= return_data.size
        s = ceil32(return_data.size) + 128
        idx = _64 + 128
        while idx < _64 + (32 * _78) + 128:
            require mem[idx] == mem[idx + 12 len 20]
            mem[s] = mem[idx]
            s = s + 32
            idx = idx + 32
            continue 
        _206 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _78
        idx = 0
        s = mem[64] + 64
        t = ceil32(return_data.size) + 128
        while idx < _78:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _206 + (32 * _78) + -mem[64] + 64
    if -uint32(arg1) + 3:
        staticcall sub_2dcdd4f0Address.0x41a0894d with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _71 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _79 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _79
        require _71 + (32 * _79) + 32 <= return_data.size
        s = ceil32(return_data.size) + 128
        idx = _71 + 128
        while idx < _71 + (32 * _79) + 128:
            require mem[idx] == mem[idx + 12 len 20]
            mem[s] = mem[idx]
            s = s + 32
            idx = idx + 32
            continue 
        _207 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _79
        idx = 0
        s = mem[64] + 64
        t = ceil32(return_data.size) + 128
        while idx < _79:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _207 + (32 * _79) + -mem[64] + 64
    staticcall sub_e5888867Address.0x41a0894d with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _72 = mem[96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require return_data.size + 96 > mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _80 = mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _80
    require _72 + (32 * _80) + 32 <= return_data.size
    s = ceil32(return_data.size) + 128
    idx = _72 + 128
    while idx < _72 + (32 * _80) + 128:
        require mem[idx] == mem[idx + 12 len 20]
        mem[s] = mem[idx]
        s = s + 32
        idx = idx + 32
        continue 
    _208 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _80
    idx = 0
    s = mem[64] + 64
    t = ceil32(return_data.size) + 128
    while idx < _80:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    return memory
      from mem[64]
       len _208 + (32 * _80) + -mem[64] + 64
}

function sub_4ea6f0bd(?) {
    require calldata.size - 4 >= 96
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    require arg2 == uint32(arg2)
    if not msg.sender:
        revert with 0, 'NODE CREATION:  creation from the zero address'
    if stor32[address(msg.sender)]:
        revert with 0, 'NODE CREATION: Blacklisted address'
    if futurUsePoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
    if distributionPoolAddress == msg.sender:
        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
    if -uint32(arg2):
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall 0x0.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall 0x0.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(0)
                    call 0x0.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
    else:
        if -uint32(arg2) + 1:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_fba94647Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_fba94647Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
        else:
            if -uint32(arg2) + 2:
                if -uint32(arg2) + 3:
                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
            else:
                if -uint32(arg2) + 3:
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg2) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                        revert with 0, 'Insufficient Fund'
                    if not -arg3:
                        if 0 < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                            revert with 0, 'Insuffcient Fund'
                        if walletBalances[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), 57005, arg2 << 224, arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_3c25bff5(?) payable {
    require calldata.size - 4 >= 128
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    require arg2 == address(arg2)
    require arg4 == uint32(arg4)
    if arg3 > 5:
        revert with 0, 'Max: 5 nodes Min: 1'
    if arg3 < 1:
        revert with 0, 'Max: 5 nodes Min: 1'
    if arg1.length <= 3:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if arg1.length >= 32:
        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
    if -uint32(arg4):
        if -uint32(arg4) + 1:
            if -uint32(arg4) + 2:
                if -uint32(arg4) + 3:
                    staticcall 0x0.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall 0x0.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall 0x0.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(0)
                    call 0x0.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
            else:
                if -uint32(arg4) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
        else:
            if -uint32(arg4) + 2:
                if -uint32(arg4) + 3:
                    staticcall sub_28ec092eAddress.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
            else:
                if -uint32(arg4) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
    else:
        if -uint32(arg4) + 1:
            if -uint32(arg4) + 2:
                if -uint32(arg4) + 3:
                    staticcall sub_fba94647Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_fba94647Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_fba94647Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_fba94647Address)
                    call sub_fba94647Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
            else:
                if -uint32(arg4) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
        else:
            if -uint32(arg4) + 2:
                if -uint32(arg4) + 3:
                    staticcall sub_28ec092eAddress.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_28ec092eAddress)
                    call sub_28ec092eAddress.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
            else:
                if -uint32(arg4) + 3:
                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_2dcdd4f0Address)
                    call sub_2dcdd4f0Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
                else:
                    staticcall sub_e5888867Address.0x2c534595 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] >= 100:
                        revert with 0, 'Maximum node exceeded'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not -uint32(arg4) + 2:
                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                gas gas_remaining wei
                               args uint32(arg4)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                    if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                    if not -arg3:
                        if 0 > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < 0:
                            revert with 0, 17
                    else:
                        if arg3 and ext_call.return_data[0] > -1 / arg3:
                            revert with 0, 17
                        if not arg3:
                            revert with 0, 18
                        if arg3 * ext_call.return_data[0] / arg3 != ext_call.return_data[0]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        if arg3 * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                        if sub_c7e17a17[address(msg.sender)] < arg3 * ext_call.return_data[0]:
                            revert with 0, 17
                        sub_c7e17a17[address(msg.sender)] += -1 * arg3 * ext_call.return_data[0]
                    require ext_code.size(sub_e5888867Address)
                    call sub_e5888867Address.0xf482212c with:
                         gas gas_remaining wei
                        args msg.sender, Array(len=arg1.length, data=arg1[all]), address(arg2), arg4 << 224, arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_78c494d5(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if not -uint32(arg1) + 3:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 100] = msg.sender
                    staticcall sub_e5888867Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _158 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                    _186 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                    mem[(2 * ceil32(return_data.size)) + 96] = _186
                    require _158 + _186 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)] = mem[ceil32(return_data.size) + _158 + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + (2 * ceil32(return_data.size)) + 128] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _186
                    mem[mem[64] + 64 len ceil32(_186)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + mem[64] + 64] = 0
                    return Array(len=_186, data=mem[mem[64] + 64 len ceil32(_186)])
                staticcall 0x0.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall 0x0.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _157 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _185 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _185
                require _157 + _185 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)] = mem[ceil32(return_data.size) + _157 + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    _417 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _185
                    mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                    if ceil32(_185) <= _185:
                        return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                    mem[_185 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_185) + _417 + -mem[64] + 64
                mem[_185 + (2 * ceil32(return_data.size)) + 128] = 0
                _418 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _185
                mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                mem[_185 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_185) + _418 + -mem[64] + 64
            if -uint32(arg1) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_2dcdd4f0Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _175 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _193 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _193
                require _175 + _193 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)] = mem[ceil32(return_data.size) + _175 + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + (2 * ceil32(return_data.size)) + 128] = 0
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _193
                mem[mem[64] + 64 len ceil32(_193)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + mem[64] + 64] = 0
                return Array(len=_193, data=mem[mem[64] + 64 len ceil32(_193)])
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _176 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _194 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _194
            require _176 + _194 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)] = mem[ceil32(return_data.size) + _176 + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                _423 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _194
                mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
                if ceil32(_194) <= _194:
                    return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
                mem[_194 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_194) + _423 + -mem[64] + 64
            mem[_194 + (2 * ceil32(return_data.size)) + 128] = 0
            _424 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _194
            mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
            mem[_194 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_194) + _424 + -mem[64] + 64
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_28ec092eAddress.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_28ec092eAddress.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _177 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _195 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _195
                require _177 + _195 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)] = mem[ceil32(return_data.size) + _177 + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    _425 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _195
                    mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                    if ceil32(_195) <= _195:
                        return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                    mem[_195 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_195) + _425 + -mem[64] + 64
                mem[_195 + (2 * ceil32(return_data.size)) + 128] = 0
                _426 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _195
                mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                mem[_195 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_195) + _426 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _178 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _196 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _196
            require _178 + _196 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)] = mem[ceil32(return_data.size) + _178 + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                _427 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _196
                mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
                if ceil32(_196) <= _196:
                    return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
                mem[_196 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_196) + _427 + -mem[64] + 64
            mem[_196 + (2 * ceil32(return_data.size)) + 128] = 0
            _428 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _196
            mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
            mem[_196 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_196) + _428 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _188 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _202 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _202
            require _188 + _202 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)] = mem[ceil32(return_data.size) + _188 + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _202
            mem[mem[64] + 64 len ceil32(_202)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + mem[64] + 64] = 0
            return Array(len=_202, data=mem[mem[64] + 64 len ceil32(_202)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x4a389fae with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _187 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _201 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _201
        require _187 + _201 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)] = mem[ceil32(return_data.size) + _187 + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            _429 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _201
            mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
            if ceil32(_201) <= _201:
                return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
            mem[_201 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_201) + _429 + -mem[64] + 64
        mem[_201 + (2 * ceil32(return_data.size)) + 128] = 0
        _430 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _201
        mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
        mem[_201 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_201) + _430 + -mem[64] + 64
    if -uint32(arg1) + 1:
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_fba94647Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_fba94647Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _179 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _197 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _197
                require _179 + _197 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)] = mem[ceil32(return_data.size) + _179 + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    _433 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _197
                    mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                    if ceil32(_197) <= _197:
                        return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                    mem[_197 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_197) + _433 + -mem[64] + 64
                mem[_197 + (2 * ceil32(return_data.size)) + 128] = 0
                _434 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _197
                mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                mem[_197 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_197) + _434 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _180 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _198 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _198
            require _180 + _198 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)] = mem[ceil32(return_data.size) + _180 + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                _435 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _198
                mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
                if ceil32(_198) <= _198:
                    return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
                mem[_198 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_198) + _435 + -mem[64] + 64
            mem[_198 + (2 * ceil32(return_data.size)) + 128] = 0
            _436 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _198
            mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
            mem[_198 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_198) + _436 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _190 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _204 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _204
            require _190 + _204 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)] = mem[ceil32(return_data.size) + _190 + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _204
            mem[mem[64] + 64 len ceil32(_204)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + mem[64] + 64] = 0
            return Array(len=_204, data=mem[mem[64] + 64 len ceil32(_204)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x4a389fae with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _189 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _203 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _203
        require _189 + _203 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)] = mem[ceil32(return_data.size) + _189 + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            _437 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _203
            mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
            if ceil32(_203) <= _203:
                return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
            mem[_203 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_203) + _437 + -mem[64] + 64
        mem[_203 + (2 * ceil32(return_data.size)) + 128] = 0
        _438 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _203
        mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
        mem[_203 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_203) + _438 + -mem[64] + 64
    if -uint32(arg1) + 2:
        if -uint32(arg1) + 3:
            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_28ec092eAddress.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _191 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _205 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _205
            require _191 + _205 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)] = mem[ceil32(return_data.size) + _191 + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                _441 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _205
                mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
                if ceil32(_205) <= _205:
                    return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
                mem[_205 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_205) + _441 + -mem[64] + 64
            mem[_205 + (2 * ceil32(return_data.size)) + 128] = 0
            _442 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _205
            mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
            mem[_205 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_205) + _442 + -mem[64] + 64
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x4a389fae with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _192 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _206 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _206
        require _192 + _206 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)] = mem[ceil32(return_data.size) + _192 + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            _443 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _206
            mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
            if ceil32(_206) <= _206:
                return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
            mem[_206 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_206) + _443 + -mem[64] + 64
        mem[_206 + (2 * ceil32(return_data.size)) + 128] = 0
        _444 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _206
        mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
        mem[_206 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_206) + _444 + -mem[64] + 64
    if not -uint32(arg1) + 3:
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x4a389fae with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _200 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _208 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _208
        require _200 + _208 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)] = mem[ceil32(return_data.size) + _200 + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + (2 * ceil32(return_data.size)) + 128] = 0
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _208
        mem[mem[64] + 64 len ceil32(_208)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + mem[64] + 64] = 0
        return Array(len=_208, data=mem[mem[64] + 64 len ceil32(_208)])
    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    staticcall sub_2dcdd4f0Address.0x4a389fae with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _199 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _207 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _207
    require _199 + _207 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)] = mem[ceil32(return_data.size) + _199 + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        _445 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _207
        mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
        if ceil32(_207) <= _207:
            return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
        mem[_207 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_207) + _445 + -mem[64] + 64
    mem[_207 + (2 * ceil32(return_data.size)) + 128] = 0
    _446 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _207
    mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
    mem[_207 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_207) + _446 + -mem[64] + 64
}

function sub_91aa5e29(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if not -uint32(arg1) + 3:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 100] = msg.sender
                    staticcall sub_e5888867Address.0x334de3a2 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _158 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                    _186 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                    mem[(2 * ceil32(return_data.size)) + 96] = _186
                    require _158 + _186 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)] = mem[ceil32(return_data.size) + _158 + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + (2 * ceil32(return_data.size)) + 128] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _186
                    mem[mem[64] + 64 len ceil32(_186)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + mem[64] + 64] = 0
                    return Array(len=_186, data=mem[mem[64] + 64 len ceil32(_186)])
                staticcall 0x0.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall 0x0.0x334de3a2 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _157 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _185 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _185
                require _157 + _185 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)] = mem[ceil32(return_data.size) + _157 + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    _417 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _185
                    mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                    if ceil32(_185) <= _185:
                        return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                    mem[_185 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_185) + _417 + -mem[64] + 64
                mem[_185 + (2 * ceil32(return_data.size)) + 128] = 0
                _418 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _185
                mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                mem[_185 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_185) + _418 + -mem[64] + 64
            if -uint32(arg1) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _175 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _193 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _193
                require _175 + _193 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)] = mem[ceil32(return_data.size) + _175 + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + (2 * ceil32(return_data.size)) + 128] = 0
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _193
                mem[mem[64] + 64 len ceil32(_193)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + mem[64] + 64] = 0
                return Array(len=_193, data=mem[mem[64] + 64 len ceil32(_193)])
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _176 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _194 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _194
            require _176 + _194 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)] = mem[ceil32(return_data.size) + _176 + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                _423 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _194
                mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
                if ceil32(_194) <= _194:
                    return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
                mem[_194 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_194) + _423 + -mem[64] + 64
            mem[_194 + (2 * ceil32(return_data.size)) + 128] = 0
            _424 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _194
            mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
            mem[_194 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_194) + _424 + -mem[64] + 64
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_28ec092eAddress.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_28ec092eAddress.0x334de3a2 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _177 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _195 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _195
                require _177 + _195 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)] = mem[ceil32(return_data.size) + _177 + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    _425 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _195
                    mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                    if ceil32(_195) <= _195:
                        return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                    mem[_195 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_195) + _425 + -mem[64] + 64
                mem[_195 + (2 * ceil32(return_data.size)) + 128] = 0
                _426 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _195
                mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                mem[_195 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_195) + _426 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _178 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _196 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _196
            require _178 + _196 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)] = mem[ceil32(return_data.size) + _178 + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                _427 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _196
                mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
                if ceil32(_196) <= _196:
                    return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
                mem[_196 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_196) + _427 + -mem[64] + 64
            mem[_196 + (2 * ceil32(return_data.size)) + 128] = 0
            _428 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _196
            mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
            mem[_196 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_196) + _428 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _188 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _202 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _202
            require _188 + _202 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)] = mem[ceil32(return_data.size) + _188 + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _202
            mem[mem[64] + 64 len ceil32(_202)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + mem[64] + 64] = 0
            return Array(len=_202, data=mem[mem[64] + 64 len ceil32(_202)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _187 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _201 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _201
        require _187 + _201 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)] = mem[ceil32(return_data.size) + _187 + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            _429 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _201
            mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
            if ceil32(_201) <= _201:
                return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
            mem[_201 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_201) + _429 + -mem[64] + 64
        mem[_201 + (2 * ceil32(return_data.size)) + 128] = 0
        _430 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _201
        mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
        mem[_201 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_201) + _430 + -mem[64] + 64
    if -uint32(arg1) + 1:
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_fba94647Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_fba94647Address.0x334de3a2 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _179 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _197 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _197
                require _179 + _197 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)] = mem[ceil32(return_data.size) + _179 + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    _433 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _197
                    mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                    if ceil32(_197) <= _197:
                        return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                    mem[_197 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_197) + _433 + -mem[64] + 64
                mem[_197 + (2 * ceil32(return_data.size)) + 128] = 0
                _434 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _197
                mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                mem[_197 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_197) + _434 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _180 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _198 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _198
            require _180 + _198 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)] = mem[ceil32(return_data.size) + _180 + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                _435 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _198
                mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
                if ceil32(_198) <= _198:
                    return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
                mem[_198 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_198) + _435 + -mem[64] + 64
            mem[_198 + (2 * ceil32(return_data.size)) + 128] = 0
            _436 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _198
            mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
            mem[_198 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_198) + _436 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _190 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _204 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _204
            require _190 + _204 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)] = mem[ceil32(return_data.size) + _190 + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _204
            mem[mem[64] + 64 len ceil32(_204)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + mem[64] + 64] = 0
            return Array(len=_204, data=mem[mem[64] + 64 len ceil32(_204)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _189 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _203 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _203
        require _189 + _203 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)] = mem[ceil32(return_data.size) + _189 + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            _437 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _203
            mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
            if ceil32(_203) <= _203:
                return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
            mem[_203 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_203) + _437 + -mem[64] + 64
        mem[_203 + (2 * ceil32(return_data.size)) + 128] = 0
        _438 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _203
        mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
        mem[_203 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_203) + _438 + -mem[64] + 64
    if -uint32(arg1) + 2:
        if -uint32(arg1) + 3:
            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_28ec092eAddress.0x334de3a2 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _191 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _205 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _205
            require _191 + _205 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)] = mem[ceil32(return_data.size) + _191 + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                _441 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _205
                mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
                if ceil32(_205) <= _205:
                    return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
                mem[_205 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_205) + _441 + -mem[64] + 64
            mem[_205 + (2 * ceil32(return_data.size)) + 128] = 0
            _442 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _205
            mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
            mem[_205 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_205) + _442 + -mem[64] + 64
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x334de3a2 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _192 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _206 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _206
        require _192 + _206 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)] = mem[ceil32(return_data.size) + _192 + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            _443 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _206
            mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
            if ceil32(_206) <= _206:
                return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
            mem[_206 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_206) + _443 + -mem[64] + 64
        mem[_206 + (2 * ceil32(return_data.size)) + 128] = 0
        _444 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _206
        mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
        mem[_206 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_206) + _444 + -mem[64] + 64
    if not -uint32(arg1) + 3:
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x334de3a2 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _200 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _208 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _208
        require _200 + _208 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)] = mem[ceil32(return_data.size) + _200 + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + (2 * ceil32(return_data.size)) + 128] = 0
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _208
        mem[mem[64] + 64 len ceil32(_208)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + mem[64] + 64] = 0
        return Array(len=_208, data=mem[mem[64] + 64 len ceil32(_208)])
    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x334de3a200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    staticcall sub_2dcdd4f0Address.0x334de3a2 with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _199 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _207 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _207
    require _199 + _207 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)] = mem[ceil32(return_data.size) + _199 + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        _445 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _207
        mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
        if ceil32(_207) <= _207:
            return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
        mem[_207 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_207) + _445 + -mem[64] + 64
    mem[_207 + (2 * ceil32(return_data.size)) + 128] = 0
    _446 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _207
    mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
    mem[_207 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_207) + _446 + -mem[64] + 64
}

function sub_ad435847(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if not -uint32(arg1) + 3:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 100] = msg.sender
                    staticcall sub_e5888867Address.0x5759fb02 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _158 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                    _186 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                    mem[(2 * ceil32(return_data.size)) + 96] = _186
                    require _158 + _186 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)] = mem[ceil32(return_data.size) + _158 + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + (2 * ceil32(return_data.size)) + 128] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _186
                    mem[mem[64] + 64 len ceil32(_186)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + mem[64] + 64] = 0
                    return Array(len=_186, data=mem[mem[64] + 64 len ceil32(_186)])
                staticcall 0x0.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall 0x0.0x5759fb02 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _157 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _185 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _185
                require _157 + _185 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)] = mem[ceil32(return_data.size) + _157 + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    _417 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _185
                    mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                    if ceil32(_185) <= _185:
                        return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                    mem[_185 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_185) + _417 + -mem[64] + 64
                mem[_185 + (2 * ceil32(return_data.size)) + 128] = 0
                _418 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _185
                mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                mem[_185 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_185) + _418 + -mem[64] + 64
            if -uint32(arg1) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _175 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _193 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _193
                require _175 + _193 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)] = mem[ceil32(return_data.size) + _175 + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + (2 * ceil32(return_data.size)) + 128] = 0
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _193
                mem[mem[64] + 64 len ceil32(_193)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + mem[64] + 64] = 0
                return Array(len=_193, data=mem[mem[64] + 64 len ceil32(_193)])
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _176 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _194 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _194
            require _176 + _194 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)] = mem[ceil32(return_data.size) + _176 + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                _423 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _194
                mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
                if ceil32(_194) <= _194:
                    return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
                mem[_194 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_194) + _423 + -mem[64] + 64
            mem[_194 + (2 * ceil32(return_data.size)) + 128] = 0
            _424 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _194
            mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
            mem[_194 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_194) + _424 + -mem[64] + 64
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_28ec092eAddress.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_28ec092eAddress.0x5759fb02 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _177 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _195 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _195
                require _177 + _195 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)] = mem[ceil32(return_data.size) + _177 + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    _425 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _195
                    mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                    if ceil32(_195) <= _195:
                        return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                    mem[_195 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_195) + _425 + -mem[64] + 64
                mem[_195 + (2 * ceil32(return_data.size)) + 128] = 0
                _426 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _195
                mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                mem[_195 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_195) + _426 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _178 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _196 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _196
            require _178 + _196 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)] = mem[ceil32(return_data.size) + _178 + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                _427 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _196
                mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
                if ceil32(_196) <= _196:
                    return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
                mem[_196 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_196) + _427 + -mem[64] + 64
            mem[_196 + (2 * ceil32(return_data.size)) + 128] = 0
            _428 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _196
            mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
            mem[_196 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_196) + _428 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _188 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _202 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _202
            require _188 + _202 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)] = mem[ceil32(return_data.size) + _188 + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _202
            mem[mem[64] + 64 len ceil32(_202)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + mem[64] + 64] = 0
            return Array(len=_202, data=mem[mem[64] + 64 len ceil32(_202)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _187 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _201 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _201
        require _187 + _201 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)] = mem[ceil32(return_data.size) + _187 + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            _429 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _201
            mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
            if ceil32(_201) <= _201:
                return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
            mem[_201 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_201) + _429 + -mem[64] + 64
        mem[_201 + (2 * ceil32(return_data.size)) + 128] = 0
        _430 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _201
        mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
        mem[_201 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_201) + _430 + -mem[64] + 64
    if -uint32(arg1) + 1:
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_fba94647Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_fba94647Address.0x5759fb02 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _179 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _197 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _197
                require _179 + _197 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)] = mem[ceil32(return_data.size) + _179 + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    _433 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _197
                    mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                    if ceil32(_197) <= _197:
                        return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                    mem[_197 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_197) + _433 + -mem[64] + 64
                mem[_197 + (2 * ceil32(return_data.size)) + 128] = 0
                _434 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _197
                mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                mem[_197 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_197) + _434 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _180 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _198 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _198
            require _180 + _198 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)] = mem[ceil32(return_data.size) + _180 + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                _435 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _198
                mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
                if ceil32(_198) <= _198:
                    return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
                mem[_198 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_198) + _435 + -mem[64] + 64
            mem[_198 + (2 * ceil32(return_data.size)) + 128] = 0
            _436 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _198
            mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
            mem[_198 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_198) + _436 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _190 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _204 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _204
            require _190 + _204 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)] = mem[ceil32(return_data.size) + _190 + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _204
            mem[mem[64] + 64 len ceil32(_204)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + mem[64] + 64] = 0
            return Array(len=_204, data=mem[mem[64] + 64 len ceil32(_204)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _189 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _203 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _203
        require _189 + _203 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)] = mem[ceil32(return_data.size) + _189 + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            _437 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _203
            mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
            if ceil32(_203) <= _203:
                return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
            mem[_203 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_203) + _437 + -mem[64] + 64
        mem[_203 + (2 * ceil32(return_data.size)) + 128] = 0
        _438 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _203
        mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
        mem[_203 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_203) + _438 + -mem[64] + 64
    if -uint32(arg1) + 2:
        if -uint32(arg1) + 3:
            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_28ec092eAddress.0x5759fb02 with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _191 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _205 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _205
            require _191 + _205 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)] = mem[ceil32(return_data.size) + _191 + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                _441 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _205
                mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
                if ceil32(_205) <= _205:
                    return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
                mem[_205 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_205) + _441 + -mem[64] + 64
            mem[_205 + (2 * ceil32(return_data.size)) + 128] = 0
            _442 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _205
            mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
            mem[_205 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_205) + _442 + -mem[64] + 64
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x5759fb02 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _192 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _206 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _206
        require _192 + _206 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)] = mem[ceil32(return_data.size) + _192 + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            _443 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _206
            mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
            if ceil32(_206) <= _206:
                return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
            mem[_206 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_206) + _443 + -mem[64] + 64
        mem[_206 + (2 * ceil32(return_data.size)) + 128] = 0
        _444 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _206
        mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
        mem[_206 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_206) + _444 + -mem[64] + 64
    if not -uint32(arg1) + 3:
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0x5759fb02 with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _200 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _208 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _208
        require _200 + _208 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)] = mem[ceil32(return_data.size) + _200 + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + (2 * ceil32(return_data.size)) + 128] = 0
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _208
        mem[mem[64] + 64 len ceil32(_208)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + mem[64] + 64] = 0
        return Array(len=_208, data=mem[mem[64] + 64 len ceil32(_208)])
    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    staticcall sub_2dcdd4f0Address.0x5759fb02 with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _199 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _207 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _207
    require _199 + _207 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)] = mem[ceil32(return_data.size) + _199 + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        _445 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _207
        mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
        if ceil32(_207) <= _207:
            return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
        mem[_207 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_207) + _445 + -mem[64] + 64
    mem[_207 + (2 * ceil32(return_data.size)) + 128] = 0
    _446 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _207
    mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
    mem[_207 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_207) + _446 + -mem[64] + 64
}

function sub_cd38599b(?) {
    require calldata.size - 4 >= 32
    require arg1 == uint32(arg1)
    if not msg.sender:
        revert with 0, 'SENDER CAN'T BE ZERO'
    mem[100] = msg.sender
    if -uint32(arg1):
        if -uint32(arg1) + 1:
            if -uint32(arg1) + 2:
                if not -uint32(arg1) + 3:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 100] = msg.sender
                    staticcall sub_e5888867Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _158 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                    _186 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                    mem[(2 * ceil32(return_data.size)) + 96] = _186
                    require _158 + _186 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)] = mem[ceil32(return_data.size) + _158 + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + (2 * ceil32(return_data.size)) + 128] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _186
                    mem[mem[64] + 64 len ceil32(_186)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_186)]
                    if ceil32(_186) > _186:
                        mem[_186 + mem[64] + 64] = 0
                    return Array(len=_186, data=mem[mem[64] + 64 len ceil32(_186)])
                staticcall 0x0.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall 0x0.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _157 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _185 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _185
                require _157 + _185 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)] = mem[ceil32(return_data.size) + _157 + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    _417 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _185
                    mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                    if ceil32(_185) <= _185:
                        return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                    mem[_185 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_185) + _417 + -mem[64] + 64
                mem[_185 + (2 * ceil32(return_data.size)) + 128] = 0
                _418 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _185
                mem[mem[64] + 64 len ceil32(_185)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_185)]
                if ceil32(_185) <= _185:
                    return Array(len=_185, data=mem[mem[64] + 64 len ceil32(_185)])
                mem[_185 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_185) + _418 + -mem[64] + 64
            if -uint32(arg1) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_2dcdd4f0Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _175 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _193 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _193
                require _175 + _193 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)] = mem[ceil32(return_data.size) + _175 + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + (2 * ceil32(return_data.size)) + 128] = 0
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _193
                mem[mem[64] + 64 len ceil32(_193)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_193)]
                if ceil32(_193) > _193:
                    mem[_193 + mem[64] + 64] = 0
                return Array(len=_193, data=mem[mem[64] + 64 len ceil32(_193)])
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _176 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _194 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _194
            require _176 + _194 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)] = mem[ceil32(return_data.size) + _176 + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                _423 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _194
                mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
                if ceil32(_194) <= _194:
                    return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
                mem[_194 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_194) + _423 + -mem[64] + 64
            mem[_194 + (2 * ceil32(return_data.size)) + 128] = 0
            _424 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _194
            mem[mem[64] + 64 len ceil32(_194)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_194)]
            if ceil32(_194) <= _194:
                return Array(len=_194, data=mem[mem[64] + 64 len ceil32(_194)])
            mem[_194 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_194) + _424 + -mem[64] + 64
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_28ec092eAddress.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_28ec092eAddress.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _177 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _195 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _195
                require _177 + _195 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)] = mem[ceil32(return_data.size) + _177 + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    _425 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _195
                    mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                    if ceil32(_195) <= _195:
                        return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                    mem[_195 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_195) + _425 + -mem[64] + 64
                mem[_195 + (2 * ceil32(return_data.size)) + 128] = 0
                _426 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _195
                mem[mem[64] + 64 len ceil32(_195)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_195)]
                if ceil32(_195) <= _195:
                    return Array(len=_195, data=mem[mem[64] + 64 len ceil32(_195)])
                mem[_195 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_195) + _426 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _178 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _196 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _196
            require _178 + _196 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)] = mem[ceil32(return_data.size) + _178 + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                _427 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _196
                mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
                if ceil32(_196) <= _196:
                    return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
                mem[_196 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_196) + _427 + -mem[64] + 64
            mem[_196 + (2 * ceil32(return_data.size)) + 128] = 0
            _428 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _196
            mem[mem[64] + 64 len ceil32(_196)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_196)]
            if ceil32(_196) <= _196:
                return Array(len=_196, data=mem[mem[64] + 64 len ceil32(_196)])
            mem[_196 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_196) + _428 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _188 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _202 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _202
            require _188 + _202 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)] = mem[ceil32(return_data.size) + _188 + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _202
            mem[mem[64] + 64 len ceil32(_202)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_202)]
            if ceil32(_202) > _202:
                mem[_202 + mem[64] + 64] = 0
            return Array(len=_202, data=mem[mem[64] + 64 len ceil32(_202)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0xc92819ce with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _187 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _201 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _201
        require _187 + _201 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)] = mem[ceil32(return_data.size) + _187 + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            _429 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _201
            mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
            if ceil32(_201) <= _201:
                return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
            mem[_201 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_201) + _429 + -mem[64] + 64
        mem[_201 + (2 * ceil32(return_data.size)) + 128] = 0
        _430 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _201
        mem[mem[64] + 64 len ceil32(_201)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_201)]
        if ceil32(_201) <= _201:
            return Array(len=_201, data=mem[mem[64] + 64 len ceil32(_201)])
        mem[_201 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_201) + _430 + -mem[64] + 64
    if -uint32(arg1) + 1:
        if -uint32(arg1) + 2:
            if -uint32(arg1) + 3:
                staticcall sub_fba94647Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 100] = msg.sender
                staticcall sub_fba94647Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                _179 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
                _197 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
                mem[(2 * ceil32(return_data.size)) + 96] = _197
                require _179 + _197 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)] = mem[ceil32(return_data.size) + _179 + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    _433 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _197
                    mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                    if ceil32(_197) <= _197:
                        return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                    mem[_197 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_197) + _433 + -mem[64] + 64
                mem[_197 + (2 * ceil32(return_data.size)) + 128] = 0
                _434 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _197
                mem[mem[64] + 64 len ceil32(_197)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_197)]
                if ceil32(_197) <= _197:
                    return Array(len=_197, data=mem[mem[64] + 64 len ceil32(_197)])
                mem[_197 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_197) + _434 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _180 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _198 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _198
            require _180 + _198 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)] = mem[ceil32(return_data.size) + _180 + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                _435 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _198
                mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
                if ceil32(_198) <= _198:
                    return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
                mem[_198 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_198) + _435 + -mem[64] + 64
            mem[_198 + (2 * ceil32(return_data.size)) + 128] = 0
            _436 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _198
            mem[mem[64] + 64 len ceil32(_198)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_198)]
            if ceil32(_198) <= _198:
                return Array(len=_198, data=mem[mem[64] + 64 len ceil32(_198)])
            mem[_198 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_198) + _436 + -mem[64] + 64
        if not -uint32(arg1) + 3:
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _190 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _204 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _204
            require _190 + _204 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)] = mem[ceil32(return_data.size) + _190 + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + (2 * ceil32(return_data.size)) + 128] = 0
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _204
            mem[mem[64] + 64 len ceil32(_204)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_204)]
            if ceil32(_204) > _204:
                mem[_204 + mem[64] + 64] = 0
            return Array(len=_204, data=mem[mem[64] + 64 len ceil32(_204)])
        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_2dcdd4f0Address.0xc92819ce with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _189 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _203 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _203
        require _189 + _203 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)] = mem[ceil32(return_data.size) + _189 + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            _437 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _203
            mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
            if ceil32(_203) <= _203:
                return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
            mem[_203 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_203) + _437 + -mem[64] + 64
        mem[_203 + (2 * ceil32(return_data.size)) + 128] = 0
        _438 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _203
        mem[mem[64] + 64 len ceil32(_203)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_203)]
        if ceil32(_203) <= _203:
            return Array(len=_203, data=mem[mem[64] + 64 len ceil32(_203)])
        mem[_203 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_203) + _438 + -mem[64] + 64
    if -uint32(arg1) + 2:
        if -uint32(arg1) + 3:
            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 100] = msg.sender
            staticcall sub_28ec092eAddress.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            _191 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
            _205 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
            mem[(2 * ceil32(return_data.size)) + 96] = _205
            require _191 + _205 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)] = mem[ceil32(return_data.size) + _191 + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                _441 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _205
                mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
                if ceil32(_205) <= _205:
                    return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
                mem[_205 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_205) + _441 + -mem[64] + 64
            mem[_205 + (2 * ceil32(return_data.size)) + 128] = 0
            _442 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _205
            mem[mem[64] + 64 len ceil32(_205)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_205)]
            if ceil32(_205) <= _205:
                return Array(len=_205, data=mem[mem[64] + 64 len ceil32(_205)])
            mem[_205 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_205) + _442 + -mem[64] + 64
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0xc92819ce with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _192 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _206 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _206
        require _192 + _206 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)] = mem[ceil32(return_data.size) + _192 + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            _443 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _206
            mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
            if ceil32(_206) <= _206:
                return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
            mem[_206 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_206) + _443 + -mem[64] + 64
        mem[_206 + (2 * ceil32(return_data.size)) + 128] = 0
        _444 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _206
        mem[mem[64] + 64 len ceil32(_206)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_206)]
        if ceil32(_206) <= _206:
            return Array(len=_206, data=mem[mem[64] + 64 len ceil32(_206)])
        mem[_206 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_206) + _444 + -mem[64] + 64
    if not -uint32(arg1) + 3:
        staticcall sub_e5888867Address.0x41ac82b0 with:
                gas gas_remaining wei
               args msg.sender
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        if not ext_call.return_data[0]:
            revert with 0, 'NO NODE OWNER'
        mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 100] = msg.sender
        staticcall sub_e5888867Address.0xc92819ce with:
                gas gas_remaining wei
               args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        _200 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
        require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
        _208 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
        mem[(2 * ceil32(return_data.size)) + 96] = _208
        require _200 + _208 + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)] = mem[ceil32(return_data.size) + _200 + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + (2 * ceil32(return_data.size)) + 128] = 0
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _208
        mem[mem[64] + 64 len ceil32(_208)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_208)]
        if ceil32(_208) > _208:
            mem[_208 + mem[64] + 64] = 0
        return Array(len=_208, data=mem[mem[64] + 64 len ceil32(_208)])
    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if not ext_call.return_data[0]:
        revert with 0, 'NO NODE OWNER'
    mem[ceil32(return_data.size) + 96] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = msg.sender
    staticcall sub_2dcdd4f0Address.0xc92819ce with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _199 = mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32
    require mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 96 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 127
    _207 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], Mask(224, 32, msg.sender) >> 32 + 96])) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = _207
    require _199 + _207 + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)] = mem[ceil32(return_data.size) + _199 + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        _445 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _207
        mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
        if ceil32(_207) <= _207:
            return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
        mem[_207 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_207) + _445 + -mem[64] + 64
    mem[_207 + (2 * ceil32(return_data.size)) + 128] = 0
    _446 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _207
    mem[mem[64] + 64 len ceil32(_207)] = mem[(2 * ceil32(return_data.size)) + 128 len ceil32(_207)]
    if ceil32(_207) <= _207:
        return Array(len=_207, data=mem[mem[64] + 64 len ceil32(_207)])
    mem[_207 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_207) + _446 + -mem[64] + 64
}

function _fallback() payable {
    if calldata.size < 4:
        require not calldata.size
        emit PaymentReceived(msg.sender, msg.value);
    else:
        if unknown_0x8a02b1dd(?????) <= uint32(call.func_hash) >> 224:
            if unknown_0xbf9b81b4(?????) > uint32(call.func_hash) >> 224:
                if unknown_0x9b41056c(?????) <= uint32(call.func_hash) >> 224:
                    if unknown_0xad435847(?????) > uint32(call.func_hash) >> 224:
                        if unknown_0x9b41056c(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[36] == uint32(cd[36])
                            if not msg.sender:
                                revert with 0, 'CSHT:  creation from the zero address'
                            if stor32[address(msg.sender)]:
                                revert with 0, 'MANIA CSHT: Blacklisted address'
                            if futurUsePoolAddress == msg.sender:
                                revert with 0, 'CSHT: futur and rewardsPool cannot cashout rewards'
                            if distributionPoolAddress == msg.sender:
                                revert with 0, 'CSHT: futur and rewardsPool cannot cashout rewards'
                            if -uint32(cd[36]):
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            call 0x0.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            call sub_28ec092eAddress.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                            else:
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            call sub_fba94647Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            call sub_28ec092eAddress.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                                        else:
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, cd[4]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 64
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'CSHT: You don't have enough reward to cash out'
                            if uint8(stor29.field_8):
                                call tokenAddress.0x23b872dd with:
                                     gas gas_remaining wei
                                    args distributionPoolAddress, sub_b12cbc76Address, ext_call.return_data[32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if ext_call.return_data[32] > ext_call.return_data[0]:
                                revert with 0, 'SafeMath: subtraction overflow', 0
                            if ext_call.return_data[0] < ext_call.return_data[32]:
                                revert with 0, 17
                            call tokenAddress.0x23b872dd with:
                                 gas gas_remaining wei
                                args distributionPoolAddress, msg.sender, ext_call.return_data[0] - ext_call.return_data[32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if uint32(call.func_hash) >> 224 != unknown_0xa2c89bfb(?????):
                            if unknown_0xa538ddf2(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return futurUsePoolAddress
                            if uint32(call.func_hash) >> 224 != unknown_0xa5e1d73f(?????):
                                require unknown_0xab574761(?????) == uint32(call.func_hash) >> 224
                                require not msg.value
                                return futurFee
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == uint32(cd[4])
                            if not msg.sender:
                                revert with 0, 'SENDER CAN'T BE ZERO'
                            if -uint32(cd[4]):
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall 0x0.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall 0x0.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_28ec092eAddress.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                            else:
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_fba94647Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_fba94647Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_28ec092eAddress.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            if not ext_call.return_data[0]:
                                                revert with 0, 'NO NODE OWNER'
                                            staticcall sub_e5888867Address.0x619a635e with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            return ext_call.return_data[0]
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        mem[128] = 0x41a0894d00000000000000000000000000000000000000000000000000000000
                        mem[132] = msg.sender
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall 0x0.0x41a0894d with:
                                                gas gas_remaining wei
                                               args msg.sender
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = ceil32(return_data.size) + 128
                                        require return_data.size >= 32
                                        _670 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                        require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                        require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                        _1166 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                        if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                            revert with 0, 65
                                        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                        mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                        require _670 + (32 * _1166) + 32 <= return_data.size
                                        s = ceil32(return_data.size) + 160
                                        idx = _670 + 160
                                        while idx < _670 + (32 * _1166) + 160:
                                            require mem[idx] == mem[idx + 12 len 20]
                                            mem[s] = mem[idx]
                                            s = s + 32
                                            idx = idx + 32
                                            continue 
                                        _13203 = mem[64]
                                        mem[mem[64]] = 32
                                        mem[mem[64] + 32] = _1166
                                        idx = 0
                                        s = mem[64] + 64
                                        t = ceil32(return_data.size) + 160
                                        while idx < _1166:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        return memory
                                          from mem[64]
                                           len _13203 + (32 * _1166) + -mem[64] + 64
                                    staticcall sub_e5888867Address.0x41a0894d with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + 128
                                    require return_data.size >= 32
                                    _671 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                    require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                    require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                    _1167 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                        revert with 0, 65
                                    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                    mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    require _671 + (32 * _1167) + 32 <= return_data.size
                                    s = ceil32(return_data.size) + 160
                                    idx = _671 + 160
                                    while idx < _671 + (32 * _1167) + 160:
                                        require mem[idx] == mem[idx + 12 len 20]
                                        mem[s] = mem[idx]
                                        s = s + 32
                                        idx = idx + 32
                                        continue 
                                    _13204 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _1167
                                    idx = 0
                                    s = mem[64] + 64
                                    t = ceil32(return_data.size) + 160
                                    while idx < _1167:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    return memory
                                      from mem[64]
                                       len _13204 + (32 * _1167) + -mem[64] + 64
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x41a0894d with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + 128
                                    require return_data.size >= 32
                                    _910 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                    require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                    require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                    _1452 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                        revert with 0, 65
                                    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                    mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    require _910 + (32 * _1452) + 32 <= return_data.size
                                    s = ceil32(return_data.size) + 160
                                    idx = _910 + 160
                                    while idx < _910 + (32 * _1452) + 160:
                                        require mem[idx] == mem[idx + 12 len 20]
                                        mem[s] = mem[idx]
                                        s = s + 32
                                        idx = idx + 32
                                        continue 
                                    _13205 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _1452
                                    idx = 0
                                    s = mem[64] + 64
                                    t = ceil32(return_data.size) + 160
                                    while idx < _1452:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    return memory
                                      from mem[64]
                                       len _13205 + (32 * _1452) + -mem[64] + 64
                                staticcall sub_e5888867Address.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _911 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1453 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _911 + (32 * _1453) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _911 + 160
                                while idx < _911 + (32 * _1453) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13206 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1453
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1453:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13206 + (32 * _1453) + -mem[64] + 64
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_28ec092eAddress.0x41a0894d with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + 128
                                    require return_data.size >= 32
                                    _912 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                    require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                    require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                    _1454 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                        revert with 0, 65
                                    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                    mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    require _912 + (32 * _1454) + 32 <= return_data.size
                                    s = ceil32(return_data.size) + 160
                                    idx = _912 + 160
                                    while idx < _912 + (32 * _1454) + 160:
                                        require mem[idx] == mem[idx + 12 len 20]
                                        mem[s] = mem[idx]
                                        s = s + 32
                                        idx = idx + 32
                                        continue 
                                    _13207 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _1454
                                    idx = 0
                                    s = mem[64] + 64
                                    t = ceil32(return_data.size) + 160
                                    while idx < _1454:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    return memory
                                      from mem[64]
                                       len _13207 + (32 * _1454) + -mem[64] + 64
                                staticcall sub_e5888867Address.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _913 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1455 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _913 + (32 * _1455) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _913 + 160
                                while idx < _913 + (32 * _1455) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13208 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1455
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1455:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13208 + (32 * _1455) + -mem[64] + 64
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _1168 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1738 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _1168 + (32 * _1738) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _1168 + 160
                                while idx < _1168 + (32 * _1738) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13209 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1738
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1738:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13209 + (32 * _1738) + -mem[64] + 64
                            staticcall sub_e5888867Address.0x41a0894d with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + 128
                            require return_data.size >= 32
                            _1169 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _1739 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            require _1169 + (32 * _1739) + 32 <= return_data.size
                            s = ceil32(return_data.size) + 160
                            idx = _1169 + 160
                            while idx < _1169 + (32 * _1739) + 160:
                                require mem[idx] == mem[idx + 12 len 20]
                                mem[s] = mem[idx]
                                s = s + 32
                                idx = idx + 32
                                continue 
                            _13210 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _1739
                            idx = 0
                            s = mem[64] + 64
                            t = ceil32(return_data.size) + 160
                            while idx < _1739:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            return memory
                              from mem[64]
                               len _13210 + (32 * _1739) + -mem[64] + 64
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_fba94647Address.0x41a0894d with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = ceil32(return_data.size) + 128
                                    require return_data.size >= 32
                                    _914 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                    require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                    require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                    _1456 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                        revert with 0, 65
                                    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                    mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    require _914 + (32 * _1456) + 32 <= return_data.size
                                    s = ceil32(return_data.size) + 160
                                    idx = _914 + 160
                                    while idx < _914 + (32 * _1456) + 160:
                                        require mem[idx] == mem[idx + 12 len 20]
                                        mem[s] = mem[idx]
                                        s = s + 32
                                        idx = idx + 32
                                        continue 
                                    _13211 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _1456
                                    idx = 0
                                    s = mem[64] + 64
                                    t = ceil32(return_data.size) + 160
                                    while idx < _1456:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    return memory
                                      from mem[64]
                                       len _13211 + (32 * _1456) + -mem[64] + 64
                                staticcall sub_e5888867Address.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _915 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1457 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _915 + (32 * _1457) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _915 + 160
                                while idx < _915 + (32 * _1457) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13212 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1457
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1457:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13212 + (32 * _1457) + -mem[64] + 64
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _1170 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1740 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _1170 + (32 * _1740) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _1170 + 160
                                while idx < _1170 + (32 * _1740) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13213 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1740
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1740:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13213 + (32 * _1740) + -mem[64] + 64
                            staticcall sub_e5888867Address.0x41a0894d with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + 128
                            require return_data.size >= 32
                            _1171 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _1741 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            require _1171 + (32 * _1741) + 32 <= return_data.size
                            s = ceil32(return_data.size) + 160
                            idx = _1171 + 160
                            while idx < _1171 + (32 * _1741) + 160:
                                require mem[idx] == mem[idx + 12 len 20]
                                mem[s] = mem[idx]
                                s = s + 32
                                idx = idx + 32
                                continue 
                            _13214 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _1741
                            idx = 0
                            s = mem[64] + 64
                            t = ceil32(return_data.size) + 160
                            while idx < _1741:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            return memory
                              from mem[64]
                               len _13214 + (32 * _1741) + -mem[64] + 64
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_28ec092eAddress.0x41a0894d with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(return_data.size) + 128
                                require return_data.size >= 32
                                _1172 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _1742 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                require _1172 + (32 * _1742) + 32 <= return_data.size
                                s = ceil32(return_data.size) + 160
                                idx = _1172 + 160
                                while idx < _1172 + (32 * _1742) + 160:
                                    require mem[idx] == mem[idx + 12 len 20]
                                    mem[s] = mem[idx]
                                    s = s + 32
                                    idx = idx + 32
                                    continue 
                                _13215 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _1742
                                idx = 0
                                s = mem[64] + 64
                                t = ceil32(return_data.size) + 160
                                while idx < _1742:
                                    mem[s] = mem[t + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                return memory
                                  from mem[64]
                                   len _13215 + (32 * _1742) + -mem[64] + 64
                            staticcall sub_e5888867Address.0x41a0894d with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + 128
                            require return_data.size >= 32
                            _1173 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _1743 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            require _1173 + (32 * _1743) + 32 <= return_data.size
                            s = ceil32(return_data.size) + 160
                            idx = _1173 + 160
                            while idx < _1173 + (32 * _1743) + 160:
                                require mem[idx] == mem[idx + 12 len 20]
                                mem[s] = mem[idx]
                                s = s + 32
                                idx = idx + 32
                                continue 
                            _13216 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _1743
                            idx = 0
                            s = mem[64] + 64
                            t = ceil32(return_data.size) + 160
                            while idx < _1743:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            return memory
                              from mem[64]
                               len _13216 + (32 * _1743) + -mem[64] + 64
                        if -uint32(cd[4]) + 3:
                            staticcall sub_2dcdd4f0Address.0x41a0894d with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(return_data.size) + 128
                            require return_data.size >= 32
                            _1458 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _1985 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            require _1458 + (32 * _1985) + 32 <= return_data.size
                            s = ceil32(return_data.size) + 160
                            idx = _1458 + 160
                            while idx < _1458 + (32 * _1985) + 160:
                                require mem[idx] == mem[idx + 12 len 20]
                                mem[s] = mem[idx]
                                s = s + 32
                                idx = idx + 32
                                continue 
                            _13217 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _1985
                            idx = 0
                            s = mem[64] + 64
                            t = ceil32(return_data.size) + 160
                            while idx < _1985:
                                mem[s] = mem[t + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            return memory
                              from mem[64]
                               len _13217 + (32 * _1985) + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41a0894d with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(return_data.size) + 128
                        require return_data.size >= 32
                        _1459 = mem[128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require return_data.size + 128 > mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _1986 = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 1 < 0 or ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]) + 129
                        mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        require _1459 + (32 * _1986) + 32 <= return_data.size
                        s = ceil32(return_data.size) + 160
                        idx = _1459 + 160
                        while idx < _1459 + (32 * _1986) + 160:
                            require mem[idx] == mem[idx + 12 len 20]
                            mem[s] = mem[idx]
                            s = s + 32
                            idx = idx + 32
                            continue 
                        _13218 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _1986
                        idx = 0
                        s = mem[64] + 64
                        t = ceil32(return_data.size) + 160
                        while idx < _1986:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        return memory
                          from mem[64]
                           len _13218 + (32 * _1986) + -mem[64] + 64
                    if uint32(call.func_hash) >> 224 != unknown_0xad435847(?????):
                        if unknown_0xb12cbc76(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return sub_b12cbc76Address
                        if unknown_0xb18d9840(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return sub_b18d9840Address
                        if unknown_0xb62496f5(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            return bool(stor33[cd[4]])
                        if unknown_0xb7a0b098(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == uint32(cd[4])
                            if -uint32(cd[4]):
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall 0x0.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                            else:
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_fba94647Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                                        else:
                                            staticcall sub_e5888867Address.0xb8c7a1a2 with:
                                                    gas gas_remaining wei
                                                   args msg.sender
                        else:
                            require unknown_0xb88104fd(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == uint32(cd[4])
                            if -uint32(cd[4]):
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall 0x0.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_fba94647Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.lastDistributionCount() with:
                                                    gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return ext_call.return_data[0]
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == uint32(cd[4])
                    if not msg.sender:
                        revert with 0, 'SENDER CAN'T BE ZERO'
                    mem[132] = msg.sender
                    if -uint32(cd[4]):
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall 0x0.0x41ac82b0 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    mem[128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'NO NODE OWNER'
                                    mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 132] = msg.sender
                                    staticcall 0x0.0x5759fb02 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = (2 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    _2962 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                    _3461 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                        revert with 0, 65
                                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                        revert with 0, 65
                                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                    mem[(2 * ceil32(return_data.size)) + 128] = _3461
                                    require _2962 + _3461 + 32 <= return_data.size
                                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3461)] = mem[ceil32(return_data.size) + _2962 + 160 len ceil32(_3461)]
                                    if ceil32(_3461) <= _3461:
                                        _14455 = mem[64]
                                        mem[mem[64]] = 32
                                        mem[mem[64] + 32] = _3461
                                        mem[mem[64] + 64 len ceil32(_3461)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3461)]
                                        if ceil32(_3461) <= _3461:
                                            return Array(len=_3461, data=mem[mem[64] + 64 len ceil32(_3461)])
                                        mem[_3461 + mem[64] + 64] = 0
                                        return memory
                                          from mem[64]
                                           len ceil32(_3461) + _14455 + -mem[64] + 64
                                    mem[_3461 + (2 * ceil32(return_data.size)) + 160] = 0
                                    _14456 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _3461
                                    mem[mem[64] + 64 len ceil32(_3461)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3461)]
                                    if ceil32(_3461) <= _3461:
                                        return Array(len=_3461, data=mem[mem[64] + 64 len ceil32(_3461)])
                                    mem[_3461 + mem[64] + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_3461) + _14456 + -mem[64] + 64
                                staticcall sub_e5888867Address.0x41ac82b0 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'NO NODE OWNER'
                                mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 132] = msg.sender
                                staticcall sub_e5888867Address.0x5759fb02 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                _2963 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _3462 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                mem[(2 * ceil32(return_data.size)) + 128] = _3462
                                require _2963 + _3462 + 32 <= return_data.size
                                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3462)] = mem[ceil32(return_data.size) + _2963 + 160 len ceil32(_3462)]
                                if ceil32(_3462) <= _3462:
                                    _14457 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _3462
                                    mem[mem[64] + 64 len ceil32(_3462)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3462)]
                                    if ceil32(_3462) <= _3462:
                                        return Array(len=_3462, data=mem[mem[64] + 64 len ceil32(_3462)])
                                    mem[_3462 + mem[64] + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_3462) + _14457 + -mem[64] + 64
                                mem[_3462 + (2 * ceil32(return_data.size)) + 160] = 0
                                _14458 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3462
                                mem[mem[64] + 64 len ceil32(_3462)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3462)]
                                if ceil32(_3462) <= _3462:
                                    return Array(len=_3462, data=mem[mem[64] + 64 len ceil32(_3462)])
                                mem[_3462 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3462) + _14458 + -mem[64] + 64
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'NO NODE OWNER'
                                mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 132] = msg.sender
                                staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                _3235 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _3650 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                mem[(2 * ceil32(return_data.size)) + 128] = _3650
                                require _3235 + _3650 + 32 <= return_data.size
                                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3650)] = mem[ceil32(return_data.size) + _3235 + 160 len ceil32(_3650)]
                                if ceil32(_3650) <= _3650:
                                    _14459 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _3650
                                    mem[mem[64] + 64 len ceil32(_3650)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3650)]
                                    if ceil32(_3650) <= _3650:
                                        return Array(len=_3650, data=mem[mem[64] + 64 len ceil32(_3650)])
                                    mem[_3650 + mem[64] + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_3650) + _14459 + -mem[64] + 64
                                mem[_3650 + (2 * ceil32(return_data.size)) + 160] = 0
                                _14460 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3650
                                mem[mem[64] + 64 len ceil32(_3650)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3650)]
                                if ceil32(_3650) <= _3650:
                                    return Array(len=_3650, data=mem[mem[64] + 64 len ceil32(_3650)])
                                mem[_3650 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3650) + _14460 + -mem[64] + 64
                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_e5888867Address.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3236 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3651 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3651
                            require _3236 + _3651 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3651)] = mem[ceil32(return_data.size) + _3236 + 160 len ceil32(_3651)]
                            if ceil32(_3651) <= _3651:
                                _14461 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3651
                                mem[mem[64] + 64 len ceil32(_3651)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3651)]
                                if ceil32(_3651) <= _3651:
                                    return Array(len=_3651, data=mem[mem[64] + 64 len ceil32(_3651)])
                                mem[_3651 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3651) + _14461 + -mem[64] + 64
                            mem[_3651 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14462 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3651
                            mem[mem[64] + 64 len ceil32(_3651)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3651)]
                            if ceil32(_3651) <= _3651:
                                return Array(len=_3651, data=mem[mem[64] + 64 len ceil32(_3651)])
                            mem[_3651 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3651) + _14462 + -mem[64] + 64
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'NO NODE OWNER'
                                mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 132] = msg.sender
                                staticcall sub_28ec092eAddress.0x5759fb02 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                _3237 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _3652 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                mem[(2 * ceil32(return_data.size)) + 128] = _3652
                                require _3237 + _3652 + 32 <= return_data.size
                                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3652)] = mem[ceil32(return_data.size) + _3237 + 160 len ceil32(_3652)]
                                if ceil32(_3652) > _3652:
                                    mem[_3652 + (2 * ceil32(return_data.size)) + 160] = 0
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3652
                                mem[mem[64] + 64 len ceil32(_3652)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3652)]
                                if ceil32(_3652) > _3652:
                                    mem[_3652 + mem[64] + 64] = 0
                                return Array(len=_3652, data=mem[mem[64] + 64 len ceil32(_3652)])
                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_e5888867Address.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3238 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3653 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3653
                            require _3238 + _3653 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3653)] = mem[ceil32(return_data.size) + _3238 + 160 len ceil32(_3653)]
                            if ceil32(_3653) <= _3653:
                                _14465 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3653
                                mem[mem[64] + 64 len ceil32(_3653)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3653)]
                                if ceil32(_3653) <= _3653:
                                    return Array(len=_3653, data=mem[mem[64] + 64 len ceil32(_3653)])
                                mem[_3653 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3653) + _14465 + -mem[64] + 64
                            mem[_3653 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14466 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3653
                            mem[mem[64] + 64 len ceil32(_3653)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3653)]
                            if ceil32(_3653) <= _3653:
                                return Array(len=_3653, data=mem[mem[64] + 64 len ceil32(_3653)])
                            mem[_3653 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3653) + _14466 + -mem[64] + 64
                        if -uint32(cd[4]) + 3:
                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3463 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3826 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3826
                            require _3463 + _3826 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3826)] = mem[ceil32(return_data.size) + _3463 + 160 len ceil32(_3826)]
                            if ceil32(_3826) <= _3826:
                                _14467 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3826
                                mem[mem[64] + 64 len ceil32(_3826)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3826)]
                                if ceil32(_3826) <= _3826:
                                    return Array(len=_3826, data=mem[mem[64] + 64 len ceil32(_3826)])
                                mem[_3826 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3826) + _14467 + -mem[64] + 64
                            mem[_3826 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14468 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3826
                            mem[mem[64] + 64 len ceil32(_3826)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3826)]
                            if ceil32(_3826) <= _3826:
                                return Array(len=_3826, data=mem[mem[64] + 64 len ceil32(_3826)])
                            mem[_3826 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3826) + _14468 + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x5759fb02 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3464 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3827 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3827
                        require _3464 + _3827 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3827)] = mem[ceil32(return_data.size) + _3464 + 160 len ceil32(_3827)]
                        if ceil32(_3827) <= _3827:
                            _14469 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3827
                            mem[mem[64] + 64 len ceil32(_3827)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3827)]
                            if ceil32(_3827) <= _3827:
                                return Array(len=_3827, data=mem[mem[64] + 64 len ceil32(_3827)])
                            mem[_3827 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3827) + _14469 + -mem[64] + 64
                        mem[_3827 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14470 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3827
                        mem[mem[64] + 64 len ceil32(_3827)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3827)]
                        if ceil32(_3827) <= _3827:
                            return Array(len=_3827, data=mem[mem[64] + 64 len ceil32(_3827)])
                        mem[_3827 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3827) + _14470 + -mem[64] + 64
                    if -uint32(cd[4]) + 1:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_fba94647Address.0x41ac82b0 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'NO NODE OWNER'
                                mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 132] = msg.sender
                                staticcall sub_fba94647Address.0x5759fb02 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                _3239 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _3654 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                mem[(2 * ceil32(return_data.size)) + 128] = _3654
                                require _3239 + _3654 + 32 <= return_data.size
                                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3654)] = mem[ceil32(return_data.size) + _3239 + 160 len ceil32(_3654)]
                                if ceil32(_3654) > _3654:
                                    mem[_3654 + (2 * ceil32(return_data.size)) + 160] = 0
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3654
                                mem[mem[64] + 64 len ceil32(_3654)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3654)]
                                if ceil32(_3654) > _3654:
                                    mem[_3654 + mem[64] + 64] = 0
                                return Array(len=_3654, data=mem[mem[64] + 64 len ceil32(_3654)])
                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_e5888867Address.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3240 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3655 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3655
                            require _3240 + _3655 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3655)] = mem[ceil32(return_data.size) + _3240 + 160 len ceil32(_3655)]
                            if ceil32(_3655) <= _3655:
                                _14473 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3655
                                mem[mem[64] + 64 len ceil32(_3655)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3655)]
                                if ceil32(_3655) <= _3655:
                                    return Array(len=_3655, data=mem[mem[64] + 64 len ceil32(_3655)])
                                mem[_3655 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3655) + _14473 + -mem[64] + 64
                            mem[_3655 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14474 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3655
                            mem[mem[64] + 64 len ceil32(_3655)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3655)]
                            if ceil32(_3655) <= _3655:
                                return Array(len=_3655, data=mem[mem[64] + 64 len ceil32(_3655)])
                            mem[_3655 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3655) + _14474 + -mem[64] + 64
                        if not -uint32(cd[4]) + 3:
                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_e5888867Address.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3466 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3829 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3829
                            require _3466 + _3829 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3829)] = mem[ceil32(return_data.size) + _3466 + 160 len ceil32(_3829)]
                            if ceil32(_3829) > _3829:
                                mem[_3829 + (2 * ceil32(return_data.size)) + 160] = 0
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3829
                            mem[mem[64] + 64 len ceil32(_3829)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3829)]
                            if ceil32(_3829) > _3829:
                                mem[_3829 + mem[64] + 64] = 0
                            return Array(len=_3829, data=mem[mem[64] + 64 len ceil32(_3829)])
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3465 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3828 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3828
                        require _3465 + _3828 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3828)] = mem[ceil32(return_data.size) + _3465 + 160 len ceil32(_3828)]
                        if ceil32(_3828) <= _3828:
                            _14475 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3828
                            mem[mem[64] + 64 len ceil32(_3828)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3828)]
                            if ceil32(_3828) <= _3828:
                                return Array(len=_3828, data=mem[mem[64] + 64 len ceil32(_3828)])
                            mem[_3828 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3828) + _14475 + -mem[64] + 64
                        mem[_3828 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14476 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3828
                        mem[mem[64] + 64 len ceil32(_3828)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3828)]
                        if ceil32(_3828) <= _3828:
                            return Array(len=_3828, data=mem[mem[64] + 64 len ceil32(_3828)])
                        mem[_3828 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3828) + _14476 + -mem[64] + 64
                    if -uint32(cd[4]) + 2:
                        if -uint32(cd[4]) + 3:
                            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_28ec092eAddress.0x5759fb02 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3467 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3830 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3830
                            require _3467 + _3830 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3830)] = mem[ceil32(return_data.size) + _3467 + 160 len ceil32(_3830)]
                            if ceil32(_3830) <= _3830:
                                _14479 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3830
                                mem[mem[64] + 64 len ceil32(_3830)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3830)]
                                if ceil32(_3830) <= _3830:
                                    return Array(len=_3830, data=mem[mem[64] + 64 len ceil32(_3830)])
                                mem[_3830 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3830) + _14479 + -mem[64] + 64
                            mem[_3830 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14480 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3830
                            mem[mem[64] + 64 len ceil32(_3830)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3830)]
                            if ceil32(_3830) <= _3830:
                                return Array(len=_3830, data=mem[mem[64] + 64 len ceil32(_3830)])
                            mem[_3830 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3830) + _14480 + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x5759fb02 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3468 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3831 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3831
                        require _3468 + _3831 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3831)] = mem[ceil32(return_data.size) + _3468 + 160 len ceil32(_3831)]
                        if ceil32(_3831) <= _3831:
                            _14481 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3831
                            mem[mem[64] + 64 len ceil32(_3831)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3831)]
                            if ceil32(_3831) <= _3831:
                                return Array(len=_3831, data=mem[mem[64] + 64 len ceil32(_3831)])
                            mem[_3831 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3831) + _14481 + -mem[64] + 64
                        mem[_3831 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14482 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3831
                        mem[mem[64] + 64 len ceil32(_3831)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3831)]
                        if ceil32(_3831) <= _3831:
                            return Array(len=_3831, data=mem[mem[64] + 64 len ceil32(_3831)])
                        mem[_3831 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3831) + _14482 + -mem[64] + 64
                    if -uint32(cd[4]) + 3:
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0x5759fb02 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3656 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3977 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3977
                        require _3656 + _3977 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3977)] = mem[ceil32(return_data.size) + _3656 + 160 len ceil32(_3977)]
                        if ceil32(_3977) <= _3977:
                            _14483 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3977
                            mem[mem[64] + 64 len ceil32(_3977)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3977)]
                            if ceil32(_3977) <= _3977:
                                return Array(len=_3977, data=mem[mem[64] + 64 len ceil32(_3977)])
                            mem[_3977 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3977) + _14483 + -mem[64] + 64
                        mem[_3977 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14484 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3977
                        mem[mem[64] + 64 len ceil32(_3977)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3977)]
                        if ceil32(_3977) <= _3977:
                            return Array(len=_3977, data=mem[mem[64] + 64 len ceil32(_3977)])
                        mem[_3977 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3977) + _14484 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x5759fb0200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x5759fb02 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3657 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3978 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3978
                    require _3657 + _3978 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3978)] = mem[ceil32(return_data.size) + _3657 + 160 len ceil32(_3978)]
                    if ceil32(_3978) <= _3978:
                        _14485 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3978
                        mem[mem[64] + 64 len ceil32(_3978)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3978)]
                        if ceil32(_3978) <= _3978:
                            return Array(len=_3978, data=mem[mem[64] + 64 len ceil32(_3978)])
                        mem[_3978 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3978) + _14485 + -mem[64] + 64
                    mem[_3978 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14486 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3978
                    mem[mem[64] + 64 len ceil32(_3978)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3978)]
                    if ceil32(_3978) <= _3978:
                        return Array(len=_3978, data=mem[mem[64] + 64 len ceil32(_3978)])
                    mem[_3978 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3978) + _14486 + -mem[64] + 64
                if unknown_0x913a0aa6(?????) > uint32(call.func_hash) >> 224:
                    if unknown_0x8a02b1dd(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == bool(cd[4])
                        require cd[36] == uint32(cd[36])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if -uint32(cd[36]):
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(0)
                                        call 0x0._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_28ec092eAddress)
                                        call sub_28ec092eAddress._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                        else:
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_fba94647Address)
                                        call sub_fba94647Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_28ec092eAddress)
                                        call sub_28ec092eAddress._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                                    else:
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address._changeAutoDistri(bool arg1) with:
                                             gas gas_remaining wei
                                            args bool(cd[4])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                    if unknown_0x8b83209b(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if cd[4] >= payee.length:
                            revert with 0, 50
                        return payee[cd[4]]
                    if unknown_0x8bc9c7b0(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        stor28 = cd[4]
                    if uint32(call.func_hash) >> 224 != unknown_0x8bdaa265(?????):
                        require unknown_0x8da5cb5b(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        return owner
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[4] == address(cd[4])
                    require cd[36] == uint32(cd[36])
                    if -uint32(cd[36]):
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    staticcall 0x0.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_28ec092eAddress.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                    else:
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_fba94647Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_28ec092eAddress.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                                else:
                                    staticcall sub_e5888867Address.0x139fae2c with:
                                            gas gas_remaining wei
                                           args address(cd[4])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x913a0aa6(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    sub_b18d9840Address = address(cd[4])
                if uint32(call.func_hash) >> 224 != unknown_0x91aa5e29(?????):
                    if unknown_0x92662bc7(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        sub_b12cbc76Address = address(cd[4])
                    else:
                        if unknown_0x9349c47d(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            distributionPoolAddress = address(cd[4])
                        else:
                            if unknown_0x9852595c(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                require cd[4] == address(cd[4])
                                return released[address(cd[4])]
                            require unknown_0x9a7a23d6(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[4] == address(cd[4])
                            require cd[36] == bool(cd[36])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if not address(cd[4]) - uniswapV2PairAddress:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            'TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'
                            if not bool(stor33[address(cd[4])]) - bool(cd[36]):
                                revert with 0, 'TKN: Automated market maker pair is already set to that value'
                            stor33[address(cd[4])] = uint8(bool(cd[36]))
                            emit SetAutomatedMarketMakerPair(address(cd[4]), bool(cd[36]));
                require not msg.value
                require calldata.size - 4 >= 32
                require cd[4] == uint32(cd[4])
                if not msg.sender:
                    revert with 0, 'SENDER CAN'T BE ZERO'
                mem[132] = msg.sender
                if -uint32(cd[4]):
                    if -uint32(cd[4]) + 1:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall 0x0.0x41ac82b0 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                mem[128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                if not ext_call.return_data[0]:
                                    revert with 0, 'NO NODE OWNER'
                                mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 132] = msg.sender
                                staticcall 0x0.0x334de3a2 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = (2 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                _3181 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                                _3598 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                    revert with 0, 65
                                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                    revert with 0, 65
                                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                                mem[(2 * ceil32(return_data.size)) + 128] = _3598
                                require _3181 + _3598 + 32 <= return_data.size
                                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3598)] = mem[ceil32(return_data.size) + _3181 + 160 len ceil32(_3598)]
                                if ceil32(_3598) <= _3598:
                                    _14359 = mem[64]
                                    mem[mem[64]] = 32
                                    mem[mem[64] + 32] = _3598
                                    mem[mem[64] + 64 len ceil32(_3598)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3598)]
                                    if ceil32(_3598) <= _3598:
                                        return Array(len=_3598, data=mem[mem[64] + 64 len ceil32(_3598)])
                                    mem[_3598 + mem[64] + 64] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_3598) + _14359 + -mem[64] + 64
                                mem[_3598 + (2 * ceil32(return_data.size)) + 160] = 0
                                _14360 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3598
                                mem[mem[64] + 64 len ceil32(_3598)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3598)]
                                if ceil32(_3598) <= _3598:
                                    return Array(len=_3598, data=mem[mem[64] + 64 len ceil32(_3598)])
                                mem[_3598 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3598) + _14360 + -mem[64] + 64
                            staticcall sub_e5888867Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_e5888867Address.0x334de3a2 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3182 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3599 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3599
                            require _3182 + _3599 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3599)] = mem[ceil32(return_data.size) + _3182 + 160 len ceil32(_3599)]
                            if ceil32(_3599) <= _3599:
                                _14361 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3599
                                mem[mem[64] + 64 len ceil32(_3599)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3599)]
                                if ceil32(_3599) <= _3599:
                                    return Array(len=_3599, data=mem[mem[64] + 64 len ceil32(_3599)])
                                mem[_3599 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3599) + _14361 + -mem[64] + 64
                            mem[_3599 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14362 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3599
                            mem[mem[64] + 64 len ceil32(_3599)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3599)]
                            if ceil32(_3599) <= _3599:
                                return Array(len=_3599, data=mem[mem[64] + 64 len ceil32(_3599)])
                            mem[_3599 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3599) + _14362 + -mem[64] + 64
                        if -uint32(cd[4]) + 3:
                            staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3407 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3782 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3782
                            require _3407 + _3782 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3782)] = mem[ceil32(return_data.size) + _3407 + 160 len ceil32(_3782)]
                            if ceil32(_3782) <= _3782:
                                _14363 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3782
                                mem[mem[64] + 64 len ceil32(_3782)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3782)]
                                if ceil32(_3782) <= _3782:
                                    return Array(len=_3782, data=mem[mem[64] + 64 len ceil32(_3782)])
                                mem[_3782 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3782) + _14363 + -mem[64] + 64
                            mem[_3782 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14364 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3782
                            mem[mem[64] + 64 len ceil32(_3782)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3782)]
                            if ceil32(_3782) <= _3782:
                                return Array(len=_3782, data=mem[mem[64] + 64 len ceil32(_3782)])
                            mem[_3782 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3782) + _14364 + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3408 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3783 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3783
                        require _3408 + _3783 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3783)] = mem[ceil32(return_data.size) + _3408 + 160 len ceil32(_3783)]
                        if ceil32(_3783) <= _3783:
                            _14365 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3783
                            mem[mem[64] + 64 len ceil32(_3783)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3783)]
                            if ceil32(_3783) <= _3783:
                                return Array(len=_3783, data=mem[mem[64] + 64 len ceil32(_3783)])
                            mem[_3783 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3783) + _14365 + -mem[64] + 64
                        mem[_3783 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14366 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3783
                        mem[mem[64] + 64 len ceil32(_3783)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3783)]
                        if ceil32(_3783) <= _3783:
                            return Array(len=_3783, data=mem[mem[64] + 64 len ceil32(_3783)])
                        mem[_3783 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3783) + _14366 + -mem[64] + 64
                    if -uint32(cd[4]) + 2:
                        if -uint32(cd[4]) + 3:
                            staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_28ec092eAddress.0x334de3a2 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3409 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3784 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3784
                            require _3409 + _3784 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3784)] = mem[ceil32(return_data.size) + _3409 + 160 len ceil32(_3784)]
                            if ceil32(_3784) > _3784:
                                mem[_3784 + (2 * ceil32(return_data.size)) + 160] = 0
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3784
                            mem[mem[64] + 64 len ceil32(_3784)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3784)]
                            if ceil32(_3784) > _3784:
                                mem[_3784 + mem[64] + 64] = 0
                            return Array(len=_3784, data=mem[mem[64] + 64 len ceil32(_3784)])
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3410 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3785 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3785
                        require _3410 + _3785 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3785)] = mem[ceil32(return_data.size) + _3410 + 160 len ceil32(_3785)]
                        if ceil32(_3785) <= _3785:
                            _14369 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3785
                            mem[mem[64] + 64 len ceil32(_3785)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3785)]
                            if ceil32(_3785) <= _3785:
                                return Array(len=_3785, data=mem[mem[64] + 64 len ceil32(_3785)])
                            mem[_3785 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3785) + _14369 + -mem[64] + 64
                        mem[_3785 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14370 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3785
                        mem[mem[64] + 64 len ceil32(_3785)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3785)]
                        if ceil32(_3785) <= _3785:
                            return Array(len=_3785, data=mem[mem[64] + 64 len ceil32(_3785)])
                        mem[_3785 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3785) + _14370 + -mem[64] + 64
                    if -uint32(cd[4]) + 3:
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3600 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3941 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3941
                        require _3600 + _3941 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3941)] = mem[ceil32(return_data.size) + _3600 + 160 len ceil32(_3941)]
                        if ceil32(_3941) <= _3941:
                            _14371 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3941
                            mem[mem[64] + 64 len ceil32(_3941)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3941)]
                            if ceil32(_3941) <= _3941:
                                return Array(len=_3941, data=mem[mem[64] + 64 len ceil32(_3941)])
                            mem[_3941 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3941) + _14371 + -mem[64] + 64
                        mem[_3941 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14372 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3941
                        mem[mem[64] + 64 len ceil32(_3941)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3941)]
                        if ceil32(_3941) <= _3941:
                            return Array(len=_3941, data=mem[mem[64] + 64 len ceil32(_3941)])
                        mem[_3941 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3941) + _14372 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x334de3a2 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3601 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3942 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3942
                    require _3601 + _3942 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3942)] = mem[ceil32(return_data.size) + _3601 + 160 len ceil32(_3942)]
                    if ceil32(_3942) <= _3942:
                        _14373 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3942
                        mem[mem[64] + 64 len ceil32(_3942)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3942)]
                        if ceil32(_3942) <= _3942:
                            return Array(len=_3942, data=mem[mem[64] + 64 len ceil32(_3942)])
                        mem[_3942 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3942) + _14373 + -mem[64] + 64
                    mem[_3942 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14374 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3942
                    mem[mem[64] + 64 len ceil32(_3942)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3942)]
                    if ceil32(_3942) <= _3942:
                        return Array(len=_3942, data=mem[mem[64] + 64 len ceil32(_3942)])
                    mem[_3942 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3942) + _14374 + -mem[64] + 64
                if -uint32(cd[4]) + 1:
                    if -uint32(cd[4]) + 2:
                        if -uint32(cd[4]) + 3:
                            staticcall sub_fba94647Address.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall sub_fba94647Address.0x334de3a2 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3411 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3786 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3786
                            require _3411 + _3786 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3786)] = mem[ceil32(return_data.size) + _3411 + 160 len ceil32(_3786)]
                            if ceil32(_3786) > _3786:
                                mem[_3786 + (2 * ceil32(return_data.size)) + 160] = 0
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3786
                            mem[mem[64] + 64 len ceil32(_3786)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3786)]
                            if ceil32(_3786) > _3786:
                                mem[_3786 + mem[64] + 64] = 0
                            return Array(len=_3786, data=mem[mem[64] + 64 len ceil32(_3786)])
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3412 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3787 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3787
                        require _3412 + _3787 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3787)] = mem[ceil32(return_data.size) + _3412 + 160 len ceil32(_3787)]
                        if ceil32(_3787) <= _3787:
                            _14377 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3787
                            mem[mem[64] + 64 len ceil32(_3787)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3787)]
                            if ceil32(_3787) <= _3787:
                                return Array(len=_3787, data=mem[mem[64] + 64 len ceil32(_3787)])
                            mem[_3787 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3787) + _14377 + -mem[64] + 64
                        mem[_3787 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14378 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3787
                        mem[mem[64] + 64 len ceil32(_3787)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3787)]
                        if ceil32(_3787) <= _3787:
                            return Array(len=_3787, data=mem[mem[64] + 64 len ceil32(_3787)])
                        mem[_3787 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3787) + _14378 + -mem[64] + 64
                    if -uint32(cd[4]) + 3:
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3602 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3943 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3943
                        require _3602 + _3943 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3943)] = mem[ceil32(return_data.size) + _3602 + 160 len ceil32(_3943)]
                        if ceil32(_3943) <= _3943:
                            _14379 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3943
                            mem[mem[64] + 64 len ceil32(_3943)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3943)]
                            if ceil32(_3943) <= _3943:
                                return Array(len=_3943, data=mem[mem[64] + 64 len ceil32(_3943)])
                            mem[_3943 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3943) + _14379 + -mem[64] + 64
                        mem[_3943 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14380 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3943
                        mem[mem[64] + 64 len ceil32(_3943)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3943)]
                        if ceil32(_3943) <= _3943:
                            return Array(len=_3943, data=mem[mem[64] + 64 len ceil32(_3943)])
                        mem[_3943 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3943) + _14380 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x334de3a2 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3603 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3944 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3944
                    require _3603 + _3944 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3944)] = mem[ceil32(return_data.size) + _3603 + 160 len ceil32(_3944)]
                    if ceil32(_3944) <= _3944:
                        _14381 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3944
                        mem[mem[64] + 64 len ceil32(_3944)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3944)]
                        if ceil32(_3944) <= _3944:
                            return Array(len=_3944, data=mem[mem[64] + 64 len ceil32(_3944)])
                        mem[_3944 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3944) + _14381 + -mem[64] + 64
                    mem[_3944 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14382 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3944
                    mem[mem[64] + 64 len ceil32(_3944)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3944)]
                    if ceil32(_3944) <= _3944:
                        return Array(len=_3944, data=mem[mem[64] + 64 len ceil32(_3944)])
                    mem[_3944 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3944) + _14382 + -mem[64] + 64
                if -uint32(cd[4]) + 2:
                    if -uint32(cd[4]) + 3:
                        staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_28ec092eAddress.0x334de3a2 with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3604 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3945 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3945
                        require _3604 + _3945 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3945)] = mem[ceil32(return_data.size) + _3604 + 160 len ceil32(_3945)]
                        if ceil32(_3945) <= _3945:
                            _14383 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3945
                            mem[mem[64] + 64 len ceil32(_3945)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3945)]
                            if ceil32(_3945) <= _3945:
                                return Array(len=_3945, data=mem[mem[64] + 64 len ceil32(_3945)])
                            mem[_3945 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3945) + _14383 + -mem[64] + 64
                        mem[_3945 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14384 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3945
                        mem[mem[64] + 64 len ceil32(_3945)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3945)]
                        if ceil32(_3945) <= _3945:
                            return Array(len=_3945, data=mem[mem[64] + 64 len ceil32(_3945)])
                        mem[_3945 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3945) + _14384 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x334de3a2 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3605 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3946 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3946
                    require _3605 + _3946 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3946)] = mem[ceil32(return_data.size) + _3605 + 160 len ceil32(_3946)]
                    if ceil32(_3946) <= _3946:
                        _14385 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3946
                        mem[mem[64] + 64 len ceil32(_3946)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3946)]
                        if ceil32(_3946) <= _3946:
                            return Array(len=_3946, data=mem[mem[64] + 64 len ceil32(_3946)])
                        mem[_3946 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3946) + _14385 + -mem[64] + 64
                    mem[_3946 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14386 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3946
                    mem[mem[64] + 64 len ceil32(_3946)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3946)]
                    if ceil32(_3946) <= _3946:
                        return Array(len=_3946, data=mem[mem[64] + 64 len ceil32(_3946)])
                    mem[_3946 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3946) + _14386 + -mem[64] + 64
                if -uint32(cd[4]) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_2dcdd4f0Address.0x334de3a2 with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3788 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _4075 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _4075
                    require _3788 + _4075 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4075)] = mem[ceil32(return_data.size) + _3788 + 160 len ceil32(_4075)]
                    if ceil32(_4075) <= _4075:
                        _14387 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _4075
                        mem[mem[64] + 64 len ceil32(_4075)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4075)]
                        if ceil32(_4075) <= _4075:
                            return Array(len=_4075, data=mem[mem[64] + 64 len ceil32(_4075)])
                        mem[_4075 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_4075) + _14387 + -mem[64] + 64
                    mem[_4075 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14388 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _4075
                    mem[mem[64] + 64 len ceil32(_4075)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4075)]
                    if ceil32(_4075) <= _4075:
                        return Array(len=_4075, data=mem[mem[64] + 64 len ceil32(_4075)])
                    mem[_4075 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_4075) + _14388 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0x334de3a200000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0x334de3a2 with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3789 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _4076 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _4076
                require _3789 + _4076 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4076)] = mem[ceil32(return_data.size) + _3789 + 160 len ceil32(_4076)]
                if ceil32(_4076) <= _4076:
                    _14389 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _4076
                    mem[mem[64] + 64 len ceil32(_4076)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4076)]
                    if ceil32(_4076) <= _4076:
                        return Array(len=_4076, data=mem[mem[64] + 64 len ceil32(_4076)])
                    mem[_4076 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_4076) + _14389 + -mem[64] + 64
                mem[_4076 + (2 * ceil32(return_data.size)) + 160] = 0
                _14390 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _4076
                mem[mem[64] + 64 len ceil32(_4076)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4076)]
                if ceil32(_4076) <= _4076:
                    return Array(len=_4076, data=mem[mem[64] + 64 len ceil32(_4076)])
                mem[_4076 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_4076) + _14390 + -mem[64] + 64
            if unknown_0xdf3b9053(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0xf2d252d6(?????) <= uint32(call.func_hash) >> 224:
                    if unknown_0xf2d252d6(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call 0x0._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_28ec092eAddress._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_fba94647Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_28ec092eAddress._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
                    if unknown_0xf2fde38b(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if not address(cd[4]):
                            revert with 0, 'Ownable: new owner is the zero address'
                        emit OwnershipTransferred(owner, address(cd[4]));
                        owner = address(cd[4])
                    if unknown_0xf4fbdc44(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] == uint32(cd[36])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if -uint32(cd[36]):
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall 0x0.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                        else:
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_fba94647Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x619a635e with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                    else:
                        if uint32(call.func_hash) >> 224 != unknown_0xfb184a27(?????):
                            if unknown_0xfba94647(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return sub_fba94647Address
                            require unknown_0xfc0c546a(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            return tokenAddress
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] == uint32(cd[36])
                        if -uint32(cd[36]):
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall 0x0.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                        else:
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_fba94647Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                                    else:
                                        staticcall sub_e5888867Address.0x4491a7e4 with:
                                                gas gas_remaining wei
                                               args address(cd[4])
                else:
                    if unknown_0xdf3b9053(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        sub_8700ee59 = cd[4]
                    if unknown_0xe33b7de3(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return totalReleased
                    if unknown_0xe5888867(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return sub_e5888867Address
                    if unknown_0xe60cfa5e(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if cd[4] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        call tokenAddress.0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, address(this.address), 10^18 * cd[4]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if walletBalances[address(msg.sender)] > !cd[4]:
                            revert with 0, 17
                        walletBalances[address(msg.sender)] += cd[4]
                    if unknown_0xebc77991(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall 0x0.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall 0x0.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                else:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                else:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_fba94647Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_fba94647Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                else:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                else:
                                    if -uint32(cd[4]) + 3:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                                    else:
                                        if -uint32(cd[4]) + 2:
                                            staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[4])
                    else:
                        require unknown_0xeed035a7(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall 0x0.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_fba94647Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.gasForDistribution() with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.gasForDistribution() with:
                                                gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return ext_call.return_data[0]
            if unknown_0xc7e17a17(?????) > uint32(call.func_hash) >> 224:
                if unknown_0xbf9b81b4(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[36] == uint32(cd[36])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if -uint32(cd[36]):
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(0)
                                    call 0x0.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                    else:
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_fba94647Address)
                                    call sub_fba94647Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xcece91eb with:
                                         gas gas_remaining wei
                                        args cd[4]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    if unknown_0xc2802fbe(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall 0x0.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_fba94647Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x8a327eaa with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x8a327eaa with:
                                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return ext_call.return_data[0]
                    if unknown_0xc5ca7d6d(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return distributionPoolAddress
                    if unknown_0xc7533fee(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call 0x0._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_28ec092eAddress._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_fba94647Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        call sub_28ec092eAddress._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        call sub_2dcdd4f0Address._distributeRewards() with:
                                             gas gas_remaining wei
                                    else:
                                        call sub_e5888867Address._distributeRewards() with:
                                             gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                    else:
                        require unknown_0xc77d6a3d(?????) == uint32(call.func_hash) >> 224
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] == uint32(cd[36])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if not -uint32(cd[36]):
                            sub_fba94647Address = address(cd[4])
                        if not -uint32(cd[36]) + 1:
                            sub_28ec092eAddress = address(cd[4])
                        if not -uint32(cd[36]) + 2:
                            sub_2dcdd4f0Address = address(cd[4])
                        if not -uint32(cd[36]) + 3:
                            sub_e5888867Address = address(cd[4])
            if unknown_0xc7e17a17(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 32
                require cd[4] == address(cd[4])
                return sub_c7e17a17[cd[4]]
            if uint32(call.func_hash) >> 224 != unknown_0xcd38599b(?????):
                if unknown_0xce7c2ac2(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    return shares[address(cd[4])]
                if unknown_0xd79779b2(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    return totalReleased[address(cd[4])]
                if unknown_0xd8929342(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[4] == address(cd[4])
                    require cd[36] == bool(cd[36])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    stor32[address(cd[4])] = uint8(bool(cd[36]))
                require unknown_0xdf26f1a1(?????) == uint32(call.func_hash) >> 224
                require not msg.value
                require calldata.size - 4 >= 32
                require cd[4] == uint32(cd[4])
                if -uint32(cd[4]):
                    if -uint32(cd[4]) + 1:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall 0x0.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                    else:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_28ec092eAddress.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                else:
                    if -uint32(cd[4]) + 1:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_fba94647Address.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                    else:
                        if -uint32(cd[4]) + 2:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_28ec092eAddress.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 3:
                                staticcall sub_2dcdd4f0Address.0xb8527aef with:
                                        gas gas_remaining wei
                            else:
                                staticcall sub_e5888867Address.0xb8527aef with:
                                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return ext_call.return_data[0]
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] == uint32(cd[4])
            if not msg.sender:
                revert with 0, 'SENDER CAN'T BE ZERO'
            mem[132] = msg.sender
            if -uint32(cd[4]):
                if -uint32(cd[4]) + 1:
                    if -uint32(cd[4]) + 2:
                        if -uint32(cd[4]) + 3:
                            staticcall 0x0.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall 0x0.0xc92819ce with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _3255 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3658 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3658
                            require _3255 + _3658 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3658)] = mem[ceil32(return_data.size) + _3255 + 160 len ceil32(_3658)]
                            if ceil32(_3658) <= _3658:
                                _14487 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3658
                                mem[mem[64] + 64 len ceil32(_3658)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3658)]
                                if ceil32(_3658) <= _3658:
                                    return Array(len=_3658, data=mem[mem[64] + 64 len ceil32(_3658)])
                                mem[_3658 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3658) + _14487 + -mem[64] + 64
                            mem[_3658 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14488 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3658
                            mem[mem[64] + 64 len ceil32(_3658)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3658)]
                            if ceil32(_3658) <= _3658:
                                return Array(len=_3658, data=mem[mem[64] + 64 len ceil32(_3658)])
                            mem[_3658 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3658) + _14488 + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0xc92819ce with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3256 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3659 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3659
                        require _3256 + _3659 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3659)] = mem[ceil32(return_data.size) + _3256 + 160 len ceil32(_3659)]
                        if ceil32(_3659) <= _3659:
                            _14489 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3659
                            mem[mem[64] + 64 len ceil32(_3659)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3659)]
                            if ceil32(_3659) <= _3659:
                                return Array(len=_3659, data=mem[mem[64] + 64 len ceil32(_3659)])
                            mem[_3659 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3659) + _14489 + -mem[64] + 64
                        mem[_3659 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14490 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3659
                        mem[mem[64] + 64 len ceil32(_3659)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3659)]
                        if ceil32(_3659) <= _3659:
                            return Array(len=_3659, data=mem[mem[64] + 64 len ceil32(_3659)])
                        mem[_3659 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3659) + _14490 + -mem[64] + 64
                    if -uint32(cd[4]) + 3:
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0xc92819ce with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3471 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3832 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3832
                        require _3471 + _3832 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3832)] = mem[ceil32(return_data.size) + _3471 + 160 len ceil32(_3832)]
                        if ceil32(_3832) > _3832:
                            mem[_3832 + (2 * ceil32(return_data.size)) + 160] = 0
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3832
                        mem[mem[64] + 64 len ceil32(_3832)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3832)]
                        if ceil32(_3832) > _3832:
                            mem[_3832 + mem[64] + 64] = 0
                        return Array(len=_3832, data=mem[mem[64] + 64 len ceil32(_3832)])
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3472 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3833 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3833
                    require _3472 + _3833 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3833)] = mem[ceil32(return_data.size) + _3472 + 160 len ceil32(_3833)]
                    if ceil32(_3833) <= _3833:
                        _14493 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3833
                        mem[mem[64] + 64 len ceil32(_3833)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3833)]
                        if ceil32(_3833) <= _3833:
                            return Array(len=_3833, data=mem[mem[64] + 64 len ceil32(_3833)])
                        mem[_3833 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3833) + _14493 + -mem[64] + 64
                    mem[_3833 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14494 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3833
                    mem[mem[64] + 64 len ceil32(_3833)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3833)]
                    if ceil32(_3833) <= _3833:
                        return Array(len=_3833, data=mem[mem[64] + 64 len ceil32(_3833)])
                    mem[_3833 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3833) + _14494 + -mem[64] + 64
                if -uint32(cd[4]) + 2:
                    if -uint32(cd[4]) + 3:
                        staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_28ec092eAddress.0xc92819ce with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3473 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3834 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3834
                        require _3473 + _3834 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3834)] = mem[ceil32(return_data.size) + _3473 + 160 len ceil32(_3834)]
                        if ceil32(_3834) <= _3834:
                            _14495 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3834
                            mem[mem[64] + 64 len ceil32(_3834)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3834)]
                            if ceil32(_3834) <= _3834:
                                return Array(len=_3834, data=mem[mem[64] + 64 len ceil32(_3834)])
                            mem[_3834 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3834) + _14495 + -mem[64] + 64
                        mem[_3834 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14496 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3834
                        mem[mem[64] + 64 len ceil32(_3834)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3834)]
                        if ceil32(_3834) <= _3834:
                            return Array(len=_3834, data=mem[mem[64] + 64 len ceil32(_3834)])
                        mem[_3834 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3834) + _14496 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3474 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3835 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3835
                    require _3474 + _3835 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3835)] = mem[ceil32(return_data.size) + _3474 + 160 len ceil32(_3835)]
                    if ceil32(_3835) <= _3835:
                        _14497 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3835
                        mem[mem[64] + 64 len ceil32(_3835)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3835)]
                        if ceil32(_3835) <= _3835:
                            return Array(len=_3835, data=mem[mem[64] + 64 len ceil32(_3835)])
                        mem[_3835 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3835) + _14497 + -mem[64] + 64
                    mem[_3835 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14498 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3835
                    mem[mem[64] + 64 len ceil32(_3835)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3835)]
                    if ceil32(_3835) <= _3835:
                        return Array(len=_3835, data=mem[mem[64] + 64 len ceil32(_3835)])
                    mem[_3835 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3835) + _14498 + -mem[64] + 64
                if -uint32(cd[4]) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_2dcdd4f0Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3660 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3979 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3979
                    require _3660 + _3979 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3979)] = mem[ceil32(return_data.size) + _3660 + 160 len ceil32(_3979)]
                    if ceil32(_3979) <= _3979:
                        _14499 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3979
                        mem[mem[64] + 64 len ceil32(_3979)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3979)]
                        if ceil32(_3979) <= _3979:
                            return Array(len=_3979, data=mem[mem[64] + 64 len ceil32(_3979)])
                        mem[_3979 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3979) + _14499 + -mem[64] + 64
                    mem[_3979 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14500 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3979
                    mem[mem[64] + 64 len ceil32(_3979)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3979)]
                    if ceil32(_3979) <= _3979:
                        return Array(len=_3979, data=mem[mem[64] + 64 len ceil32(_3979)])
                    mem[_3979 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3979) + _14500 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3661 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3980 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3980
                require _3661 + _3980 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3980)] = mem[ceil32(return_data.size) + _3661 + 160 len ceil32(_3980)]
                if ceil32(_3980) <= _3980:
                    _14501 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3980
                    mem[mem[64] + 64 len ceil32(_3980)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3980)]
                    if ceil32(_3980) <= _3980:
                        return Array(len=_3980, data=mem[mem[64] + 64 len ceil32(_3980)])
                    mem[_3980 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3980) + _14501 + -mem[64] + 64
                mem[_3980 + (2 * ceil32(return_data.size)) + 160] = 0
                _14502 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3980
                mem[mem[64] + 64 len ceil32(_3980)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3980)]
                if ceil32(_3980) <= _3980:
                    return Array(len=_3980, data=mem[mem[64] + 64 len ceil32(_3980)])
                mem[_3980 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3980) + _14502 + -mem[64] + 64
            if -uint32(cd[4]) + 1:
                if -uint32(cd[4]) + 2:
                    if -uint32(cd[4]) + 3:
                        staticcall sub_fba94647Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_fba94647Address.0xc92819ce with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3475 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3836 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3836
                        require _3475 + _3836 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3836)] = mem[ceil32(return_data.size) + _3475 + 160 len ceil32(_3836)]
                        if ceil32(_3836) <= _3836:
                            _14503 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3836
                            mem[mem[64] + 64 len ceil32(_3836)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3836)]
                            if ceil32(_3836) <= _3836:
                                return Array(len=_3836, data=mem[mem[64] + 64 len ceil32(_3836)])
                            mem[_3836 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3836) + _14503 + -mem[64] + 64
                        mem[_3836 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14504 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3836
                        mem[mem[64] + 64 len ceil32(_3836)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3836)]
                        if ceil32(_3836) <= _3836:
                            return Array(len=_3836, data=mem[mem[64] + 64 len ceil32(_3836)])
                        mem[_3836 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3836) + _14504 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3476 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3837 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3837
                    require _3476 + _3837 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3837)] = mem[ceil32(return_data.size) + _3476 + 160 len ceil32(_3837)]
                    if ceil32(_3837) <= _3837:
                        _14505 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3837
                        mem[mem[64] + 64 len ceil32(_3837)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3837)]
                        if ceil32(_3837) <= _3837:
                            return Array(len=_3837, data=mem[mem[64] + 64 len ceil32(_3837)])
                        mem[_3837 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3837) + _14505 + -mem[64] + 64
                    mem[_3837 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14506 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3837
                    mem[mem[64] + 64 len ceil32(_3837)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3837)]
                    if ceil32(_3837) <= _3837:
                        return Array(len=_3837, data=mem[mem[64] + 64 len ceil32(_3837)])
                    mem[_3837 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3837) + _14506 + -mem[64] + 64
                if not -uint32(cd[4]) + 3:
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3663 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3982 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3982
                    require _3663 + _3982 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3982)] = mem[ceil32(return_data.size) + _3663 + 160 len ceil32(_3982)]
                    if ceil32(_3982) > _3982:
                        mem[_3982 + (2 * ceil32(return_data.size)) + 160] = 0
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3982
                    mem[mem[64] + 64 len ceil32(_3982)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3982)]
                    if ceil32(_3982) > _3982:
                        mem[_3982 + mem[64] + 64] = 0
                    return Array(len=_3982, data=mem[mem[64] + 64 len ceil32(_3982)])
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_2dcdd4f0Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3662 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3981 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3981
                require _3662 + _3981 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3981)] = mem[ceil32(return_data.size) + _3662 + 160 len ceil32(_3981)]
                if ceil32(_3981) <= _3981:
                    _14507 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3981
                    mem[mem[64] + 64 len ceil32(_3981)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3981)]
                    if ceil32(_3981) <= _3981:
                        return Array(len=_3981, data=mem[mem[64] + 64 len ceil32(_3981)])
                    mem[_3981 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3981) + _14507 + -mem[64] + 64
                mem[_3981 + (2 * ceil32(return_data.size)) + 160] = 0
                _14508 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3981
                mem[mem[64] + 64 len ceil32(_3981)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3981)]
                if ceil32(_3981) <= _3981:
                    return Array(len=_3981, data=mem[mem[64] + 64 len ceil32(_3981)])
                mem[_3981 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3981) + _14508 + -mem[64] + 64
            if -uint32(cd[4]) + 2:
                if -uint32(cd[4]) + 3:
                    staticcall sub_28ec092eAddress.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_28ec092eAddress.0xc92819ce with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3664 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3983 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3983
                    require _3664 + _3983 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3983)] = mem[ceil32(return_data.size) + _3664 + 160 len ceil32(_3983)]
                    if ceil32(_3983) <= _3983:
                        _14511 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3983
                        mem[mem[64] + 64 len ceil32(_3983)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3983)]
                        if ceil32(_3983) <= _3983:
                            return Array(len=_3983, data=mem[mem[64] + 64 len ceil32(_3983)])
                        mem[_3983 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3983) + _14511 + -mem[64] + 64
                    mem[_3983 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14512 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3983
                    mem[mem[64] + 64 len ceil32(_3983)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3983)]
                    if ceil32(_3983) <= _3983:
                        return Array(len=_3983, data=mem[mem[64] + 64 len ceil32(_3983)])
                    mem[_3983 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3983) + _14512 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3665 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3984 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3984
                require _3665 + _3984 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3984)] = mem[ceil32(return_data.size) + _3665 + 160 len ceil32(_3984)]
                if ceil32(_3984) <= _3984:
                    _14513 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3984
                    mem[mem[64] + 64 len ceil32(_3984)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3984)]
                    if ceil32(_3984) <= _3984:
                        return Array(len=_3984, data=mem[mem[64] + 64 len ceil32(_3984)])
                    mem[_3984 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3984) + _14513 + -mem[64] + 64
                mem[_3984 + (2 * ceil32(return_data.size)) + 160] = 0
                _14514 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3984
                mem[mem[64] + 64 len ceil32(_3984)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3984)]
                if ceil32(_3984) <= _3984:
                    return Array(len=_3984, data=mem[mem[64] + 64 len ceil32(_3984)])
                mem[_3984 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3984) + _14514 + -mem[64] + 64
            if -uint32(cd[4]) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_2dcdd4f0Address.0xc92819ce with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3838 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _4107 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _4107
                require _3838 + _4107 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4107)] = mem[ceil32(return_data.size) + _3838 + 160 len ceil32(_4107)]
                if ceil32(_4107) <= _4107:
                    _14515 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _4107
                    mem[mem[64] + 64 len ceil32(_4107)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4107)]
                    if ceil32(_4107) <= _4107:
                        return Array(len=_4107, data=mem[mem[64] + 64 len ceil32(_4107)])
                    mem[_4107 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_4107) + _14515 + -mem[64] + 64
                mem[_4107 + (2 * ceil32(return_data.size)) + 160] = 0
                _14516 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _4107
                mem[mem[64] + 64 len ceil32(_4107)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4107)]
                if ceil32(_4107) <= _4107:
                    return Array(len=_4107, data=mem[mem[64] + 64 len ceil32(_4107)])
                mem[_4107 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_4107) + _14516 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 128] = 0xc92819ce00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 132] = msg.sender
            staticcall sub_e5888867Address.0xc92819ce with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 128
            require return_data.size >= 32
            _3839 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
            _4108 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
            mem[(2 * ceil32(return_data.size)) + 128] = _4108
            require _3839 + _4108 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4108)] = mem[ceil32(return_data.size) + _3839 + 160 len ceil32(_4108)]
            if ceil32(_4108) <= _4108:
                _14517 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _4108
                mem[mem[64] + 64 len ceil32(_4108)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4108)]
                if ceil32(_4108) <= _4108:
                    return Array(len=_4108, data=mem[mem[64] + 64 len ceil32(_4108)])
                mem[_4108 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_4108) + _14517 + -mem[64] + 64
            mem[_4108 + (2 * ceil32(return_data.size)) + 160] = 0
            _14518 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _4108
            mem[mem[64] + 64 len ceil32(_4108)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_4108)]
            if ceil32(_4108) <= _4108:
                return Array(len=_4108, data=mem[mem[64] + 64 len ceil32(_4108)])
            mem[_4108 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_4108) + _14518 + -mem[64] + 64
        if unknown_0x4ea6f0bd(?????) <= uint32(call.func_hash) >> 224:
            if unknown_0x6aec847e(?????) > uint32(call.func_hash) >> 224:
                if unknown_0x5dcdbb35(?????) <= uint32(call.func_hash) >> 224:
                    if unknown_0x5dcdbb35(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] <= test266151307()
                        require calldata.size > cd[4] + 35
                        if ('cd', 4).length > test266151307():
                            revert with 0, 65
                        if ceil32(32 * ('cd', 4).length) + 129 < 128 or ceil32(32 * ('cd', 4).length) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = ceil32(32 * ('cd', 4).length) + 129
                        mem[128] = ('cd', 4).length
                        require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
                        s = 160
                        idx = cd[4] + 36
                        while idx < cd[4] + (32 * ('cd', 4).length) + 36:
                            mem[s] = cd[idx]
                            s = s + 32
                            idx = idx + 32
                            continue 
                        require cd[36] == uint32(cd[36])
                        if -uint32(cd[36]):
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15531 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call 0x0.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15531
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15595 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15595]:
                                                revert with 0, 17
                                            if mem[_15595] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15595] > !mem[_15595 + 32]:
                                                revert with 0, 17
                                            if mem[_15595] + mem[_15595 + 32] < mem[_15595]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15533 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15533
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15596 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15596]:
                                                revert with 0, 17
                                            if mem[_15596] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15596] > !mem[_15596 + 32]:
                                                revert with 0, 17
                                            if mem[_15596] + mem[_15596 + 32] < mem[_15596]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                else:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15535 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15535
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15597 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15597]:
                                                revert with 0, 17
                                            if mem[_15597] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15597] > !mem[_15597 + 32]:
                                                revert with 0, 17
                                            if mem[_15597] + mem[_15597 + 32] < mem[_15597]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15537 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15537
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15598 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15598]:
                                                revert with 0, 17
                                            if mem[_15598] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15598] > !mem[_15598 + 32]:
                                                revert with 0, 17
                                            if mem[_15598] + mem[_15598 + 32] < mem[_15598]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15539 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_28ec092eAddress.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15539
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15599 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15599]:
                                                revert with 0, 17
                                            if mem[_15599] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15599] > !mem[_15599 + 32]:
                                                revert with 0, 17
                                            if mem[_15599] + mem[_15599 + 32] < mem[_15599]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15541 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15541
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15600 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15600]:
                                                revert with 0, 17
                                            if mem[_15600] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15600] > !mem[_15600 + 32]:
                                                revert with 0, 17
                                            if mem[_15600] + mem[_15600 + 32] < mem[_15600]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                else:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15543 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15543
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15601 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15601]:
                                                revert with 0, 17
                                            if mem[_15601] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15601] > !mem[_15601 + 32]:
                                                revert with 0, 17
                                            if mem[_15601] + mem[_15601 + 32] < mem[_15601]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15545 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15545
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15602 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15602]:
                                                revert with 0, 17
                                            if mem[_15602] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15602] > !mem[_15602 + 32]:
                                                revert with 0, 17
                                            if mem[_15602] + mem[_15602 + 32] < mem[_15602]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                        else:
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15547 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_fba94647Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15547
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15603 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15603]:
                                                revert with 0, 17
                                            if mem[_15603] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15603] > !mem[_15603 + 32]:
                                                revert with 0, 17
                                            if mem[_15603] + mem[_15603 + 32] < mem[_15603]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15549 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15549
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15604 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15604]:
                                                revert with 0, 17
                                            if mem[_15604] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15604] > !mem[_15604 + 32]:
                                                revert with 0, 17
                                            if mem[_15604] + mem[_15604 + 32] < mem[_15604]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                else:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15551 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15551
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15605 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15605]:
                                                revert with 0, 17
                                            if mem[_15605] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15605] > !mem[_15605 + 32]:
                                                revert with 0, 17
                                            if mem[_15605] + mem[_15605 + 32] < mem[_15605]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15553 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15553
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15606 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15606]:
                                                revert with 0, 17
                                            if mem[_15606] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15606] > !mem[_15606 + 32]:
                                                revert with 0, 17
                                            if mem[_15606] + mem[_15606 + 32] < mem[_15606]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15555 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_28ec092eAddress.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15555
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15607 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15607]:
                                                revert with 0, 17
                                            if mem[_15607] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15607] > !mem[_15607 + 32]:
                                                revert with 0, 17
                                            if mem[_15607] + mem[_15607 + 32] < mem[_15607]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15557 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15557
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15608 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15608]:
                                                revert with 0, 17
                                            if mem[_15608] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15608] > !mem[_15608 + 32]:
                                                revert with 0, 17
                                            if mem[_15608] + mem[_15608 + 32] < mem[_15608]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                else:
                                    if -uint32(cd[36]) + 3:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15559 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_2dcdd4f0Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15559
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15609 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15609]:
                                                revert with 0, 17
                                            if mem[_15609] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15609] > !mem[_15609 + 32]:
                                                revert with 0, 17
                                            if mem[_15609] + mem[_15609 + 32] < mem[_15609]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                    else:
                                        idx = 0
                                        while idx < ('cd', 4).length:
                                            if idx >= mem[128]:
                                                revert with 0, 50
                                            _15561 = mem[(32 * idx) + 160]
                                            mem[mem[64] + 36] = mem[(32 * idx) + 160]
                                            call sub_e5888867Address.0x6edb7002 with:
                                                 gas gas_remaining wei
                                                args msg.sender, _15561
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15610 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            if 0 > !mem[_15610]:
                                                revert with 0, 17
                                            if mem[_15610] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if mem[_15610] > !mem[_15610 + 32]:
                                                revert with 0, 17
                                            if mem[_15610] + mem[_15610 + 32] < mem[_15610]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not idx + 1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                        walletBalances[address(msg.sender)] = 0
                    else:
                        if unknown_0x5f1c3182(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return swapTokensAmount
                        if unknown_0x65b8dbc0(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if not address(cd[4]) - uniswapV2RouterAddress:
                                revert with 0, 'TKN: The router already has that address'
                            emit UpdateUniswapV2Router(address(cd[4]), uniswapV2RouterAddress);
                            uniswapV2RouterAddress = address(cd[4])
                            staticcall address(cd[4]).factory() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            staticcall uniswapV2RouterAddress.0x73b295c2 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), address(ext_call.return_data[0])
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            uniswapV2PairAddress = ext_call.return_data[12 len 20]
                        else:
                            if unknown_0x6770474b(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                require calldata.size - 4 >= 32
                                if owner != msg.sender:
                                    revert with 0, 'Ownable: caller is not the owner'
                                swapTokensAmount = cd[4]
                            else:
                                if unknown_0x6815a91c(?????) == uint32(call.func_hash) >> 224:
                                    require not msg.value
                                    require calldata.size - 4 >= 32
                                    if owner != msg.sender:
                                        revert with 0, 'Ownable: caller is not the owner'
                                    cashoutFee = cd[4]
                                else:
                                    require unknown_0x684b6741(?????) == uint32(call.func_hash) >> 224
                                    require not msg.value
                                    require calldata.size - 4 >= 32
                                    require cd[4] == uint32(cd[4])
                                    if not msg.sender:
                                        revert with 0, 'MANIA CSHT:  creation from the zero address'
                                    if stor32[address(msg.sender)]:
                                        revert with 0, 'MANIA CSHT: Blacklisted address'
                                    if futurUsePoolAddress == msg.sender:
                                        revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                                    if distributionPoolAddress == msg.sender:
                                        revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                                    if -uint32(cd[4]):
                                        if -uint32(cd[4]) + 1:
                                            if -uint32(cd[4]) + 2:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall 0x0.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                            else:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                        else:
                                            if -uint32(cd[4]) + 2:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_28ec092eAddress.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                            else:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 1:
                                            if -uint32(cd[4]) + 2:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_fba94647Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                            else:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                        else:
                                            if -uint32(cd[4]) + 2:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_28ec092eAddress.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                            else:
                                                if -uint32(cd[4]) + 3:
                                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                                else:
                                                    staticcall sub_e5888867Address.0x2c534595 with:
                                                            gas gas_remaining wei
                                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < 100:
                                        revert with 0, 'Nodes less than 100'
                                    if not sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
                                    if sub_c7e17a17[address(msg.sender)] < sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] = 0
                                    call tokenAddress.0x23b872dd with:
                                         gas gas_remaining wei
                                        args distributionPoolAddress, msg.sender, sub_c7e17a17[address(msg.sender)]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                else:
                    if uint32(call.func_hash) >> 224 != unknown_0x4ea6f0bd(?????):
                        if unknown_0x54f12f1f(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return liquidityPoolFee
                        if unknown_0x563a624b(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == uint32(cd[4])
                            if -uint32(cd[4]):
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall 0x0.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_fba94647Address.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_28ec092eAddress.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            staticcall sub_2dcdd4f0Address.autoDistri() with:
                                                    gas gas_remaining wei
                                        else:
                                            staticcall sub_e5888867Address.autoDistri() with:
                                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            return bool(ext_call.return_data[0])
                        if uint32(call.func_hash) >> 224 != unknown_0x56e6f075(?????):
                            require unknown_0x583bd7a6(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == bool(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            Mask(248, 0, stor29.field_8) = Mask(248, 0, bool(cd[4]))
                        else:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == uint32(cd[4])
                            if -uint32(cd[4]):
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            call 0x0.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            call sub_2dcdd4f0Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            call sub_28ec092eAddress.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            call sub_2dcdd4f0Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                            else:
                                if -uint32(cd[4]) + 1:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            call sub_fba94647Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            call sub_2dcdd4f0Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                else:
                                    if -uint32(cd[4]) + 2:
                                        if -uint32(cd[4]) + 3:
                                            call sub_28ec092eAddress.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                    else:
                                        if -uint32(cd[4]) + 3:
                                            call sub_2dcdd4f0Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                                        else:
                                            call sub_e5888867Address.0xd2b6fc4c with:
                                                 gas gas_remaining wei
                                                args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'Not enough funds to withdraw'
                            call tokenAddress.0x23b872dd with:
                                 gas gas_remaining wei
                                args distributionPoolAddress, msg.sender, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    else:
                        require not msg.value
                        require calldata.size - 4 >= 96
                        require cd[4] <= test266151307()
                        require cd[4] + 35 < calldata.size
                        if ('cd', 4).length > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(('cd', 4).length)) + 129 < 128 or ceil32(ceil32(('cd', 4).length)) + 129 > test266151307():
                            revert with 0, 65
                        require cd[4] + ('cd', 4).length + 36 <= calldata.size
                        require cd[36] == uint32(cd[36])
                        if not msg.sender:
                            revert with 0, 'NODE CREATION:  creation from the zero address'
                        if stor32[address(msg.sender)]:
                            revert with 0, 'NODE CREATION: Blacklisted address'
                        if futurUsePoolAddress == msg.sender:
                            revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                        if distributionPoolAddress == msg.sender:
                            revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                        if -uint32(cd[36]):
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall 0x0.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall 0x0.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(0)
                                        call 0x0.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_28ec092eAddress)
                                        call sub_28ec092eAddress.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                        else:
                            if -uint32(cd[36]) + 1:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_fba94647Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_fba94647Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_fba94647Address)
                                        call sub_fba94647Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                            else:
                                if -uint32(cd[36]) + 2:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_28ec092eAddress)
                                        call sub_28ec092eAddress.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                else:
                                    if -uint32(cd[36]) + 3:
                                        staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_2dcdd4f0Address)
                                        call sub_2dcdd4f0Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                                    else:
                                        staticcall sub_e5888867Address.0xf1fec2b8 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not -uint32(cd[36]) + 2:
                                            staticcall sub_e5888867Address.0xb76adfd6 with:
                                                    gas gas_remaining wei
                                                   args uint32(cd[36])
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                        if ext_call.return_data[0] > walletBalances[address(msg.sender)]:
                                            revert with 0, 'Insufficient Fund'
                                        if not -cd[68]:
                                            if 0 < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < 0:
                                                revert with 0, 17
                                        else:
                                            if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                                revert with 0, 17
                                            if not cd[68]:
                                                revert with 0, 18
                                            if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if cd[68] * ext_call.return_data[0] < walletBalances[address(msg.sender)]:
                                                revert with 0, 'Insuffcient Fund'
                                            if walletBalances[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                                revert with 0, 17
                                            walletBalances[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                        require ext_code.size(sub_e5888867Address)
                                        call sub_e5888867Address.0xf482212c with:
                                             gas gas_remaining wei
                                            args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), 57005, cd[36] << 224, cd[68]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
            if unknown_0x78c494d5(?????) > uint32(call.func_hash) >> 224:
                if unknown_0x6aec847e(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return zeusAddress
                if unknown_0x6d9ae0be(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return cashoutFee
                if unknown_0x70a08231(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    staticcall tokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(cd[4])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x715018a6(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    emit OwnershipTransferred(owner, 0);
                    owner = 0
                else:
                    require unknown_0x77150ca8(?????) == uint32(call.func_hash) >> 224
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == uint32(cd[4])
                    if not msg.sender:
                        revert with 0, 'MANIA CSHT:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'MANIA CSHT: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'MANIA CSHT: futur and rewardsPool cannot cashout rewards'
                    if -uint32(cd[4]):
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    call 0x0.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                            else:
                                if -uint32(cd[4]) + 3:
                                    call sub_2dcdd4f0Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                        else:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    call sub_28ec092eAddress.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                            else:
                                if -uint32(cd[4]) + 3:
                                    call sub_2dcdd4f0Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                    else:
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    call sub_fba94647Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                            else:
                                if -uint32(cd[4]) + 3:
                                    call sub_2dcdd4f0Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                        else:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    call sub_28ec092eAddress.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                            else:
                                if -uint32(cd[4]) + 3:
                                    call sub_2dcdd4f0Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                                else:
                                    call sub_e5888867Address.0x5c298b1c with:
                                         gas gas_remaining wei
                                        args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'MANIA CSHT: You don't have enough reward to cash out'
                    if uint8(stor29.field_8):
                        call tokenAddress.0x23b872dd with:
                             gas gas_remaining wei
                            args distributionPoolAddress, sub_b12cbc76Address, ext_call.return_data[32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if ext_call.return_data[32] > ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if ext_call.return_data[0] < ext_call.return_data[32]:
                        revert with 0, 17
                    call tokenAddress.0x23b872dd with:
                         gas gas_remaining wei
                        args distributionPoolAddress, msg.sender, ext_call.return_data[0] - ext_call.return_data[32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if uint32(call.func_hash) >> 224 != unknown_0x78c494d5(?????):
                if unknown_0x82a7ef5c(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[36] == uint32(cd[36])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if -uint32(cd[36]):
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(0)
                                    call 0x0.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                    else:
                        if -uint32(cd[36]) + 1:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_fba94647Address)
                                    call sub_fba94647Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                        else:
                            if -uint32(cd[36]) + 2:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                            else:
                                if -uint32(cd[36]) + 3:
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                                else:
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xc6faedc8 with:
                                         gas gas_remaining wei
                                        args cd[4]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    if unknown_0x8504b88f(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        return walletBalances[cd[4]]
                    if unknown_0x85141a77(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return deadWalletAddress
                    if unknown_0x8700ee59(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return sub_8700ee59
                    require unknown_0x88c41d7c(?????) == uint32(call.func_hash) >> 224
                    require not msg.value
                    require calldata.size - 4 >= 32
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    futurFee = cd[4]
                    if rewardsFee > !liquidityPoolFee:
                        revert with 0, 17
                    if rewardsFee + liquidityPoolFee < rewardsFee:
                        revert with 0, 'SafeMath: addition overflow'
                    if rewardsFee + liquidityPoolFee > !cd[4]:
                        revert with 0, 17
                    if cd[4] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees = rewardsFee + liquidityPoolFee + cd[4]
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] == uint32(cd[4])
            if not msg.sender:
                revert with 0, 'SENDER CAN'T BE ZERO'
            mem[132] = msg.sender
            if -uint32(cd[4]):
                if -uint32(cd[4]) + 1:
                    if -uint32(cd[4]) + 2:
                        if -uint32(cd[4]) + 3:
                            staticcall 0x0.0x41ac82b0 with:
                                    gas gas_remaining wei
                                   args msg.sender
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                            if not ext_call.return_data[0]:
                                revert with 0, 'NO NODE OWNER'
                            mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(return_data.size) + 132] = msg.sender
                            staticcall 0x0.0x4a389fae with:
                                    gas gas_remaining wei
                                   args msg.sender
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = (2 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            _2876 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                            _3391 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                                revert with 0, 65
                            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                                revert with 0, 65
                            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                            mem[(2 * ceil32(return_data.size)) + 128] = _3391
                            require _2876 + _3391 + 32 <= return_data.size
                            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3391)] = mem[ceil32(return_data.size) + _2876 + 160 len ceil32(_3391)]
                            if ceil32(_3391) <= _3391:
                                _14327 = mem[64]
                                mem[mem[64]] = 32
                                mem[mem[64] + 32] = _3391
                                mem[mem[64] + 64 len ceil32(_3391)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3391)]
                                if ceil32(_3391) <= _3391:
                                    return Array(len=_3391, data=mem[mem[64] + 64 len ceil32(_3391)])
                                mem[_3391 + mem[64] + 64] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_3391) + _14327 + -mem[64] + 64
                            mem[_3391 + (2 * ceil32(return_data.size)) + 160] = 0
                            _14328 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3391
                            mem[mem[64] + 64 len ceil32(_3391)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3391)]
                            if ceil32(_3391) <= _3391:
                                return Array(len=_3391, data=mem[mem[64] + 64 len ceil32(_3391)])
                            mem[_3391 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3391) + _14328 + -mem[64] + 64
                        staticcall sub_e5888867Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_e5888867Address.0x4a389fae with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _2877 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3392 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3392
                        require _2877 + _3392 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3392)] = mem[ceil32(return_data.size) + _2877 + 160 len ceil32(_3392)]
                        if ceil32(_3392) <= _3392:
                            _14329 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3392
                            mem[mem[64] + 64 len ceil32(_3392)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3392)]
                            if ceil32(_3392) <= _3392:
                                return Array(len=_3392, data=mem[mem[64] + 64 len ceil32(_3392)])
                            mem[_3392 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3392) + _14329 + -mem[64] + 64
                        mem[_3392 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14330 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3392
                        mem[mem[64] + 64 len ceil32(_3392)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3392)]
                        if ceil32(_3392) <= _3392:
                            return Array(len=_3392, data=mem[mem[64] + 64 len ceil32(_3392)])
                        mem[_3392 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3392) + _14330 + -mem[64] + 64
                    if -uint32(cd[4]) + 3:
                        staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_2dcdd4f0Address.0x4a389fae with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3159 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3588 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3588
                        require _3159 + _3588 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3588)] = mem[ceil32(return_data.size) + _3159 + 160 len ceil32(_3588)]
                        if ceil32(_3588) <= _3588:
                            _14331 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3588
                            mem[mem[64] + 64 len ceil32(_3588)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3588)]
                            if ceil32(_3588) <= _3588:
                                return Array(len=_3588, data=mem[mem[64] + 64 len ceil32(_3588)])
                            mem[_3588 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3588) + _14331 + -mem[64] + 64
                        mem[_3588 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14332 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3588
                        mem[mem[64] + 64 len ceil32(_3588)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3588)]
                        if ceil32(_3588) <= _3588:
                            return Array(len=_3588, data=mem[mem[64] + 64 len ceil32(_3588)])
                        mem[_3588 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3588) + _14332 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3160 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3589 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3589
                    require _3160 + _3589 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3589)] = mem[ceil32(return_data.size) + _3160 + 160 len ceil32(_3589)]
                    if ceil32(_3589) <= _3589:
                        _14333 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3589
                        mem[mem[64] + 64 len ceil32(_3589)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3589)]
                        if ceil32(_3589) <= _3589:
                            return Array(len=_3589, data=mem[mem[64] + 64 len ceil32(_3589)])
                        mem[_3589 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3589) + _14333 + -mem[64] + 64
                    mem[_3589 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14334 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3589
                    mem[mem[64] + 64 len ceil32(_3589)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3589)]
                    if ceil32(_3589) <= _3589:
                        return Array(len=_3589, data=mem[mem[64] + 64 len ceil32(_3589)])
                    mem[_3589 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3589) + _14334 + -mem[64] + 64
                if -uint32(cd[4]) + 2:
                    if -uint32(cd[4]) + 3:
                        staticcall sub_28ec092eAddress.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_28ec092eAddress.0x4a389fae with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3161 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3590 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3590
                        require _3161 + _3590 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3590)] = mem[ceil32(return_data.size) + _3161 + 160 len ceil32(_3590)]
                        if ceil32(_3590) <= _3590:
                            _14335 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3590
                            mem[mem[64] + 64 len ceil32(_3590)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3590)]
                            if ceil32(_3590) <= _3590:
                                return Array(len=_3590, data=mem[mem[64] + 64 len ceil32(_3590)])
                            mem[_3590 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3590) + _14335 + -mem[64] + 64
                        mem[_3590 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14336 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3590
                        mem[mem[64] + 64 len ceil32(_3590)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3590)]
                        if ceil32(_3590) <= _3590:
                            return Array(len=_3590, data=mem[mem[64] + 64 len ceil32(_3590)])
                        mem[_3590 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3590) + _14336 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3162 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3591 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3591
                    require _3162 + _3591 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3591)] = mem[ceil32(return_data.size) + _3162 + 160 len ceil32(_3591)]
                    if ceil32(_3591) <= _3591:
                        _14337 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3591
                        mem[mem[64] + 64 len ceil32(_3591)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3591)]
                        if ceil32(_3591) <= _3591:
                            return Array(len=_3591, data=mem[mem[64] + 64 len ceil32(_3591)])
                        mem[_3591 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3591) + _14337 + -mem[64] + 64
                    mem[_3591 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14338 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3591
                    mem[mem[64] + 64 len ceil32(_3591)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3591)]
                    if ceil32(_3591) <= _3591:
                        return Array(len=_3591, data=mem[mem[64] + 64 len ceil32(_3591)])
                    mem[_3591 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3591) + _14338 + -mem[64] + 64
                if -uint32(cd[4]) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_2dcdd4f0Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3393 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3776 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3776
                    require _3393 + _3776 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3776)] = mem[ceil32(return_data.size) + _3393 + 160 len ceil32(_3776)]
                    if ceil32(_3776) <= _3776:
                        _14339 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3776
                        mem[mem[64] + 64 len ceil32(_3776)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3776)]
                        if ceil32(_3776) <= _3776:
                            return Array(len=_3776, data=mem[mem[64] + 64 len ceil32(_3776)])
                        mem[_3776 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3776) + _14339 + -mem[64] + 64
                    mem[_3776 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14340 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3776
                    mem[mem[64] + 64 len ceil32(_3776)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3776)]
                    if ceil32(_3776) <= _3776:
                        return Array(len=_3776, data=mem[mem[64] + 64 len ceil32(_3776)])
                    mem[_3776 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3776) + _14340 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3394 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3777 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3777
                require _3394 + _3777 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3777)] = mem[ceil32(return_data.size) + _3394 + 160 len ceil32(_3777)]
                if ceil32(_3777) <= _3777:
                    _14341 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3777
                    mem[mem[64] + 64 len ceil32(_3777)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3777)]
                    if ceil32(_3777) <= _3777:
                        return Array(len=_3777, data=mem[mem[64] + 64 len ceil32(_3777)])
                    mem[_3777 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3777) + _14341 + -mem[64] + 64
                mem[_3777 + (2 * ceil32(return_data.size)) + 160] = 0
                _14342 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3777
                mem[mem[64] + 64 len ceil32(_3777)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3777)]
                if ceil32(_3777) <= _3777:
                    return Array(len=_3777, data=mem[mem[64] + 64 len ceil32(_3777)])
                mem[_3777 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3777) + _14342 + -mem[64] + 64
            if -uint32(cd[4]) + 1:
                if -uint32(cd[4]) + 2:
                    if -uint32(cd[4]) + 3:
                        staticcall sub_fba94647Address.0x41ac82b0 with:
                                gas gas_remaining wei
                               args msg.sender
                        mem[128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if not ext_call.return_data[0]:
                            revert with 0, 'NO NODE OWNER'
                        mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(return_data.size) + 132] = msg.sender
                        staticcall sub_fba94647Address.0x4a389fae with:
                                gas gas_remaining wei
                               args msg.sender
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = (2 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        _3163 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                        require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                        require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                        _3592 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                            revert with 0, 65
                        if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                            revert with 0, 65
                        mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                        mem[(2 * ceil32(return_data.size)) + 128] = _3592
                        require _3163 + _3592 + 32 <= return_data.size
                        mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3592)] = mem[ceil32(return_data.size) + _3163 + 160 len ceil32(_3592)]
                        if ceil32(_3592) <= _3592:
                            _14343 = mem[64]
                            mem[mem[64]] = 32
                            mem[mem[64] + 32] = _3592
                            mem[mem[64] + 64 len ceil32(_3592)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3592)]
                            if ceil32(_3592) <= _3592:
                                return Array(len=_3592, data=mem[mem[64] + 64 len ceil32(_3592)])
                            mem[_3592 + mem[64] + 64] = 0
                            return memory
                              from mem[64]
                               len ceil32(_3592) + _14343 + -mem[64] + 64
                        mem[_3592 + (2 * ceil32(return_data.size)) + 160] = 0
                        _14344 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3592
                        mem[mem[64] + 64 len ceil32(_3592)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3592)]
                        if ceil32(_3592) <= _3592:
                            return Array(len=_3592, data=mem[mem[64] + 64 len ceil32(_3592)])
                        mem[_3592 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3592) + _14344 + -mem[64] + 64
                    staticcall sub_e5888867Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_e5888867Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3164 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3593 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3593
                    require _3164 + _3593 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3593)] = mem[ceil32(return_data.size) + _3164 + 160 len ceil32(_3593)]
                    if ceil32(_3593) <= _3593:
                        _14345 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3593
                        mem[mem[64] + 64 len ceil32(_3593)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3593)]
                        if ceil32(_3593) <= _3593:
                            return Array(len=_3593, data=mem[mem[64] + 64 len ceil32(_3593)])
                        mem[_3593 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3593) + _14345 + -mem[64] + 64
                    mem[_3593 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14346 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3593
                    mem[mem[64] + 64 len ceil32(_3593)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3593)]
                    if ceil32(_3593) <= _3593:
                        return Array(len=_3593, data=mem[mem[64] + 64 len ceil32(_3593)])
                    mem[_3593 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3593) + _14346 + -mem[64] + 64
                if -uint32(cd[4]) + 3:
                    staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_2dcdd4f0Address.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3395 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3778 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3778
                    require _3395 + _3778 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3778)] = mem[ceil32(return_data.size) + _3395 + 160 len ceil32(_3778)]
                    if ceil32(_3778) <= _3778:
                        _14347 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3778
                        mem[mem[64] + 64 len ceil32(_3778)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3778)]
                        if ceil32(_3778) <= _3778:
                            return Array(len=_3778, data=mem[mem[64] + 64 len ceil32(_3778)])
                        mem[_3778 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3778) + _14347 + -mem[64] + 64
                    mem[_3778 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14348 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3778
                    mem[mem[64] + 64 len ceil32(_3778)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3778)]
                    if ceil32(_3778) <= _3778:
                        return Array(len=_3778, data=mem[mem[64] + 64 len ceil32(_3778)])
                    mem[_3778 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3778) + _14348 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3396 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3779 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3779
                require _3396 + _3779 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3779)] = mem[ceil32(return_data.size) + _3396 + 160 len ceil32(_3779)]
                if ceil32(_3779) <= _3779:
                    _14349 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3779
                    mem[mem[64] + 64 len ceil32(_3779)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3779)]
                    if ceil32(_3779) <= _3779:
                        return Array(len=_3779, data=mem[mem[64] + 64 len ceil32(_3779)])
                    mem[_3779 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3779) + _14349 + -mem[64] + 64
                mem[_3779 + (2 * ceil32(return_data.size)) + 160] = 0
                _14350 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3779
                mem[mem[64] + 64 len ceil32(_3779)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3779)]
                if ceil32(_3779) <= _3779:
                    return Array(len=_3779, data=mem[mem[64] + 64 len ceil32(_3779)])
                mem[_3779 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3779) + _14350 + -mem[64] + 64
            if -uint32(cd[4]) + 2:
                if -uint32(cd[4]) + 3:
                    staticcall sub_28ec092eAddress.0x41ac82b0 with:
                            gas gas_remaining wei
                           args msg.sender
                    mem[128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if not ext_call.return_data[0]:
                        revert with 0, 'NO NODE OWNER'
                    mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 132] = msg.sender
                    staticcall sub_28ec092eAddress.0x4a389fae with:
                            gas gas_remaining wei
                           args msg.sender
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    _3397 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                    require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                    require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                    _3780 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                    mem[(2 * ceil32(return_data.size)) + 128] = _3780
                    require _3397 + _3780 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3780)] = mem[ceil32(return_data.size) + _3397 + 160 len ceil32(_3780)]
                    if ceil32(_3780) <= _3780:
                        _14351 = mem[64]
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = _3780
                        mem[mem[64] + 64 len ceil32(_3780)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3780)]
                        if ceil32(_3780) <= _3780:
                            return Array(len=_3780, data=mem[mem[64] + 64 len ceil32(_3780)])
                        mem[_3780 + mem[64] + 64] = 0
                        return memory
                          from mem[64]
                           len ceil32(_3780) + _14351 + -mem[64] + 64
                    mem[_3780 + (2 * ceil32(return_data.size)) + 160] = 0
                    _14352 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3780
                    mem[mem[64] + 64 len ceil32(_3780)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3780)]
                    if ceil32(_3780) <= _3780:
                        return Array(len=_3780, data=mem[mem[64] + 64 len ceil32(_3780)])
                    mem[_3780 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3780) + _14352 + -mem[64] + 64
                staticcall sub_e5888867Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_e5888867Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3398 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3781 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3781
                require _3398 + _3781 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3781)] = mem[ceil32(return_data.size) + _3398 + 160 len ceil32(_3781)]
                if ceil32(_3781) <= _3781:
                    _14353 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3781
                    mem[mem[64] + 64 len ceil32(_3781)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3781)]
                    if ceil32(_3781) <= _3781:
                        return Array(len=_3781, data=mem[mem[64] + 64 len ceil32(_3781)])
                    mem[_3781 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3781) + _14353 + -mem[64] + 64
                mem[_3781 + (2 * ceil32(return_data.size)) + 160] = 0
                _14354 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3781
                mem[mem[64] + 64 len ceil32(_3781)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3781)]
                if ceil32(_3781) <= _3781:
                    return Array(len=_3781, data=mem[mem[64] + 64 len ceil32(_3781)])
                mem[_3781 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3781) + _14354 + -mem[64] + 64
            if -uint32(cd[4]) + 3:
                staticcall sub_2dcdd4f0Address.0x41ac82b0 with:
                        gas gas_remaining wei
                       args msg.sender
                mem[128] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if not ext_call.return_data[0]:
                    revert with 0, 'NO NODE OWNER'
                mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 132] = msg.sender
                staticcall sub_2dcdd4f0Address.0x4a389fae with:
                        gas gas_remaining wei
                       args msg.sender
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 128
                require return_data.size >= 32
                _3594 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
                require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
                require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
                _3939 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
                mem[(2 * ceil32(return_data.size)) + 128] = _3939
                require _3594 + _3939 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3939)] = mem[ceil32(return_data.size) + _3594 + 160 len ceil32(_3939)]
                if ceil32(_3939) <= _3939:
                    _14355 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = _3939
                    mem[mem[64] + 64 len ceil32(_3939)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3939)]
                    if ceil32(_3939) <= _3939:
                        return Array(len=_3939, data=mem[mem[64] + 64 len ceil32(_3939)])
                    mem[_3939 + mem[64] + 64] = 0
                    return memory
                      from mem[64]
                       len ceil32(_3939) + _14355 + -mem[64] + 64
                mem[_3939 + (2 * ceil32(return_data.size)) + 160] = 0
                _14356 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3939
                mem[mem[64] + 64 len ceil32(_3939)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3939)]
                if ceil32(_3939) <= _3939:
                    return Array(len=_3939, data=mem[mem[64] + 64 len ceil32(_3939)])
                mem[_3939 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3939) + _14356 + -mem[64] + 64
            staticcall sub_e5888867Address.0x41ac82b0 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if not ext_call.return_data[0]:
                revert with 0, 'NO NODE OWNER'
            mem[ceil32(return_data.size) + 128] = 0x4a389fae00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 132] = msg.sender
            staticcall sub_e5888867Address.0x4a389fae with:
                    gas gas_remaining wei
                   args msg.sender
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 128
            require return_data.size >= 32
            _3595 = mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32
            require mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 <= test266151307()
            require ceil32(return_data.size) + return_data.size + 128 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 159
            _3940 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(ceil32(mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 128 len 4], Mask(224, 32, msg.sender) >> 32 + 128])) + 129
            mem[(2 * ceil32(return_data.size)) + 128] = _3940
            require _3595 + _3940 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3940)] = mem[ceil32(return_data.size) + _3595 + 160 len ceil32(_3940)]
            if ceil32(_3940) <= _3940:
                _14357 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _3940
                mem[mem[64] + 64 len ceil32(_3940)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3940)]
                if ceil32(_3940) <= _3940:
                    return Array(len=_3940, data=mem[mem[64] + 64 len ceil32(_3940)])
                mem[_3940 + mem[64] + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_3940) + _14357 + -mem[64] + 64
            mem[_3940 + (2 * ceil32(return_data.size)) + 160] = 0
            _14358 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _3940
            mem[mem[64] + 64 len ceil32(_3940)] = mem[(2 * ceil32(return_data.size)) + 160 len ceil32(_3940)]
            if ceil32(_3940) <= _3940:
                return Array(len=_3940, data=mem[mem[64] + 64 len ceil32(_3940)])
            mem[_3940 + mem[64] + 64] = 0
            return memory
              from mem[64]
               len ceil32(_3940) + _14358 + -mem[64] + 64
        if unknown_0x2bb14e1d(?????) <= uint32(call.func_hash) >> 224:
            if unknown_0x406072a9(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0x406072a9(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 64
                    require cd[4] == address(cd[4])
                    require cd[36] == address(cd[36])
                    return released[address(cd[4])][address(cd[36])]
                if unknown_0x4195fbf3(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if cd[4] <= eth.balance(this.address):
                        call owner with:
                           value cd[4] wei
                             gas 2300 * is_zero(value) wei
                    else:
                        call owner with:
                           value eth.balance(this.address) wei
                             gas 2300 * is_zero(value) wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                else:
                    if unknown_0x42bc9fca(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        liquidityPoolFee = cd[4]
                        if rewardsFee > !cd[4]:
                            revert with 0, 17
                        if rewardsFee + cd[4] < rewardsFee:
                            revert with 0, 'SafeMath: addition overflow'
                        if rewardsFee + cd[4] > !futurFee:
                            revert with 0, 17
                        if futurFee < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees = rewardsFee + cd[4] + futurFee
                    else:
                        if uint32(call.func_hash) >> 224 != unknown_0x48b75044(?????):
                            if unknown_0x49bd5a5e(?????) == uint32(call.func_hash) >> 224:
                                require not msg.value
                                return uniswapV2PairAddress
                            require unknown_0x4cf16875(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[36] == uint32(cd[36])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if -uint32(cd[36]):
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(0)
                                            call 0x0.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                            else:
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_fba94647Address)
                                            call sub_fba94647Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0x9a037aa0 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                        else:
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[4] == address(cd[4])
                            require cd[36] == address(cd[36])
                            if not shares[address(cd[36])]:
                                revert with 0, 'PaymentSplitter: account has no shares'
                            mem[132] = this.address
                            staticcall address(cd[4]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] > !totalReleased[address(cd[4])]:
                                revert with 0, 17
                            if ext_call.return_data[0] + totalReleased[address(cd[4])] and shares[address(cd[36])] > -1 / ext_call.return_data[0] + totalReleased[address(cd[4])]:
                                revert with 0, 17
                            if not totalShares:
                                revert with 0, 18
                            if (ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares < released[address(cd[4])][address(cd[36])]:
                                revert with 0, 17
                            if not -((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) + released[address(cd[4])][address(cd[36])]:
                                revert with 0, 'PaymentSplitter: account is not due payment'
                            if released[address(cd[4])][address(cd[36])] > !(((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]):
                                revert with 0, 17
                            released[address(cd[4])][address(cd[36])] = (ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares
                            if totalReleased[address(cd[4])] > !(((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]):
                                revert with 0, 17
                            totalReleased[address(cd[4])] = totalReleased[address(cd[4])] + ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]
                            mem[ceil32(return_data.size) + 164] = address(cd[36])
                            mem[ceil32(return_data.size) + 196] = ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])]
                            mem[ceil32(return_data.size) + 128] = 68
                            mem[ceil32(return_data.size) + 164 len 28] = address(cd[36]) << 64
                            mem[ceil32(return_data.size) + 160 len 4] = unknown_0xa9059cbb(?????)
                            mem[ceil32(return_data.size) + 228] = 32
                            mem[ceil32(return_data.size) + 260] = 'SafeERC20: low-level call failed'
                            if not ext_code.size(address(cd[4])):
                                revert with 0, 'Address: call to non-contract'
                            mem[ceil32(return_data.size) + 292 len 96] = unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0
                            mem[ceil32(return_data.size) + 360] = 0
                            call address(cd[4]) with:
                               funct Mask(32, 224, unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0) >> 224
                                 gas gas_remaining wei
                                args (Mask(512, -288, unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], 0) << 288)
                            if not return_data.size:
                                if not ext_call.success:
                                    if mem[96]:
                                        revert with memory
                                          from 128
                                           len mem[96]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if mem[96]:
                                    require mem[96] >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                            else:
                                mem[ceil32(return_data.size) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 'SafeERC20: low-level call failed'
                                if return_data.size:
                                    require return_data.size >= 32
                                    require mem[ceil32(return_data.size) + 324] == bool(mem[ceil32(return_data.size) + 324])
                                    if not mem[ceil32(return_data.size) + 324]:
                                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                            emit ERC20PaymentReleased(address(cd[36]), ((ext_call.return_data[0] * shares[address(cd[36])]) + (totalReleased[address(cd[4])] * shares[address(cd[36])]) / totalShares) - released[address(cd[4])][address(cd[36])], address(cd[4]));
            else:
                if unknown_0x2bb14e1d(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return rewardsFee
                if unknown_0x2dca7264(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == uint32(cd[4])
                    if -uint32(cd[4]):
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall 0x0.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_28ec092eAddress.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                    else:
                        if -uint32(cd[4]) + 1:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_fba94647Address.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 2:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_28ec092eAddress.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x613ff46f with:
                                            gas gas_remaining wei
                                else:
                                    staticcall sub_e5888867Address.0x613ff46f with:
                                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x2dcdd4f0(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return sub_2dcdd4f0Address
                if unknown_0x3a98ef39(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return totalShares
                require unknown_0x3c25bff5(?????) == uint32(call.func_hash) >> 224
                require calldata.size - 4 >= 128
                require cd[4] <= test266151307()
                require cd[4] + 35 < calldata.size
                if ('cd', 4).length > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(('cd', 4).length)) + 129 < 128 or ceil32(ceil32(('cd', 4).length)) + 129 > test266151307():
                    revert with 0, 65
                require cd[4] + ('cd', 4).length + 36 <= calldata.size
                require cd[36] == address(cd[36])
                require cd[100] == uint32(cd[100])
                if cd[68] > 5:
                    revert with 0, 'Max: 5 nodes Min: 1'
                if cd[68] < 1:
                    revert with 0, 'Max: 5 nodes Min: 1'
                if ('cd', 4).length <= 3:
                    revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                if ('cd', 4).length >= 32:
                    revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                if -uint32(cd[100]):
                    if -uint32(cd[100]) + 1:
                        if -uint32(cd[100]) + 2:
                            if -uint32(cd[100]) + 3:
                                staticcall 0x0.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall 0x0.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall 0x0.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(0)
                                call 0x0.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_2dcdd4f0Address)
                                call sub_2dcdd4f0Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                    else:
                        if -uint32(cd[100]) + 2:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_28ec092eAddress.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_28ec092eAddress)
                                call sub_28ec092eAddress.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_2dcdd4f0Address)
                                call sub_2dcdd4f0Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                else:
                    if -uint32(cd[100]) + 1:
                        if -uint32(cd[100]) + 2:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_fba94647Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_fba94647Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_fba94647Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_fba94647Address)
                                call sub_fba94647Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_2dcdd4f0Address)
                                call sub_2dcdd4f0Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                    else:
                        if -uint32(cd[100]) + 2:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_28ec092eAddress.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_28ec092eAddress)
                                call sub_28ec092eAddress.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 3:
                                staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_2dcdd4f0Address)
                                call sub_2dcdd4f0Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                staticcall sub_e5888867Address.0x2c534595 with:
                                        gas gas_remaining wei
                                       args msg.sender
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] >= 100:
                                    revert with 0, 'Maximum node exceeded'
                                if not msg.sender:
                                    revert with 0, 'NODE CREATION:  creation from the zero address'
                                if stor32[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Blacklisted address'
                                if futurUsePoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                if distributionPoolAddress == msg.sender:
                                    revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                                staticcall sub_e5888867Address.0xf1fec2b8 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not -uint32(cd[100]) + 2:
                                    staticcall sub_e5888867Address.0xb76adfd6 with:
                                            gas gas_remaining wei
                                           args uint32(cd[100])
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                if ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                    revert with 0, 'NODE CREATION: Balance too low for creation.'
                                if not -cd[68]:
                                    if 0 > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < 0:
                                        revert with 0, 17
                                else:
                                    if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                        revert with 0, 17
                                    if not cd[68]:
                                        revert with 0, 18
                                    if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if cd[68] * ext_call.return_data[0] > sub_c7e17a17[address(msg.sender)]:
                                        revert with 0, 'NODE CREATION: Balance not enough for number of nodes'
                                    if sub_c7e17a17[address(msg.sender)] < cd[68] * ext_call.return_data[0]:
                                        revert with 0, 17
                                    sub_c7e17a17[address(msg.sender)] += -1 * cd[68] * ext_call.return_data[0]
                                require ext_code.size(sub_e5888867Address)
                                call sub_e5888867Address.0xf482212c with:
                                     gas gas_remaining wei
                                    args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
        else:
            if unknown_0x1694505e(?????) > uint32(call.func_hash) >> 224:
                if updateRewardsFee(uint256 arg1) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    rewardsFee = cd[4]
                    if cd[4] > !liquidityPoolFee:
                        revert with 0, 17
                    if cd[4] + liquidityPoolFee < cd[4]:
                        revert with 0, 'SafeMath: addition overflow'
                    if cd[4] + liquidityPoolFee > !futurFee:
                        revert with 0, 17
                    if futurFee < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees = cd[4] + liquidityPoolFee + futurFee
                else:
                    if updateFuturWall(address arg1) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        futurUsePoolAddress = address(cd[4])
                    else:
                        if unknown_0x13114a9d(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return totalFees
                        if unknown_0x13455a88(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[36] == uint32(cd[36])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if -uint32(cd[36]):
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(0)
                                            call 0x0._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                            else:
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_fba94647Address)
                                            call sub_fba94647Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address._changeGasDistri(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args cd[4]
                        else:
                            require unknown_0x13c189a4(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            require calldata.size - 4 >= 64
                            require cd[36] == uint32(cd[36])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if -uint32(cd[36]):
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(0)
                                            call 0x0.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                            else:
                                if -uint32(cd[36]) + 1:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_fba94647Address)
                                            call sub_fba94647Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                else:
                                    if -uint32(cd[36]) + 2:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_28ec092eAddress)
                                            call sub_28ec092eAddress.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                    else:
                                        if -uint32(cd[36]) + 3:
                                            require ext_code.size(sub_2dcdd4f0Address)
                                            call sub_2dcdd4f0Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                                        else:
                                            require ext_code.size(sub_e5888867Address)
                                            call sub_e5888867Address.0xd1871a89 with:
                                                 gas gas_remaining wei
                                                args cd[4]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
            else:
                if unknown_0x1694505e(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return uniswapV2RouterAddress
                if unknown_0x19165587(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if not shares[address(cd[4])]:
                        revert with 0, 'PaymentSplitter: account has no shares'
                    if eth.balance(this.address) > !totalReleased:
                        revert with 0, 17
                    if eth.balance(this.address) + totalReleased and shares[address(cd[4])] > -1 / eth.balance(this.address) + totalReleased:
                        revert with 0, 17
                    if not totalShares:
                        revert with 0, 18
                    if (eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares < released[address(cd[4])]:
                        revert with 0, 17
                    if not -((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) + released[address(cd[4])]:
                        revert with 0, 'PaymentSplitter: account is not due payment'
                    if released[address(cd[4])] > !(((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]):
                        revert with 0, 17
                    released[address(cd[4])] = (eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares
                    if totalReleased > !(((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]):
                        revert with 0, 17
                    totalReleased = totalReleased + ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]
                    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]:
                        revert with 0, 'Address: insufficient balance'
                    call address(cd[4]) with:
                       value ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])] wei
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with 0, 'Address: unable to send value, recipient may have reverted'
                    emit PaymentReleased(address(cd[4]), ((eth.balance(this.address) * shares[address(cd[4])]) + (totalReleased * shares[address(cd[4])]) / totalShares) - released[address(cd[4])]);
                else:
                    if unknown_0x1cdd3be3(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        return bool(stor32[cd[4]])
                    if uint32(call.func_hash) >> 224 != unknown_0x2096879b(?????):
                        if uint32(call.func_hash) >> 224 != unknown_0x259b2794(?????):
                            require unknown_0x28ec092e(?????) == uint32(call.func_hash) >> 224
                            require not msg.value
                            return sub_28ec092eAddress
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == uint32(cd[4])
                        if -uint32(cd[4]):
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall 0x0.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                        else:
                            if -uint32(cd[4]) + 1:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_fba94647Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                            else:
                                if -uint32(cd[4]) + 2:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_28ec092eAddress.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                else:
                                    if -uint32(cd[4]) + 3:
                                        staticcall sub_2dcdd4f0Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                                    else:
                                        staticcall sub_e5888867Address.0x27b3bf11 with:
                                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return ext_call.return_data[0]
                    require calldata.size - 4 >= 128
                    require cd[4] <= test266151307()
                    require cd[4] + 35 < calldata.size
                    if ('cd', 4).length > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(('cd', 4).length)) + 129 < 128 or ceil32(ceil32(('cd', 4).length)) + 129 > test266151307():
                        revert with 0, 65
                    require cd[4] + ('cd', 4).length + 36 <= calldata.size
                    require cd[36] == address(cd[36])
                    require cd[100] == uint32(cd[100])
                    if cd[68] > 5:
                        revert with 0, 'Max: 5 nodes Min: 1'
                    if cd[68] < 1:
                        revert with 0, 'Max: 5 nodes Min: 1'
                    if ('cd', 4).length <= 3:
                        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                    if ('cd', 4).length >= 32:
                        revert with 0, 'NODE CREATION: NAME SIZE INVALID'
                    if not msg.sender:
                        revert with 0, 'NODE CREATION:  creation from the zero address'
                    if stor32[address(msg.sender)]:
                        revert with 0, 'NODE CREATION: Blacklisted address'
                    if futurUsePoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if distributionPoolAddress == msg.sender:
                        revert with 0, 'NODE CREATION: futur and rewardsPool cannot create node'
                    if -uint32(cd[100]):
                        if -uint32(cd[100]) + 1:
                            if -uint32(cd[100]) + 2:
                                if -uint32(cd[100]) + 3:
                                    staticcall 0x0.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall 0x0.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall 0x0.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(0)
                                    call 0x0.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 2:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_28ec092eAddress.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                    else:
                        if -uint32(cd[100]) + 1:
                            if -uint32(cd[100]) + 2:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_fba94647Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_fba94647Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_fba94647Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_fba94647Address)
                                    call sub_fba94647Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                        else:
                            if -uint32(cd[100]) + 2:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_28ec092eAddress.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_28ec092eAddress.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_28ec092eAddress.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_28ec092eAddress)
                                    call sub_28ec092eAddress.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                            else:
                                if -uint32(cd[100]) + 3:
                                    staticcall sub_2dcdd4f0Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_2dcdd4f0Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_2dcdd4f0Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_2dcdd4f0Address)
                                    call sub_2dcdd4f0Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                                else:
                                    staticcall sub_e5888867Address.0x2c534595 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= 100:
                                        revert with 0, 'Maximum node exceeded'
                                    staticcall sub_e5888867Address.0xf1fec2b8 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not -uint32(cd[100]) + 2:
                                        staticcall sub_e5888867Address.0xb76adfd6 with:
                                                gas gas_remaining wei
                                               args uint32(cd[100])
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args msg.sender
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] < ext_call.return_data[0]:
                                        revert with 0, 'NODE CREATION: Balance too low for creation.'
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] >= swapTokensAmount:
                                        if uint8(stor29.field_8):
                                            if not uint8(stor29.field_0):
                                                if owner != msg.sender:
                                                    if not stor33[address(msg.sender)]:
                                                        uint8(stor29.field_0) = 1
                                                        call tokenAddress.0xa9059cbb with:
                                                             gas gas_remaining wei
                                                            args sub_b18d9840Address, ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                                        uint8(stor29.field_0) = 0
                                    if not -cd[68]:
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), 0
                                    else:
                                        if cd[68] and ext_call.return_data[0] > -1 / cd[68]:
                                            revert with 0, 17
                                        if not cd[68]:
                                            revert with 0, 18
                                        if cd[68] * ext_call.return_data[0] / cd[68] != ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        call tokenAddress.0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, address(this.address), cd[68] * ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                    require ext_code.size(sub_e5888867Address)
                                    call sub_e5888867Address.0xf482212c with:
                                         gas gas_remaining wei
                                        args msg.sender, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length]), address(cd[36]), cd[100] << 224, cd[68]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
}



}
