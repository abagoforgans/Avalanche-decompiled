contract main {




// =====================  Runtime code  =====================


#
#  - getPricePerFullShare(bool arg1)
#  - sub_936ffc23(?)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of uint256 allowance;
uint256 totalSupply;
array of struct stor54;
array of struct stor55;
uint256 stor101;
address owner;
uint8 paused;
address routerAddress;
address masterChefAddress;
address stakingRewardAddress;
uint32 stor254;
uint256 stor254; offset 32
uint256 poolId;
uint8 sub_abddf82e;
address lpTokenAddress; offset 8
address token0Address;
address token1Address;
uint256 stor258;
uint256 stor259;
address rewardTokenAddress;
address treasuryWalletAddress;
address communityWalletAddress;
address adminAddress;
uint256 sub_b1a41085;
uint256 sub_cac7b495;
mapping of uint8 stor266;
address sub_4005760aAddress;

function stakingReward() {
    return stakingRewardAddress
}

function token0() {
    return token0Address
}

function totalSupply() {
    return totalSupply
}

function isWhitelisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor266[arg1])
}

function poolId() {
    return poolId
}

function sub_4005760a(?) {
    return sub_4005760aAddress
}

function treasuryWallet() {
    return treasuryWalletAddress
}

function masterChef() {
    return masterChefAddress
}

function paused() {
    return bool(paused)
}

function lpToken() {
    return lpTokenAddress
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function owner() {
    return owner
}

function sub_abddf82e(?) {
    return bool(sub_abddf82e)
}

function sub_b1a41085(?) {
    return sub_b1a41085
}

function communityWallet() {
    return communityWalletAddress
}

function sub_cac7b495(?) {
    return sub_cac7b495
}

function token1() {
    return token1Address
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)]
}

function rewardToken() {
    return rewardTokenAddress
}

function admin() {
    return adminAddress
}

function router() {
    return routerAddress
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    adminAddress = arg1
    emit SetAdmin(arg1);
}

function setFee(uint256 arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_b1a41085 = arg1
    sub_cac7b495 = arg2
    emit SetFee(arg1, arg2);
}

function setTreasuryWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    treasuryWalletAddress = arg1
    emit SetTreasuryWallet(arg1);
}

function setCommunityWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    communityWalletAddress = arg1
    emit SetCommunityWallet(arg1);
}

function reinvest() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if not paused:
        revert with 0, 'Pausable: not paused'
    paused = 0
    emit Unpaused(msg.sender);
    revert with 0, 'Pausable: paused'
}

function setWhitelistAddress(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    stor266[address(arg1)] = uint8(arg2)
    emit SetWhitelistAddress(address(arg1), arg2);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] > !arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] + arg2
    emit Approval((allowance[msg.sender][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(msg.sender)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg2
    if balanceOf[arg1] > !arg2:
        revert with 0, 17
    balanceOf[arg1] += arg2
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] - arg2
    emit Approval((allowance[msg.sender][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function invest() {
    if paused:
        revert with 0, 'Pausable: paused'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0]
    else:
        require ext_code.size(sub_4005760aAddress)
        call sub_4005760aAddress.deposit(uint256 arg1, uint256 arg2, address arg3) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0], this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getAllPool() {
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    else:
        require ext_code.size(sub_4005760aAddress)
        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    return (2 * ext_call.return_data[0])
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(arg1)] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(arg1)] -= arg3
    if balanceOf[arg2] > !arg3:
        revert with 0, 17
    balanceOf[arg2] += arg3
    emit Transfer(arg3, arg1, arg2);
    if allowance[address(arg1)][msg.sender] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds allowance'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)] = allowance[address(arg1)][msg.sender] - arg3
    emit Approval((allowance[address(arg1)][msg.sender] - arg3), arg1, msg.sender);
    return 1
}

function emergencyWithdraw() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if paused:
        revert with 0, 'Pausable: paused'
    paused = 1
    emit Paused(msg.sender);
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if ext_call.return_data[0]:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
    else:
        require ext_code.size(sub_4005760aAddress)
        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        if ext_call.return_data[0]:
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.withdrawAndHarvest(uint256 arg1, uint256 arg2, address arg3) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0], this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
    emit EmergencyWithdraw(ext_call.return_data[0]);
}

function name() {
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor54.length):
            if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor54.length):
                if 31 < uint255(stor54.length) * 0.5:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor54.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        else:
            if bool(stor54.length) == stor54.length.field_1 < 32:
                revert with 0, 34
            if stor54.length.field_1:
                if 31 < stor54.length.field_1:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while stor54.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        mem[ceil32(uint255(stor54.length) * 0.5) + 192 len ceil32(uint255(stor54.length) * 0.5)] = mem[128 len ceil32(uint255(stor54.length) * 0.5)]
        if ceil32(uint255(stor54.length) * 0.5) > uint255(stor54.length) * 0.5:
            mem[(uint255(stor54.length) * 0.5) + ceil32(uint255(stor54.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)], mem[(2 * ceil32(uint255(stor54.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor54.length) * 0.5)]), 
    if bool(stor54.length) == stor54.length.field_1 < 32:
        revert with 0, 34
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor54.length):
            if 31 < uint255(stor54.length) * 0.5:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while (uint255(stor54.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    else:
        if bool(stor54.length) == stor54.length.field_1 < 32:
            revert with 0, 34
        if stor54.length.field_1:
            if 31 < stor54.length.field_1:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while stor54.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    mem[ceil32(stor54.length.field_1) + 192 len ceil32(stor54.length.field_1)] = mem[128 len ceil32(stor54.length.field_1)]
    if ceil32(stor54.length.field_1) > stor54.length.field_1:
        mem[stor54.length.field_1 + ceil32(stor54.length.field_1) + 192] = 0
    return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)], mem[(2 * ceil32(stor54.length.field_1)) + 192 len 2 * ceil32(stor54.length.field_1)]), 
}

function symbol() {
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor55.length):
            if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor55.length):
                if 31 < uint255(stor55.length) * 0.5:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor55.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        else:
            if bool(stor55.length) == stor55.length.field_1 < 32:
                revert with 0, 34
            if stor55.length.field_1:
                if 31 < stor55.length.field_1:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while stor55.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        mem[ceil32(uint255(stor55.length) * 0.5) + 192 len ceil32(uint255(stor55.length) * 0.5)] = mem[128 len ceil32(uint255(stor55.length) * 0.5)]
        if ceil32(uint255(stor55.length) * 0.5) > uint255(stor55.length) * 0.5:
            mem[(uint255(stor55.length) * 0.5) + ceil32(uint255(stor55.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)], mem[(2 * ceil32(uint255(stor55.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor55.length) * 0.5)]), 
    if bool(stor55.length) == stor55.length.field_1 < 32:
        revert with 0, 34
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor55.length):
            if 31 < uint255(stor55.length) * 0.5:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while (uint255(stor55.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    else:
        if bool(stor55.length) == stor55.length.field_1 < 32:
            revert with 0, 34
        if stor55.length.field_1:
            if 31 < stor55.length.field_1:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while stor55.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    mem[ceil32(stor55.length.field_1) + 192 len ceil32(stor55.length.field_1)] = mem[128 len ceil32(stor55.length.field_1)]
    if ceil32(stor55.length.field_1) > stor55.length.field_1:
        mem[stor55.length.field_1 + ceil32(stor55.length.field_1) + 192] = 0
    return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)], mem[(2 * ceil32(stor55.length.field_1)) + 192 len 2 * ceil32(stor55.length.field_1)]), 
}

function getPendingRewards() {
    if sub_abddf82e:
        require ext_code.size(sub_4005760aAddress)
        staticcall sub_4005760aAddress.pendingReward(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0], 0
    if 0x4c9b4e1ac6f24cde3660d5e4ef1ebf77c710c084 == rewardTokenAddress:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.pendingLyd(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(rewardTokenAddress)
        staticcall rewardTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        return 2 * ext_call.return_data[0], 0
    mem[96] = 0xffcd426300000000000000000000000000000000000000000000000000000000
    mem[100] = poolId
    mem[132] = this.address
    require ext_code.size(masterChefAddress)
    staticcall masterChefAddress.pendingTokens(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args poolId, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 128
    _11 = mem[96 len 4], Mask(224, 0, stor254.field_32)
    require uint32(stor254.field_0), Mask(224, 32, this.address) >> 32 == Mask(160, 32, this.address) >> 32
    _17 = uint32(this.address), mem[164 len 28]
    require uint32(this.address), mem[164 len 28] <= test266151307()
    require uint32(this.address), mem[164 len 28] + 127 < return_data.size + 96
    _20 = mem[uint32(this.address), mem[164 len 28] + 96]
    if mem[uint32(this.address), mem[164 len 28] + 96] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 1 < 0 or ceil32(return_data.size) + ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(ceil32(mem[uint32(this.address), mem[164 len 28] + 96])) + 97
    mem[ceil32(return_data.size) + 96] = _20
    require _17 + _20 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(_20)] = mem[_17 + 128 len ceil32(_20)]
    if ceil32(_20) <= _20:
        _41 = mem[192]
        mem[mem[64] + 4] = this.address
        require ext_code.size(rewardTokenAddress)
        staticcall rewardTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _47 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if _11 > !mem[_47]:
            revert with 0, 17
        mem[mem[64]] = _11 + mem[_47]
        return mem[mem[64]], _41
    mem[_20 + ceil32(return_data.size) + 128] = 0
    _42 = mem[192]
    mem[mem[64] + 4] = this.address
    require ext_code.size(rewardTokenAddress)
    staticcall rewardTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _48 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if _11 > !mem[_48]:
        revert with 0, 17
    mem[mem[64]] = _11 + mem[_48]
    return mem[mem[64]], _42
}

function sub_969cc620(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    mem[100] = this.address
    require ext_code.size(stakingRewardAddress)
    staticcall stakingRewardAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > 0:
        require ext_code.size(stakingRewardAddress)
        call stakingRewardAddress.exit() with:
             gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    sub_4005760aAddress = 0x1f806f7c8ded893fd3cae279191ad7aa3798e928
    poolId = arg1
    mem[ceil32(return_data.size) + 100] = this.address
    mem[ceil32(return_data.size) + 132] = 0x1f806f7c8ded893fd3cae279191ad7aa3798e928
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0xdd62ed3e with:
            gas gas_remaining wei
           args this.address, 0x1f806f7c8ded893fd3cae279191ad7aa3798e928
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        revert with 0, 'SafeERC20: approve from non-zero to non-zero allowance'
    mem[(2 * ceil32(return_data.size)) + 132] = 0x1f806f7c8ded893fd3cae279191ad7aa3798e928
    mem[(2 * ceil32(return_data.size)) + 164] = -1
    mem[(2 * ceil32(return_data.size)) + 96] = 68
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = 0x1f806f7c8ded893fd3cae279191ad7aa
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = approve(address arg1, uint256 arg2)
    mem[(2 * ceil32(return_data.size)) + 196] = 32
    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(lpTokenAddress):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 260 len 96] = approve(address arg1, uint256 arg2), 0x1f806f7c8ded893fd3cae279, 0, -1, 0
    mem[(2 * ceil32(return_data.size)) + 328] = 0
    call lpTokenAddress with:
       funct Mask(32, 224, approve(address arg1, uint256 arg2), 0x1f806f7c8ded893fd3cae279, 0, -1, 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, approve(address arg1, uint256 arg2), 0x1f806f7c8ded893fd3cae279, 0, -1, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
            if not mem[(2 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_4005760aAddress)
    call sub_4005760aAddress.deposit(uint256 arg1, uint256 arg2, address arg3) with:
         gas gas_remaining wei
        args arg1, ext_call.return_data[0], this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function withdraw(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if not arg1:
        revert with 0, 'Share must > 0'
    if arg1 > balanceOf[msg.sender]:
        revert with 0, 'Not enough shares to withdraw'
    mem[100] = this.address
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 132] = this.address
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    else:
        require ext_code.size(sub_4005760aAddress)
        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    mem[ceil32(return_data.size) + 96 len 64] = ext_call.return_data[0 len 64]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    if uint255(ext_call.return_data[0]) and arg1 > -1 / 2 * ext_call.return_data[0]:
        revert with 0, 17
    if not totalSupply:
        revert with 0, 18
    if not msg.sender:
        revert with 0, 'ERC20: burn from the zero address'
    if balanceOf[address(msg.sender)] < arg1:
        revert with 0, 'ERC20: burn amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg1
    if totalSupply < arg1:
        revert with 0, 17
    totalSupply -= arg1
    emit Transfer(arg1, msg.sender, 0);
    if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply > ext_call.return_data[0]:
        if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply < ext_call.return_data[0]:
            revert with 0, 17
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0]
        else:
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.withdraw(uint256 arg1, uint256 arg2, address arg3) with:
                 gas gas_remaining wei
                args poolId, ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0], this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(2 * ceil32(return_data.size)) + 164] = (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply
    mem[(2 * ceil32(return_data.size)) + 96] = 68
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[(2 * ceil32(return_data.size)) + 196] = 32
    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(lpTokenAddress):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0
    mem[(2 * ceil32(return_data.size)) + 328] = 0
    call lpTokenAddress with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
            if not mem[(2 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit Withdraw(msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, arg1);
    stor101 = 1
    return ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply)
}

function deposit(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if paused:
        revert with 0, 'Pausable: paused'
    if arg1 <= 0:
        revert with 0, 'Amount must > 0'
    if not stor266[msg.sender]:
        revert with 0, 'Not whitelisted'
    mem[132] = this.address
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    else:
        require ext_code.size(sub_4005760aAddress)
        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args poolId, this.address
    mem[96 len 64] = ext_call.return_data[0 len 64]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    mem[ceil32(return_data.size) + 100] = this.address
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(2 * ceil32(return_data.size)) + 164] = this.address
    mem[(2 * ceil32(return_data.size)) + 196] = arg1
    mem[(2 * ceil32(return_data.size)) + 96] = 100
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
    mem[(2 * ceil32(return_data.size)) + 228] = 32
    mem[(2 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(lpTokenAddress):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
    mem[(2 * ceil32(return_data.size)) + 392] = 0
    call lpTokenAddress with:
       funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
         gas gas_remaining wei
        args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require ext_call.return_data[32] == bool(ext_call.return_data[32])
            if not ext_call.return_data[32]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 324] == bool(mem[(2 * ceil32(return_data.size)) + 324])
            if not mem[(2 * ceil32(return_data.size)) + 324]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    if not totalSupply:
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !arg1:
            revert with 0, 17
        totalSupply += arg1
        if balanceOf[address(msg.sender)] > !arg1:
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1
        emit Transfer(arg1, 0, msg.sender);
        if paused:
            revert with 0, 'Pausable: paused'
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
        else:
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.deposit(uint256 arg1, uint256 arg2, address arg3) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0], this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit Deposit(msg.sender, arg1, arg1);
    else:
        if arg1 and totalSupply > -1 / arg1:
            revert with 0, 17
        if not 2 * ext_call.return_data[0]:
            revert with 0, 18
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        totalSupply += arg1 * totalSupply / 2 * ext_call.return_data[0]
        if balanceOf[address(msg.sender)] > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1 * totalSupply / 2 * ext_call.return_data[0]
        emit Transfer((arg1 * totalSupply / 2 * ext_call.return_data[0]), 0, msg.sender);
        if paused:
            revert with 0, 'Pausable: paused'
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.deposit(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0]
        else:
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.deposit(uint256 arg1, uint256 arg2, address arg3) with:
                 gas gas_remaining wei
                args poolId, ext_call.return_data[0], this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit Deposit(msg.sender, arg1, arg1 * totalSupply / 2 * ext_call.return_data[0]);
    stor101 = 1
}

function yield() {
    if msg.sender == owner:
        if paused:
            revert with 0, 'Pausable: paused'
        if not sub_abddf82e:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _16 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1691 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1695 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1691 + (32 * _1695) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1695)] = mem[(2 * ceil32(return_data.size)) + _1691 + 224 len ceil32(32 * _1695)]
            if 1 >= _1695:
                revert with 0, 50
            _3283 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3283 < (ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3535 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 64] = token1Address
                        mem[_3535 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3535 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3535 + 132] = 0
                        mem[_3535 + 164] = 160
                        mem[_3535 + 260] = mem[_3535]
                        idx = 0
                        s = _3535 + 32
                        t = _3535 + 292
                        while idx < mem[_3535]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3535 + 196] = this.address
                        mem[_3535 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3535 + (32 * mem[_3535]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4945 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4993 = mem[_4945]
                        require mem[_4945] <= test266151307()
                        require _4945 + mem[_4945] + 31 < _4945 + return_data.size
                        _5041 = mem[_4945 + mem[_4945]]
                        if mem[_4945 + mem[_4945]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4945 + mem[_4945]]) + 1 < 0 or _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1
                        mem[_4945 + ceil32(return_data.size)] = _5041
                        require _4993 + (32 * _5041) + 32 <= return_data.size
                        mem[_4945 + ceil32(return_data.size) + 32 len ceil32(32 * _5041)] = mem[_4945 + _4993 + 32 len ceil32(32 * _5041)]
                        if 1 >= _5041:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4945 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3569 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3569]:
                                revert with 0, 50
                            mem[_3569 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3569]:
                                revert with 0, 50
                            mem[_3569 + 64] = token0Address
                            mem[_3569 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3569 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3569 + 132] = 0
                            mem[_3569 + 164] = 160
                            mem[_3569 + 260] = mem[_3569]
                            idx = 0
                            s = _3569 + 32
                            t = _3569 + 292
                            while idx < mem[_3569]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3569 + 196] = this.address
                            mem[_3569 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3569 + (32 * mem[_3569]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4944 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4992 = mem[_4944]
                            require mem[_4944] <= test266151307()
                            require _4944 + mem[_4944] + 31 < _4944 + return_data.size
                            _5040 = mem[_4944 + mem[_4944]]
                            if mem[_4944 + mem[_4944]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4944 + mem[_4944]]) + 1 < 0 or _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1
                            mem[_4944 + ceil32(return_data.size)] = _5040
                            require _4992 + (32 * _5040) + 32 <= return_data.size
                            mem[_4944 + ceil32(return_data.size) + 32 len ceil32(32 * _5040)] = mem[_4944 + _4992 + 32 len ceil32(32 * _5040)]
                            if 1 >= _5040:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4944 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3567 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3567]:
                                revert with 0, 50
                            mem[_3567 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3567]:
                                revert with 0, 50
                            mem[_3567 + 64] = token0Address
                            mem[_3567 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3567 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3567 + 132] = 0
                            mem[_3567 + 164] = 160
                            mem[_3567 + 260] = mem[_3567]
                            idx = 0
                            s = _3567 + 32
                            t = _3567 + 292
                            while idx < mem[_3567]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3567 + 196] = this.address
                            mem[_3567 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3567 + (32 * mem[_3567]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4943 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4991 = mem[_4943]
                            require mem[_4943] <= test266151307()
                            require _4943 + mem[_4943] + 31 < _4943 + return_data.size
                            _5039 = mem[_4943 + mem[_4943]]
                            if mem[_4943 + mem[_4943]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4943 + mem[_4943]]) + 1 < 0 or _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1
                            mem[_4943 + ceil32(return_data.size)] = _5039
                            require _4991 + (32 * _5039) + 32 <= return_data.size
                            mem[_4943 + ceil32(return_data.size) + 32 len ceil32(32 * _5039)] = mem[_4943 + _4991 + 32 len ceil32(32 * _5039)]
                            if 1 >= _5039:
                                revert with 0, 50
                            _6015 = mem[_4943 + ceil32(return_data.size) + 64]
                            _6159 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 64] = token1Address
                            mem[_6159 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6159 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6159 + 132] = 0
                            mem[_6159 + 164] = 160
                            mem[_6159 + 260] = mem[_6159]
                            idx = 0
                            s = _6159 + 32
                            t = _6159 + 292
                            while idx < mem[_6159]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6159 + 196] = this.address
                            mem[_6159 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6159 + (32 * mem[_6159]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6735 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6751 = mem[_6735]
                            require mem[_6735] <= test266151307()
                            require _6735 + mem[_6735] + 31 < _6735 + return_data.size
                            _6767 = mem[_6735 + mem[_6735]]
                            if mem[_6735 + mem[_6735]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6735 + mem[_6735]]) + 1 < 0 or _6735 + ceil32(return_data.size) + ceil32(32 * mem[_6735 + mem[_6735]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6735 + ceil32(return_data.size) + ceil32(32 * mem[_6735 + mem[_6735]]) + 1
                            mem[_6735 + ceil32(return_data.size)] = _6767
                            require _6751 + (32 * _6767) + 32 <= return_data.size
                            mem[_6735 + ceil32(return_data.size) + 32 len ceil32(32 * _6767)] = mem[_6735 + _6751 + 32 len ceil32(32 * _6767)]
                            if 1 >= _6767:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6015, mem[_6735 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3327 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3327] = return_data.size
                    mem[_3327 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3537 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 64] = token1Address
                        mem[_3537 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3537 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3537 + 132] = 0
                        mem[_3537 + 164] = 160
                        mem[_3537 + 260] = mem[_3537]
                        idx = 0
                        s = _3537 + 32
                        t = _3537 + 292
                        while idx < mem[_3537]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3537 + 196] = this.address
                        mem[_3537 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3537 + (32 * mem[_3537]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4948 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4996 = mem[_4948]
                        require mem[_4948] <= test266151307()
                        require _4948 + mem[_4948] + 31 < _4948 + return_data.size
                        _5044 = mem[_4948 + mem[_4948]]
                        if mem[_4948 + mem[_4948]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4948 + mem[_4948]]) + 1 < 0 or _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1
                        mem[_4948 + ceil32(return_data.size)] = _5044
                        require _4996 + (32 * _5044) + 32 <= return_data.size
                        mem[_4948 + ceil32(return_data.size) + 32 len ceil32(32 * _5044)] = mem[_4948 + _4996 + 32 len ceil32(32 * _5044)]
                        if 1 >= _5044:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4948 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3574 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3574]:
                                revert with 0, 50
                            mem[_3574 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3574]:
                                revert with 0, 50
                            mem[_3574 + 64] = token0Address
                            mem[_3574 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3574 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3574 + 132] = 0
                            mem[_3574 + 164] = 160
                            mem[_3574 + 260] = mem[_3574]
                            idx = 0
                            s = _3574 + 32
                            t = _3574 + 292
                            while idx < mem[_3574]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3574 + 196] = this.address
                            mem[_3574 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3574 + (32 * mem[_3574]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4947 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4995 = mem[_4947]
                            require mem[_4947] <= test266151307()
                            require _4947 + mem[_4947] + 31 < _4947 + return_data.size
                            _5043 = mem[_4947 + mem[_4947]]
                            if mem[_4947 + mem[_4947]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4947 + mem[_4947]]) + 1 < 0 or _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1
                            mem[_4947 + ceil32(return_data.size)] = _5043
                            require _4995 + (32 * _5043) + 32 <= return_data.size
                            mem[_4947 + ceil32(return_data.size) + 32 len ceil32(32 * _5043)] = mem[_4947 + _4995 + 32 len ceil32(32 * _5043)]
                            if 1 >= _5043:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4947 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3572 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3572]:
                                revert with 0, 50
                            mem[_3572 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3572]:
                                revert with 0, 50
                            mem[_3572 + 64] = token0Address
                            mem[_3572 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3572 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3572 + 132] = 0
                            mem[_3572 + 164] = 160
                            mem[_3572 + 260] = mem[_3572]
                            idx = 0
                            s = _3572 + 32
                            t = _3572 + 292
                            while idx < mem[_3572]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3572 + 196] = this.address
                            mem[_3572 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3572 + (32 * mem[_3572]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4946 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4994 = mem[_4946]
                            require mem[_4946] <= test266151307()
                            require _4946 + mem[_4946] + 31 < _4946 + return_data.size
                            _5042 = mem[_4946 + mem[_4946]]
                            if mem[_4946 + mem[_4946]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4946 + mem[_4946]]) + 1 < 0 or _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1
                            mem[_4946 + ceil32(return_data.size)] = _5042
                            require _4994 + (32 * _5042) + 32 <= return_data.size
                            mem[_4946 + ceil32(return_data.size) + 32 len ceil32(32 * _5042)] = mem[_4946 + _4994 + 32 len ceil32(32 * _5042)]
                            if 1 >= _5042:
                                revert with 0, 50
                            _6018 = mem[_4946 + ceil32(return_data.size) + 64]
                            _6161 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 64] = token1Address
                            mem[_6161 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6161 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6161 + 132] = 0
                            mem[_6161 + 164] = 160
                            mem[_6161 + 260] = mem[_6161]
                            idx = 0
                            s = _6161 + 32
                            t = _6161 + 292
                            while idx < mem[_6161]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6161 + 196] = this.address
                            mem[_6161 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6161 + (32 * mem[_6161]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6736 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6752 = mem[_6736]
                            require mem[_6736] <= test266151307()
                            require _6736 + mem[_6736] + 31 < _6736 + return_data.size
                            _6768 = mem[_6736 + mem[_6736]]
                            if mem[_6736 + mem[_6736]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6736 + mem[_6736]]) + 1 < 0 or _6736 + ceil32(return_data.size) + ceil32(32 * mem[_6736 + mem[_6736]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6736 + ceil32(return_data.size) + ceil32(32 * mem[_6736 + mem[_6736]]) + 1
                            mem[_6736 + ceil32(return_data.size)] = _6768
                            require _6752 + (32 * _6768) + 32 <= return_data.size
                            mem[_6736 + ceil32(return_data.size) + 32 len ceil32(32 * _6768)] = mem[_6736 + _6752 + 32 len ceil32(32 * _6768)]
                            if 1 >= _6768:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6018, mem[_6736 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3307 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3307] = return_data.size
                mem[_3307 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3539 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 64] = token1Address
                        mem[_3539 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3539 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3539 + 132] = 0
                        mem[_3539 + 164] = 160
                        mem[_3539 + 260] = mem[_3539]
                        idx = 0
                        s = _3539 + 32
                        t = _3539 + 292
                        while idx < mem[_3539]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3539 + 196] = this.address
                        mem[_3539 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3539 + (32 * mem[_3539]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4951 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4999 = mem[_4951]
                        require mem[_4951] <= test266151307()
                        require _4951 + mem[_4951] + 31 < _4951 + return_data.size
                        _5047 = mem[_4951 + mem[_4951]]
                        if mem[_4951 + mem[_4951]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4951 + mem[_4951]]) + 1 < 0 or _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1
                        mem[_4951 + ceil32(return_data.size)] = _5047
                        require _4999 + (32 * _5047) + 32 <= return_data.size
                        mem[_4951 + ceil32(return_data.size) + 32 len ceil32(32 * _5047)] = mem[_4951 + _4999 + 32 len ceil32(32 * _5047)]
                        if 1 >= _5047:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4951 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3579 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3579]:
                                revert with 0, 50
                            mem[_3579 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3579]:
                                revert with 0, 50
                            mem[_3579 + 64] = token0Address
                            mem[_3579 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3579 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3579 + 132] = 0
                            mem[_3579 + 164] = 160
                            mem[_3579 + 260] = mem[_3579]
                            idx = 0
                            s = _3579 + 32
                            t = _3579 + 292
                            while idx < mem[_3579]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3579 + 196] = this.address
                            mem[_3579 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3579 + (32 * mem[_3579]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4950 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4998 = mem[_4950]
                            require mem[_4950] <= test266151307()
                            require _4950 + mem[_4950] + 31 < _4950 + return_data.size
                            _5046 = mem[_4950 + mem[_4950]]
                            if mem[_4950 + mem[_4950]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4950 + mem[_4950]]) + 1 < 0 or _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1
                            mem[_4950 + ceil32(return_data.size)] = _5046
                            require _4998 + (32 * _5046) + 32 <= return_data.size
                            mem[_4950 + ceil32(return_data.size) + 32 len ceil32(32 * _5046)] = mem[_4950 + _4998 + 32 len ceil32(32 * _5046)]
                            if 1 >= _5046:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4950 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3577 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3577]:
                                revert with 0, 50
                            mem[_3577 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3577]:
                                revert with 0, 50
                            mem[_3577 + 64] = token0Address
                            mem[_3577 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3577 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3577 + 132] = 0
                            mem[_3577 + 164] = 160
                            mem[_3577 + 260] = mem[_3577]
                            idx = 0
                            s = _3577 + 32
                            t = _3577 + 292
                            while idx < mem[_3577]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3577 + 196] = this.address
                            mem[_3577 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3577 + (32 * mem[_3577]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4949 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4997 = mem[_4949]
                            require mem[_4949] <= test266151307()
                            require _4949 + mem[_4949] + 31 < _4949 + return_data.size
                            _5045 = mem[_4949 + mem[_4949]]
                            if mem[_4949 + mem[_4949]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4949 + mem[_4949]]) + 1 < 0 or _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1
                            mem[_4949 + ceil32(return_data.size)] = _5045
                            require _4997 + (32 * _5045) + 32 <= return_data.size
                            mem[_4949 + ceil32(return_data.size) + 32 len ceil32(32 * _5045)] = mem[_4949 + _4997 + 32 len ceil32(32 * _5045)]
                            if 1 >= _5045:
                                revert with 0, 50
                            _6021 = mem[_4949 + ceil32(return_data.size) + 64]
                            _6163 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 64] = token1Address
                            mem[_6163 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6163 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6163 + 132] = 0
                            mem[_6163 + 164] = 160
                            mem[_6163 + 260] = mem[_6163]
                            idx = 0
                            s = _6163 + 32
                            t = _6163 + 292
                            while idx < mem[_6163]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6163 + 196] = this.address
                            mem[_6163 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6163 + (32 * mem[_6163]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6737 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6753 = mem[_6737]
                            require mem[_6737] <= test266151307()
                            require _6737 + mem[_6737] + 31 < _6737 + return_data.size
                            _6769 = mem[_6737 + mem[_6737]]
                            if mem[_6737 + mem[_6737]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6737 + mem[_6737]]) + 1 < 0 or _6737 + ceil32(return_data.size) + ceil32(32 * mem[_6737 + mem[_6737]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6737 + ceil32(return_data.size) + ceil32(32 * mem[_6737 + mem[_6737]]) + 1
                            mem[_6737 + ceil32(return_data.size)] = _6769
                            require _6753 + (32 * _6769) + 32 <= return_data.size
                            mem[_6737 + ceil32(return_data.size) + 32 len ceil32(32 * _6769)] = mem[_6737 + _6753 + 32 len ceil32(32 * _6769)]
                            if 1 >= _6769:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6021, mem[_6737 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3329 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3329] = return_data.size
                    mem[_3329 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _16
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3541 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 64] = token1Address
                        mem[_3541 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3541 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                        mem[_3541 + 132] = 0
                        mem[_3541 + 164] = 160
                        mem[_3541 + 260] = mem[_3541]
                        idx = 0
                        s = _3541 + 32
                        t = _3541 + 292
                        while idx < mem[_3541]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3541 + 196] = this.address
                        mem[_3541 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3541 + (32 * mem[_3541]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4954 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5002 = mem[_4954]
                        require mem[_4954] <= test266151307()
                        require _4954 + mem[_4954] + 31 < _4954 + return_data.size
                        _5050 = mem[_4954 + mem[_4954]]
                        if mem[_4954 + mem[_4954]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4954 + mem[_4954]]) + 1 < 0 or _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1
                        mem[_4954 + ceil32(return_data.size)] = _5050
                        require _5002 + (32 * _5050) + 32 <= return_data.size
                        mem[_4954 + ceil32(return_data.size) + 32 len ceil32(32 * _5050)] = mem[_4954 + _5002 + 32 len ceil32(32 * _5050)]
                        if 1 >= _5050:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), mem[_4954 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3584 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3584]:
                                revert with 0, 50
                            mem[_3584 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3584]:
                                revert with 0, 50
                            mem[_3584 + 64] = token0Address
                            mem[_3584 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3584 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3584 + 132] = 0
                            mem[_3584 + 164] = 160
                            mem[_3584 + 260] = mem[_3584]
                            idx = 0
                            s = _3584 + 32
                            t = _3584 + 292
                            while idx < mem[_3584]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3584 + 196] = this.address
                            mem[_3584 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3584 + (32 * mem[_3584]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4953 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5001 = mem[_4953]
                            require mem[_4953] <= test266151307()
                            require _4953 + mem[_4953] + 31 < _4953 + return_data.size
                            _5049 = mem[_4953 + mem[_4953]]
                            if mem[_4953 + mem[_4953]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4953 + mem[_4953]]) + 1 < 0 or _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1
                            mem[_4953 + ceil32(return_data.size)] = _5049
                            require _5001 + (32 * _5049) + 32 <= return_data.size
                            mem[_4953 + ceil32(return_data.size) + 32 len ceil32(32 * _5049)] = mem[_4953 + _5001 + 32 len ceil32(32 * _5049)]
                            if 1 >= _5049:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4953 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3582 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3582]:
                                revert with 0, 50
                            mem[_3582 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3582]:
                                revert with 0, 50
                            mem[_3582 + 64] = token0Address
                            mem[_3582 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3582 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_3582 + 132] = 0
                            mem[_3582 + 164] = 160
                            mem[_3582 + 260] = mem[_3582]
                            idx = 0
                            s = _3582 + 32
                            t = _3582 + 292
                            while idx < mem[_3582]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3582 + 196] = this.address
                            mem[_3582 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3582 + (32 * mem[_3582]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4952 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5000 = mem[_4952]
                            require mem[_4952] <= test266151307()
                            require _4952 + mem[_4952] + 31 < _4952 + return_data.size
                            _5048 = mem[_4952 + mem[_4952]]
                            if mem[_4952 + mem[_4952]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4952 + mem[_4952]]) + 1 < 0 or _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1
                            mem[_4952 + ceil32(return_data.size)] = _5048
                            require _5000 + (32 * _5048) + 32 <= return_data.size
                            mem[_4952 + ceil32(return_data.size) + 32 len ceil32(32 * _5048)] = mem[_4952 + _5000 + 32 len ceil32(32 * _5048)]
                            if 1 >= _5048:
                                revert with 0, 50
                            _6024 = mem[_4952 + ceil32(return_data.size) + 64]
                            _6165 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 64] = token1Address
                            mem[_6165 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6165 + 100] = ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000) / 2
                            mem[_6165 + 132] = 0
                            mem[_6165 + 164] = 160
                            mem[_6165 + 260] = mem[_6165]
                            idx = 0
                            s = _6165 + 32
                            t = _6165 + 292
                            while idx < mem[_6165]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6165 + 196] = this.address
                            mem[_6165 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6165 + (32 * mem[_6165]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6738 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6754 = mem[_6738]
                            require mem[_6738] <= test266151307()
                            require _6738 + mem[_6738] + 31 < _6738 + return_data.size
                            _6770 = mem[_6738 + mem[_6738]]
                            if mem[_6738 + mem[_6738]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6738 + mem[_6738]]) + 1 < 0 or _6738 + ceil32(return_data.size) + ceil32(32 * mem[_6738 + mem[_6738]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6738 + ceil32(return_data.size) + ceil32(32 * mem[_6738 + mem[_6738]]) + 1
                            mem[_6738 + ceil32(return_data.size)] = _6770
                            require _6754 + (32 * _6770) + 32 <= return_data.size
                            mem[_6738 + ceil32(return_data.size) + 32 len ceil32(32 * _6770)] = mem[_6738 + _6754 + 32 len ceil32(32 * _6770)]
                            if 1 >= _6770:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6024, mem[_6738 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield(ext_call.return_data[0] + _3283 - ((ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000), (ext_call.return_data[0] * sub_b1a41085) + (_3283 * sub_b1a41085) / 10000);
        else:
            mem[132] = this.address
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.harvest(uint256 arg1, address arg2) with:
                 gas gas_remaining wei
                args poolId, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _20 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1692 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1696 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1692 + (32 * _1696) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1696)] = mem[(2 * ceil32(return_data.size)) + _1692 + 224 len ceil32(32 * _1696)]
            if 1 >= _1696:
                revert with 0, 50
            _3284 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3284 < (ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3543 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3543]:
                            revert with 0, 50
                        mem[_3543 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3543]:
                            revert with 0, 50
                        mem[_3543 + 64] = token1Address
                        mem[_3543 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3543 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3543 + 132] = 0
                        mem[_3543 + 164] = 160
                        mem[_3543 + 260] = mem[_3543]
                        idx = 0
                        s = _3543 + 32
                        t = _3543 + 292
                        while idx < mem[_3543]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3543 + 196] = this.address
                        mem[_3543 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3543 + (32 * mem[_3543]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4957 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5005 = mem[_4957]
                        require mem[_4957] <= test266151307()
                        require _4957 + mem[_4957] + 31 < _4957 + return_data.size
                        _5053 = mem[_4957 + mem[_4957]]
                        if mem[_4957 + mem[_4957]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4957 + mem[_4957]]) + 1 < 0 or _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1
                        mem[_4957 + ceil32(return_data.size)] = _5053
                        require _5005 + (32 * _5053) + 32 <= return_data.size
                        mem[_4957 + ceil32(return_data.size) + 32 len ceil32(32 * _5053)] = mem[_4957 + _5005 + 32 len ceil32(32 * _5053)]
                        if 1 >= _5053:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4957 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3589 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3589]:
                                revert with 0, 50
                            mem[_3589 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3589]:
                                revert with 0, 50
                            mem[_3589 + 64] = token0Address
                            mem[_3589 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3589 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3589 + 132] = 0
                            mem[_3589 + 164] = 160
                            mem[_3589 + 260] = mem[_3589]
                            idx = 0
                            s = _3589 + 32
                            t = _3589 + 292
                            while idx < mem[_3589]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3589 + 196] = this.address
                            mem[_3589 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3589 + (32 * mem[_3589]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4956 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5004 = mem[_4956]
                            require mem[_4956] <= test266151307()
                            require _4956 + mem[_4956] + 31 < _4956 + return_data.size
                            _5052 = mem[_4956 + mem[_4956]]
                            if mem[_4956 + mem[_4956]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4956 + mem[_4956]]) + 1 < 0 or _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1
                            mem[_4956 + ceil32(return_data.size)] = _5052
                            require _5004 + (32 * _5052) + 32 <= return_data.size
                            mem[_4956 + ceil32(return_data.size) + 32 len ceil32(32 * _5052)] = mem[_4956 + _5004 + 32 len ceil32(32 * _5052)]
                            if 1 >= _5052:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4956 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3587 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3587]:
                                revert with 0, 50
                            mem[_3587 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3587]:
                                revert with 0, 50
                            mem[_3587 + 64] = token0Address
                            mem[_3587 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3587 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3587 + 132] = 0
                            mem[_3587 + 164] = 160
                            mem[_3587 + 260] = mem[_3587]
                            idx = 0
                            s = _3587 + 32
                            t = _3587 + 292
                            while idx < mem[_3587]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3587 + 196] = this.address
                            mem[_3587 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3587 + (32 * mem[_3587]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4955 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5003 = mem[_4955]
                            require mem[_4955] <= test266151307()
                            require _4955 + mem[_4955] + 31 < _4955 + return_data.size
                            _5051 = mem[_4955 + mem[_4955]]
                            if mem[_4955 + mem[_4955]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4955 + mem[_4955]]) + 1 < 0 or _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1
                            mem[_4955 + ceil32(return_data.size)] = _5051
                            require _5003 + (32 * _5051) + 32 <= return_data.size
                            mem[_4955 + ceil32(return_data.size) + 32 len ceil32(32 * _5051)] = mem[_4955 + _5003 + 32 len ceil32(32 * _5051)]
                            if 1 >= _5051:
                                revert with 0, 50
                            _6027 = mem[_4955 + ceil32(return_data.size) + 64]
                            _6167 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6167]:
                                revert with 0, 50
                            mem[_6167 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6167]:
                                revert with 0, 50
                            mem[_6167 + 64] = token1Address
                            mem[_6167 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6167 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6167 + 132] = 0
                            mem[_6167 + 164] = 160
                            mem[_6167 + 260] = mem[_6167]
                            idx = 0
                            s = _6167 + 32
                            t = _6167 + 292
                            while idx < mem[_6167]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6167 + 196] = this.address
                            mem[_6167 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6167 + (32 * mem[_6167]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6739 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6755 = mem[_6739]
                            require mem[_6739] <= test266151307()
                            require _6739 + mem[_6739] + 31 < _6739 + return_data.size
                            _6771 = mem[_6739 + mem[_6739]]
                            if mem[_6739 + mem[_6739]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6739 + mem[_6739]]) + 1 < 0 or _6739 + ceil32(return_data.size) + ceil32(32 * mem[_6739 + mem[_6739]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6739 + ceil32(return_data.size) + ceil32(32 * mem[_6739 + mem[_6739]]) + 1
                            mem[_6739 + ceil32(return_data.size)] = _6771
                            require _6755 + (32 * _6771) + 32 <= return_data.size
                            mem[_6739 + ceil32(return_data.size) + 32 len ceil32(32 * _6771)] = mem[_6739 + _6755 + 32 len ceil32(32 * _6771)]
                            if 1 >= _6771:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6027, mem[_6739 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3331 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3331] = return_data.size
                    mem[_3331 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3545 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3545]:
                            revert with 0, 50
                        mem[_3545 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3545]:
                            revert with 0, 50
                        mem[_3545 + 64] = token1Address
                        mem[_3545 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3545 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3545 + 132] = 0
                        mem[_3545 + 164] = 160
                        mem[_3545 + 260] = mem[_3545]
                        idx = 0
                        s = _3545 + 32
                        t = _3545 + 292
                        while idx < mem[_3545]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3545 + 196] = this.address
                        mem[_3545 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3545 + (32 * mem[_3545]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4960 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5008 = mem[_4960]
                        require mem[_4960] <= test266151307()
                        require _4960 + mem[_4960] + 31 < _4960 + return_data.size
                        _5056 = mem[_4960 + mem[_4960]]
                        if mem[_4960 + mem[_4960]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4960 + mem[_4960]]) + 1 < 0 or _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1
                        mem[_4960 + ceil32(return_data.size)] = _5056
                        require _5008 + (32 * _5056) + 32 <= return_data.size
                        mem[_4960 + ceil32(return_data.size) + 32 len ceil32(32 * _5056)] = mem[_4960 + _5008 + 32 len ceil32(32 * _5056)]
                        if 1 >= _5056:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4960 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3594 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3594]:
                                revert with 0, 50
                            mem[_3594 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3594]:
                                revert with 0, 50
                            mem[_3594 + 64] = token0Address
                            mem[_3594 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3594 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3594 + 132] = 0
                            mem[_3594 + 164] = 160
                            mem[_3594 + 260] = mem[_3594]
                            idx = 0
                            s = _3594 + 32
                            t = _3594 + 292
                            while idx < mem[_3594]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3594 + 196] = this.address
                            mem[_3594 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3594 + (32 * mem[_3594]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4959 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5007 = mem[_4959]
                            require mem[_4959] <= test266151307()
                            require _4959 + mem[_4959] + 31 < _4959 + return_data.size
                            _5055 = mem[_4959 + mem[_4959]]
                            if mem[_4959 + mem[_4959]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4959 + mem[_4959]]) + 1 < 0 or _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1
                            mem[_4959 + ceil32(return_data.size)] = _5055
                            require _5007 + (32 * _5055) + 32 <= return_data.size
                            mem[_4959 + ceil32(return_data.size) + 32 len ceil32(32 * _5055)] = mem[_4959 + _5007 + 32 len ceil32(32 * _5055)]
                            if 1 >= _5055:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4959 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3592 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3592]:
                                revert with 0, 50
                            mem[_3592 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3592]:
                                revert with 0, 50
                            mem[_3592 + 64] = token0Address
                            mem[_3592 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3592 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3592 + 132] = 0
                            mem[_3592 + 164] = 160
                            mem[_3592 + 260] = mem[_3592]
                            idx = 0
                            s = _3592 + 32
                            t = _3592 + 292
                            while idx < mem[_3592]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3592 + 196] = this.address
                            mem[_3592 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3592 + (32 * mem[_3592]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4958 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5006 = mem[_4958]
                            require mem[_4958] <= test266151307()
                            require _4958 + mem[_4958] + 31 < _4958 + return_data.size
                            _5054 = mem[_4958 + mem[_4958]]
                            if mem[_4958 + mem[_4958]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4958 + mem[_4958]]) + 1 < 0 or _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1
                            mem[_4958 + ceil32(return_data.size)] = _5054
                            require _5006 + (32 * _5054) + 32 <= return_data.size
                            mem[_4958 + ceil32(return_data.size) + 32 len ceil32(32 * _5054)] = mem[_4958 + _5006 + 32 len ceil32(32 * _5054)]
                            if 1 >= _5054:
                                revert with 0, 50
                            _6030 = mem[_4958 + ceil32(return_data.size) + 64]
                            _6169 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6169]:
                                revert with 0, 50
                            mem[_6169 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6169]:
                                revert with 0, 50
                            mem[_6169 + 64] = token1Address
                            mem[_6169 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6169 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6169 + 132] = 0
                            mem[_6169 + 164] = 160
                            mem[_6169 + 260] = mem[_6169]
                            idx = 0
                            s = _6169 + 32
                            t = _6169 + 292
                            while idx < mem[_6169]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6169 + 196] = this.address
                            mem[_6169 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6169 + (32 * mem[_6169]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6740 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6756 = mem[_6740]
                            require mem[_6740] <= test266151307()
                            require _6740 + mem[_6740] + 31 < _6740 + return_data.size
                            _6772 = mem[_6740 + mem[_6740]]
                            if mem[_6740 + mem[_6740]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6740 + mem[_6740]]) + 1 < 0 or _6740 + ceil32(return_data.size) + ceil32(32 * mem[_6740 + mem[_6740]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6740 + ceil32(return_data.size) + ceil32(32 * mem[_6740 + mem[_6740]]) + 1
                            mem[_6740 + ceil32(return_data.size)] = _6772
                            require _6756 + (32 * _6772) + 32 <= return_data.size
                            mem[_6740 + ceil32(return_data.size) + 32 len ceil32(32 * _6772)] = mem[_6740 + _6756 + 32 len ceil32(32 * _6772)]
                            if 1 >= _6772:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6030, mem[_6740 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3308 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3308] = return_data.size
                mem[_3308 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3547 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3547]:
                            revert with 0, 50
                        mem[_3547 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3547]:
                            revert with 0, 50
                        mem[_3547 + 64] = token1Address
                        mem[_3547 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3547 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3547 + 132] = 0
                        mem[_3547 + 164] = 160
                        mem[_3547 + 260] = mem[_3547]
                        idx = 0
                        s = _3547 + 32
                        t = _3547 + 292
                        while idx < mem[_3547]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3547 + 196] = this.address
                        mem[_3547 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3547 + (32 * mem[_3547]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4963 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5011 = mem[_4963]
                        require mem[_4963] <= test266151307()
                        require _4963 + mem[_4963] + 31 < _4963 + return_data.size
                        _5059 = mem[_4963 + mem[_4963]]
                        if mem[_4963 + mem[_4963]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4963 + mem[_4963]]) + 1 < 0 or _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1
                        mem[_4963 + ceil32(return_data.size)] = _5059
                        require _5011 + (32 * _5059) + 32 <= return_data.size
                        mem[_4963 + ceil32(return_data.size) + 32 len ceil32(32 * _5059)] = mem[_4963 + _5011 + 32 len ceil32(32 * _5059)]
                        if 1 >= _5059:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4963 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3599 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3599]:
                                revert with 0, 50
                            mem[_3599 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3599]:
                                revert with 0, 50
                            mem[_3599 + 64] = token0Address
                            mem[_3599 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3599 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3599 + 132] = 0
                            mem[_3599 + 164] = 160
                            mem[_3599 + 260] = mem[_3599]
                            idx = 0
                            s = _3599 + 32
                            t = _3599 + 292
                            while idx < mem[_3599]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3599 + 196] = this.address
                            mem[_3599 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3599 + (32 * mem[_3599]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4962 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5010 = mem[_4962]
                            require mem[_4962] <= test266151307()
                            require _4962 + mem[_4962] + 31 < _4962 + return_data.size
                            _5058 = mem[_4962 + mem[_4962]]
                            if mem[_4962 + mem[_4962]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4962 + mem[_4962]]) + 1 < 0 or _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1
                            mem[_4962 + ceil32(return_data.size)] = _5058
                            require _5010 + (32 * _5058) + 32 <= return_data.size
                            mem[_4962 + ceil32(return_data.size) + 32 len ceil32(32 * _5058)] = mem[_4962 + _5010 + 32 len ceil32(32 * _5058)]
                            if 1 >= _5058:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4962 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3597 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3597]:
                                revert with 0, 50
                            mem[_3597 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3597]:
                                revert with 0, 50
                            mem[_3597 + 64] = token0Address
                            mem[_3597 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3597 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3597 + 132] = 0
                            mem[_3597 + 164] = 160
                            mem[_3597 + 260] = mem[_3597]
                            idx = 0
                            s = _3597 + 32
                            t = _3597 + 292
                            while idx < mem[_3597]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3597 + 196] = this.address
                            mem[_3597 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3597 + (32 * mem[_3597]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4961 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5009 = mem[_4961]
                            require mem[_4961] <= test266151307()
                            require _4961 + mem[_4961] + 31 < _4961 + return_data.size
                            _5057 = mem[_4961 + mem[_4961]]
                            if mem[_4961 + mem[_4961]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4961 + mem[_4961]]) + 1 < 0 or _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1
                            mem[_4961 + ceil32(return_data.size)] = _5057
                            require _5009 + (32 * _5057) + 32 <= return_data.size
                            mem[_4961 + ceil32(return_data.size) + 32 len ceil32(32 * _5057)] = mem[_4961 + _5009 + 32 len ceil32(32 * _5057)]
                            if 1 >= _5057:
                                revert with 0, 50
                            _6033 = mem[_4961 + ceil32(return_data.size) + 64]
                            _6171 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6171]:
                                revert with 0, 50
                            mem[_6171 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6171]:
                                revert with 0, 50
                            mem[_6171 + 64] = token1Address
                            mem[_6171 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6171 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6171 + 132] = 0
                            mem[_6171 + 164] = 160
                            mem[_6171 + 260] = mem[_6171]
                            idx = 0
                            s = _6171 + 32
                            t = _6171 + 292
                            while idx < mem[_6171]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6171 + 196] = this.address
                            mem[_6171 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6171 + (32 * mem[_6171]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6741 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6757 = mem[_6741]
                            require mem[_6741] <= test266151307()
                            require _6741 + mem[_6741] + 31 < _6741 + return_data.size
                            _6773 = mem[_6741 + mem[_6741]]
                            if mem[_6741 + mem[_6741]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6741 + mem[_6741]]) + 1 < 0 or _6741 + ceil32(return_data.size) + ceil32(32 * mem[_6741 + mem[_6741]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6741 + ceil32(return_data.size) + ceil32(32 * mem[_6741 + mem[_6741]]) + 1
                            mem[_6741 + ceil32(return_data.size)] = _6773
                            require _6757 + (32 * _6773) + 32 <= return_data.size
                            mem[_6741 + ceil32(return_data.size) + 32 len ceil32(32 * _6773)] = mem[_6741 + _6757 + 32 len ceil32(32 * _6773)]
                            if 1 >= _6773:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6033, mem[_6741 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3333 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3333] = return_data.size
                    mem[_3333 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _20
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3549 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3549]:
                            revert with 0, 50
                        mem[_3549 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3549]:
                            revert with 0, 50
                        mem[_3549 + 64] = token1Address
                        mem[_3549 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3549 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                        mem[_3549 + 132] = 0
                        mem[_3549 + 164] = 160
                        mem[_3549 + 260] = mem[_3549]
                        idx = 0
                        s = _3549 + 32
                        t = _3549 + 292
                        while idx < mem[_3549]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3549 + 196] = this.address
                        mem[_3549 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3549 + (32 * mem[_3549]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4966 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5014 = mem[_4966]
                        require mem[_4966] <= test266151307()
                        require _4966 + mem[_4966] + 31 < _4966 + return_data.size
                        _5062 = mem[_4966 + mem[_4966]]
                        if mem[_4966 + mem[_4966]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4966 + mem[_4966]]) + 1 < 0 or _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1
                        mem[_4966 + ceil32(return_data.size)] = _5062
                        require _5014 + (32 * _5062) + 32 <= return_data.size
                        mem[_4966 + ceil32(return_data.size) + 32 len ceil32(32 * _5062)] = mem[_4966 + _5014 + 32 len ceil32(32 * _5062)]
                        if 1 >= _5062:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), mem[_4966 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3604 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3604]:
                                revert with 0, 50
                            mem[_3604 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3604]:
                                revert with 0, 50
                            mem[_3604 + 64] = token0Address
                            mem[_3604 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3604 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3604 + 132] = 0
                            mem[_3604 + 164] = 160
                            mem[_3604 + 260] = mem[_3604]
                            idx = 0
                            s = _3604 + 32
                            t = _3604 + 292
                            while idx < mem[_3604]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3604 + 196] = this.address
                            mem[_3604 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3604 + (32 * mem[_3604]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4965 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5013 = mem[_4965]
                            require mem[_4965] <= test266151307()
                            require _4965 + mem[_4965] + 31 < _4965 + return_data.size
                            _5061 = mem[_4965 + mem[_4965]]
                            if mem[_4965 + mem[_4965]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4965 + mem[_4965]]) + 1 < 0 or _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1
                            mem[_4965 + ceil32(return_data.size)] = _5061
                            require _5013 + (32 * _5061) + 32 <= return_data.size
                            mem[_4965 + ceil32(return_data.size) + 32 len ceil32(32 * _5061)] = mem[_4965 + _5013 + 32 len ceil32(32 * _5061)]
                            if 1 >= _5061:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4965 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3602 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3602]:
                                revert with 0, 50
                            mem[_3602 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3602]:
                                revert with 0, 50
                            mem[_3602 + 64] = token0Address
                            mem[_3602 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3602 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_3602 + 132] = 0
                            mem[_3602 + 164] = 160
                            mem[_3602 + 260] = mem[_3602]
                            idx = 0
                            s = _3602 + 32
                            t = _3602 + 292
                            while idx < mem[_3602]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3602 + 196] = this.address
                            mem[_3602 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3602 + (32 * mem[_3602]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4964 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5012 = mem[_4964]
                            require mem[_4964] <= test266151307()
                            require _4964 + mem[_4964] + 31 < _4964 + return_data.size
                            _5060 = mem[_4964 + mem[_4964]]
                            if mem[_4964 + mem[_4964]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4964 + mem[_4964]]) + 1 < 0 or _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1
                            mem[_4964 + ceil32(return_data.size)] = _5060
                            require _5012 + (32 * _5060) + 32 <= return_data.size
                            mem[_4964 + ceil32(return_data.size) + 32 len ceil32(32 * _5060)] = mem[_4964 + _5012 + 32 len ceil32(32 * _5060)]
                            if 1 >= _5060:
                                revert with 0, 50
                            _6036 = mem[_4964 + ceil32(return_data.size) + 64]
                            _6173 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6173]:
                                revert with 0, 50
                            mem[_6173 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6173]:
                                revert with 0, 50
                            mem[_6173 + 64] = token1Address
                            mem[_6173 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6173 + 100] = ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000) / 2
                            mem[_6173 + 132] = 0
                            mem[_6173 + 164] = 160
                            mem[_6173 + 260] = mem[_6173]
                            idx = 0
                            s = _6173 + 32
                            t = _6173 + 292
                            while idx < mem[_6173]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6173 + 196] = this.address
                            mem[_6173 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6173 + (32 * mem[_6173]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6742 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6758 = mem[_6742]
                            require mem[_6742] <= test266151307()
                            require _6742 + mem[_6742] + 31 < _6742 + return_data.size
                            _6774 = mem[_6742 + mem[_6742]]
                            if mem[_6742 + mem[_6742]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6742 + mem[_6742]]) + 1 < 0 or _6742 + ceil32(return_data.size) + ceil32(32 * mem[_6742 + mem[_6742]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6742 + ceil32(return_data.size) + ceil32(32 * mem[_6742 + mem[_6742]]) + 1
                            mem[_6742 + ceil32(return_data.size)] = _6774
                            require _6758 + (32 * _6774) + 32 <= return_data.size
                            mem[_6742 + ceil32(return_data.size) + 32 len ceil32(32 * _6774)] = mem[_6742 + _6758 + 32 len ceil32(32 * _6774)]
                            if 1 >= _6774:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6036, mem[_6742 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield(ext_call.return_data[0] + _3284 - ((ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000), (ext_call.return_data[0] * sub_b1a41085) + (_3284 * sub_b1a41085) / 10000);
    else:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
        if paused:
            revert with 0, 'Pausable: paused'
        if not sub_abddf82e:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _24 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1693 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1697 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1693 + (32 * _1697) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1697)] = mem[(2 * ceil32(return_data.size)) + _1693 + 224 len ceil32(32 * _1697)]
            if 1 >= _1697:
                revert with 0, 50
            _3285 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3285 < (ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3551 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3551]:
                            revert with 0, 50
                        mem[_3551 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3551]:
                            revert with 0, 50
                        mem[_3551 + 64] = token1Address
                        mem[_3551 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3551 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3551 + 132] = 0
                        mem[_3551 + 164] = 160
                        mem[_3551 + 260] = mem[_3551]
                        idx = 0
                        s = _3551 + 32
                        t = _3551 + 292
                        while idx < mem[_3551]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3551 + 196] = this.address
                        mem[_3551 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3551 + (32 * mem[_3551]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4969 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5017 = mem[_4969]
                        require mem[_4969] <= test266151307()
                        require _4969 + mem[_4969] + 31 < _4969 + return_data.size
                        _5065 = mem[_4969 + mem[_4969]]
                        if mem[_4969 + mem[_4969]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4969 + mem[_4969]]) + 1 < 0 or _4969 + ceil32(return_data.size) + ceil32(32 * mem[_4969 + mem[_4969]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4969 + ceil32(return_data.size) + ceil32(32 * mem[_4969 + mem[_4969]]) + 1
                        mem[_4969 + ceil32(return_data.size)] = _5065
                        require _5017 + (32 * _5065) + 32 <= return_data.size
                        mem[_4969 + ceil32(return_data.size) + 32 len ceil32(32 * _5065)] = mem[_4969 + _5017 + 32 len ceil32(32 * _5065)]
                        if 1 >= _5065:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4969 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3609 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3609]:
                                revert with 0, 50
                            mem[_3609 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3609]:
                                revert with 0, 50
                            mem[_3609 + 64] = token0Address
                            mem[_3609 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3609 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3609 + 132] = 0
                            mem[_3609 + 164] = 160
                            mem[_3609 + 260] = mem[_3609]
                            idx = 0
                            s = _3609 + 32
                            t = _3609 + 292
                            while idx < mem[_3609]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3609 + 196] = this.address
                            mem[_3609 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3609 + (32 * mem[_3609]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4968 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5016 = mem[_4968]
                            require mem[_4968] <= test266151307()
                            require _4968 + mem[_4968] + 31 < _4968 + return_data.size
                            _5064 = mem[_4968 + mem[_4968]]
                            if mem[_4968 + mem[_4968]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4968 + mem[_4968]]) + 1 < 0 or _4968 + ceil32(return_data.size) + ceil32(32 * mem[_4968 + mem[_4968]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4968 + ceil32(return_data.size) + ceil32(32 * mem[_4968 + mem[_4968]]) + 1
                            mem[_4968 + ceil32(return_data.size)] = _5064
                            require _5016 + (32 * _5064) + 32 <= return_data.size
                            mem[_4968 + ceil32(return_data.size) + 32 len ceil32(32 * _5064)] = mem[_4968 + _5016 + 32 len ceil32(32 * _5064)]
                            if 1 >= _5064:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4968 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3607 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3607]:
                                revert with 0, 50
                            mem[_3607 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3607]:
                                revert with 0, 50
                            mem[_3607 + 64] = token0Address
                            mem[_3607 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3607 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3607 + 132] = 0
                            mem[_3607 + 164] = 160
                            mem[_3607 + 260] = mem[_3607]
                            idx = 0
                            s = _3607 + 32
                            t = _3607 + 292
                            while idx < mem[_3607]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3607 + 196] = this.address
                            mem[_3607 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3607 + (32 * mem[_3607]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4967 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5015 = mem[_4967]
                            require mem[_4967] <= test266151307()
                            require _4967 + mem[_4967] + 31 < _4967 + return_data.size
                            _5063 = mem[_4967 + mem[_4967]]
                            if mem[_4967 + mem[_4967]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4967 + mem[_4967]]) + 1 < 0 or _4967 + ceil32(return_data.size) + ceil32(32 * mem[_4967 + mem[_4967]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4967 + ceil32(return_data.size) + ceil32(32 * mem[_4967 + mem[_4967]]) + 1
                            mem[_4967 + ceil32(return_data.size)] = _5063
                            require _5015 + (32 * _5063) + 32 <= return_data.size
                            mem[_4967 + ceil32(return_data.size) + 32 len ceil32(32 * _5063)] = mem[_4967 + _5015 + 32 len ceil32(32 * _5063)]
                            if 1 >= _5063:
                                revert with 0, 50
                            _6039 = mem[_4967 + ceil32(return_data.size) + 64]
                            _6175 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6175]:
                                revert with 0, 50
                            mem[_6175 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6175]:
                                revert with 0, 50
                            mem[_6175 + 64] = token1Address
                            mem[_6175 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6175 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6175 + 132] = 0
                            mem[_6175 + 164] = 160
                            mem[_6175 + 260] = mem[_6175]
                            idx = 0
                            s = _6175 + 32
                            t = _6175 + 292
                            while idx < mem[_6175]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6175 + 196] = this.address
                            mem[_6175 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6175 + (32 * mem[_6175]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6743 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6759 = mem[_6743]
                            require mem[_6743] <= test266151307()
                            require _6743 + mem[_6743] + 31 < _6743 + return_data.size
                            _6775 = mem[_6743 + mem[_6743]]
                            if mem[_6743 + mem[_6743]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6743 + mem[_6743]]) + 1 < 0 or _6743 + ceil32(return_data.size) + ceil32(32 * mem[_6743 + mem[_6743]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6743 + ceil32(return_data.size) + ceil32(32 * mem[_6743 + mem[_6743]]) + 1
                            mem[_6743 + ceil32(return_data.size)] = _6775
                            require _6759 + (32 * _6775) + 32 <= return_data.size
                            mem[_6743 + ceil32(return_data.size) + 32 len ceil32(32 * _6775)] = mem[_6743 + _6759 + 32 len ceil32(32 * _6775)]
                            if 1 >= _6775:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6039, mem[_6743 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3335 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3335] = return_data.size
                    mem[_3335 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3553 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3553]:
                            revert with 0, 50
                        mem[_3553 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3553]:
                            revert with 0, 50
                        mem[_3553 + 64] = token1Address
                        mem[_3553 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3553 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3553 + 132] = 0
                        mem[_3553 + 164] = 160
                        mem[_3553 + 260] = mem[_3553]
                        idx = 0
                        s = _3553 + 32
                        t = _3553 + 292
                        while idx < mem[_3553]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3553 + 196] = this.address
                        mem[_3553 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3553 + (32 * mem[_3553]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4972 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5020 = mem[_4972]
                        require mem[_4972] <= test266151307()
                        require _4972 + mem[_4972] + 31 < _4972 + return_data.size
                        _5068 = mem[_4972 + mem[_4972]]
                        if mem[_4972 + mem[_4972]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4972 + mem[_4972]]) + 1 < 0 or _4972 + ceil32(return_data.size) + ceil32(32 * mem[_4972 + mem[_4972]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4972 + ceil32(return_data.size) + ceil32(32 * mem[_4972 + mem[_4972]]) + 1
                        mem[_4972 + ceil32(return_data.size)] = _5068
                        require _5020 + (32 * _5068) + 32 <= return_data.size
                        mem[_4972 + ceil32(return_data.size) + 32 len ceil32(32 * _5068)] = mem[_4972 + _5020 + 32 len ceil32(32 * _5068)]
                        if 1 >= _5068:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4972 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3614 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3614]:
                                revert with 0, 50
                            mem[_3614 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3614]:
                                revert with 0, 50
                            mem[_3614 + 64] = token0Address
                            mem[_3614 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3614 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3614 + 132] = 0
                            mem[_3614 + 164] = 160
                            mem[_3614 + 260] = mem[_3614]
                            idx = 0
                            s = _3614 + 32
                            t = _3614 + 292
                            while idx < mem[_3614]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3614 + 196] = this.address
                            mem[_3614 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3614 + (32 * mem[_3614]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4971 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5019 = mem[_4971]
                            require mem[_4971] <= test266151307()
                            require _4971 + mem[_4971] + 31 < _4971 + return_data.size
                            _5067 = mem[_4971 + mem[_4971]]
                            if mem[_4971 + mem[_4971]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4971 + mem[_4971]]) + 1 < 0 or _4971 + ceil32(return_data.size) + ceil32(32 * mem[_4971 + mem[_4971]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4971 + ceil32(return_data.size) + ceil32(32 * mem[_4971 + mem[_4971]]) + 1
                            mem[_4971 + ceil32(return_data.size)] = _5067
                            require _5019 + (32 * _5067) + 32 <= return_data.size
                            mem[_4971 + ceil32(return_data.size) + 32 len ceil32(32 * _5067)] = mem[_4971 + _5019 + 32 len ceil32(32 * _5067)]
                            if 1 >= _5067:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4971 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3612 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3612]:
                                revert with 0, 50
                            mem[_3612 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3612]:
                                revert with 0, 50
                            mem[_3612 + 64] = token0Address
                            mem[_3612 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3612 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3612 + 132] = 0
                            mem[_3612 + 164] = 160
                            mem[_3612 + 260] = mem[_3612]
                            idx = 0
                            s = _3612 + 32
                            t = _3612 + 292
                            while idx < mem[_3612]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3612 + 196] = this.address
                            mem[_3612 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3612 + (32 * mem[_3612]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4970 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5018 = mem[_4970]
                            require mem[_4970] <= test266151307()
                            require _4970 + mem[_4970] + 31 < _4970 + return_data.size
                            _5066 = mem[_4970 + mem[_4970]]
                            if mem[_4970 + mem[_4970]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4970 + mem[_4970]]) + 1 < 0 or _4970 + ceil32(return_data.size) + ceil32(32 * mem[_4970 + mem[_4970]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4970 + ceil32(return_data.size) + ceil32(32 * mem[_4970 + mem[_4970]]) + 1
                            mem[_4970 + ceil32(return_data.size)] = _5066
                            require _5018 + (32 * _5066) + 32 <= return_data.size
                            mem[_4970 + ceil32(return_data.size) + 32 len ceil32(32 * _5066)] = mem[_4970 + _5018 + 32 len ceil32(32 * _5066)]
                            if 1 >= _5066:
                                revert with 0, 50
                            _6042 = mem[_4970 + ceil32(return_data.size) + 64]
                            _6177 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6177]:
                                revert with 0, 50
                            mem[_6177 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6177]:
                                revert with 0, 50
                            mem[_6177 + 64] = token1Address
                            mem[_6177 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6177 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6177 + 132] = 0
                            mem[_6177 + 164] = 160
                            mem[_6177 + 260] = mem[_6177]
                            idx = 0
                            s = _6177 + 32
                            t = _6177 + 292
                            while idx < mem[_6177]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6177 + 196] = this.address
                            mem[_6177 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6177 + (32 * mem[_6177]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6744 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6760 = mem[_6744]
                            require mem[_6744] <= test266151307()
                            require _6744 + mem[_6744] + 31 < _6744 + return_data.size
                            _6776 = mem[_6744 + mem[_6744]]
                            if mem[_6744 + mem[_6744]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6744 + mem[_6744]]) + 1 < 0 or _6744 + ceil32(return_data.size) + ceil32(32 * mem[_6744 + mem[_6744]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6744 + ceil32(return_data.size) + ceil32(32 * mem[_6744 + mem[_6744]]) + 1
                            mem[_6744 + ceil32(return_data.size)] = _6776
                            require _6760 + (32 * _6776) + 32 <= return_data.size
                            mem[_6744 + ceil32(return_data.size) + 32 len ceil32(32 * _6776)] = mem[_6744 + _6760 + 32 len ceil32(32 * _6776)]
                            if 1 >= _6776:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6042, mem[_6744 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3309 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3309] = return_data.size
                mem[_3309 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3555 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3555]:
                            revert with 0, 50
                        mem[_3555 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3555]:
                            revert with 0, 50
                        mem[_3555 + 64] = token1Address
                        mem[_3555 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3555 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3555 + 132] = 0
                        mem[_3555 + 164] = 160
                        mem[_3555 + 260] = mem[_3555]
                        idx = 0
                        s = _3555 + 32
                        t = _3555 + 292
                        while idx < mem[_3555]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3555 + 196] = this.address
                        mem[_3555 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3555 + (32 * mem[_3555]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4975 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5023 = mem[_4975]
                        require mem[_4975] <= test266151307()
                        require _4975 + mem[_4975] + 31 < _4975 + return_data.size
                        _5071 = mem[_4975 + mem[_4975]]
                        if mem[_4975 + mem[_4975]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4975 + mem[_4975]]) + 1 < 0 or _4975 + ceil32(return_data.size) + ceil32(32 * mem[_4975 + mem[_4975]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4975 + ceil32(return_data.size) + ceil32(32 * mem[_4975 + mem[_4975]]) + 1
                        mem[_4975 + ceil32(return_data.size)] = _5071
                        require _5023 + (32 * _5071) + 32 <= return_data.size
                        mem[_4975 + ceil32(return_data.size) + 32 len ceil32(32 * _5071)] = mem[_4975 + _5023 + 32 len ceil32(32 * _5071)]
                        if 1 >= _5071:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4975 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3619 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3619]:
                                revert with 0, 50
                            mem[_3619 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3619]:
                                revert with 0, 50
                            mem[_3619 + 64] = token0Address
                            mem[_3619 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3619 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3619 + 132] = 0
                            mem[_3619 + 164] = 160
                            mem[_3619 + 260] = mem[_3619]
                            idx = 0
                            s = _3619 + 32
                            t = _3619 + 292
                            while idx < mem[_3619]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3619 + 196] = this.address
                            mem[_3619 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3619 + (32 * mem[_3619]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4974 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5022 = mem[_4974]
                            require mem[_4974] <= test266151307()
                            require _4974 + mem[_4974] + 31 < _4974 + return_data.size
                            _5070 = mem[_4974 + mem[_4974]]
                            if mem[_4974 + mem[_4974]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4974 + mem[_4974]]) + 1 < 0 or _4974 + ceil32(return_data.size) + ceil32(32 * mem[_4974 + mem[_4974]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4974 + ceil32(return_data.size) + ceil32(32 * mem[_4974 + mem[_4974]]) + 1
                            mem[_4974 + ceil32(return_data.size)] = _5070
                            require _5022 + (32 * _5070) + 32 <= return_data.size
                            mem[_4974 + ceil32(return_data.size) + 32 len ceil32(32 * _5070)] = mem[_4974 + _5022 + 32 len ceil32(32 * _5070)]
                            if 1 >= _5070:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4974 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3617 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3617]:
                                revert with 0, 50
                            mem[_3617 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3617]:
                                revert with 0, 50
                            mem[_3617 + 64] = token0Address
                            mem[_3617 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3617 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3617 + 132] = 0
                            mem[_3617 + 164] = 160
                            mem[_3617 + 260] = mem[_3617]
                            idx = 0
                            s = _3617 + 32
                            t = _3617 + 292
                            while idx < mem[_3617]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3617 + 196] = this.address
                            mem[_3617 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3617 + (32 * mem[_3617]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4973 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5021 = mem[_4973]
                            require mem[_4973] <= test266151307()
                            require _4973 + mem[_4973] + 31 < _4973 + return_data.size
                            _5069 = mem[_4973 + mem[_4973]]
                            if mem[_4973 + mem[_4973]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4973 + mem[_4973]]) + 1 < 0 or _4973 + ceil32(return_data.size) + ceil32(32 * mem[_4973 + mem[_4973]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4973 + ceil32(return_data.size) + ceil32(32 * mem[_4973 + mem[_4973]]) + 1
                            mem[_4973 + ceil32(return_data.size)] = _5069
                            require _5021 + (32 * _5069) + 32 <= return_data.size
                            mem[_4973 + ceil32(return_data.size) + 32 len ceil32(32 * _5069)] = mem[_4973 + _5021 + 32 len ceil32(32 * _5069)]
                            if 1 >= _5069:
                                revert with 0, 50
                            _6045 = mem[_4973 + ceil32(return_data.size) + 64]
                            _6179 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6179]:
                                revert with 0, 50
                            mem[_6179 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6179]:
                                revert with 0, 50
                            mem[_6179 + 64] = token1Address
                            mem[_6179 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6179 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6179 + 132] = 0
                            mem[_6179 + 164] = 160
                            mem[_6179 + 260] = mem[_6179]
                            idx = 0
                            s = _6179 + 32
                            t = _6179 + 292
                            while idx < mem[_6179]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6179 + 196] = this.address
                            mem[_6179 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6179 + (32 * mem[_6179]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6745 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6761 = mem[_6745]
                            require mem[_6745] <= test266151307()
                            require _6745 + mem[_6745] + 31 < _6745 + return_data.size
                            _6777 = mem[_6745 + mem[_6745]]
                            if mem[_6745 + mem[_6745]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6745 + mem[_6745]]) + 1 < 0 or _6745 + ceil32(return_data.size) + ceil32(32 * mem[_6745 + mem[_6745]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6745 + ceil32(return_data.size) + ceil32(32 * mem[_6745 + mem[_6745]]) + 1
                            mem[_6745 + ceil32(return_data.size)] = _6777
                            require _6761 + (32 * _6777) + 32 <= return_data.size
                            mem[_6745 + ceil32(return_data.size) + 32 len ceil32(32 * _6777)] = mem[_6745 + _6761 + 32 len ceil32(32 * _6777)]
                            if 1 >= _6777:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6045, mem[_6745 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3337 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3337] = return_data.size
                    mem[_3337 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _24
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3557 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3557]:
                            revert with 0, 50
                        mem[_3557 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3557]:
                            revert with 0, 50
                        mem[_3557 + 64] = token1Address
                        mem[_3557 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3557 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                        mem[_3557 + 132] = 0
                        mem[_3557 + 164] = 160
                        mem[_3557 + 260] = mem[_3557]
                        idx = 0
                        s = _3557 + 32
                        t = _3557 + 292
                        while idx < mem[_3557]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3557 + 196] = this.address
                        mem[_3557 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3557 + (32 * mem[_3557]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4978 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5026 = mem[_4978]
                        require mem[_4978] <= test266151307()
                        require _4978 + mem[_4978] + 31 < _4978 + return_data.size
                        _5074 = mem[_4978 + mem[_4978]]
                        if mem[_4978 + mem[_4978]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4978 + mem[_4978]]) + 1 < 0 or _4978 + ceil32(return_data.size) + ceil32(32 * mem[_4978 + mem[_4978]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4978 + ceil32(return_data.size) + ceil32(32 * mem[_4978 + mem[_4978]]) + 1
                        mem[_4978 + ceil32(return_data.size)] = _5074
                        require _5026 + (32 * _5074) + 32 <= return_data.size
                        mem[_4978 + ceil32(return_data.size) + 32 len ceil32(32 * _5074)] = mem[_4978 + _5026 + 32 len ceil32(32 * _5074)]
                        if 1 >= _5074:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), mem[_4978 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3624 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3624]:
                                revert with 0, 50
                            mem[_3624 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3624]:
                                revert with 0, 50
                            mem[_3624 + 64] = token0Address
                            mem[_3624 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3624 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3624 + 132] = 0
                            mem[_3624 + 164] = 160
                            mem[_3624 + 260] = mem[_3624]
                            idx = 0
                            s = _3624 + 32
                            t = _3624 + 292
                            while idx < mem[_3624]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3624 + 196] = this.address
                            mem[_3624 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3624 + (32 * mem[_3624]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4977 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5025 = mem[_4977]
                            require mem[_4977] <= test266151307()
                            require _4977 + mem[_4977] + 31 < _4977 + return_data.size
                            _5073 = mem[_4977 + mem[_4977]]
                            if mem[_4977 + mem[_4977]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4977 + mem[_4977]]) + 1 < 0 or _4977 + ceil32(return_data.size) + ceil32(32 * mem[_4977 + mem[_4977]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4977 + ceil32(return_data.size) + ceil32(32 * mem[_4977 + mem[_4977]]) + 1
                            mem[_4977 + ceil32(return_data.size)] = _5073
                            require _5025 + (32 * _5073) + 32 <= return_data.size
                            mem[_4977 + ceil32(return_data.size) + 32 len ceil32(32 * _5073)] = mem[_4977 + _5025 + 32 len ceil32(32 * _5073)]
                            if 1 >= _5073:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4977 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3622 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3622]:
                                revert with 0, 50
                            mem[_3622 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3622]:
                                revert with 0, 50
                            mem[_3622 + 64] = token0Address
                            mem[_3622 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3622 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_3622 + 132] = 0
                            mem[_3622 + 164] = 160
                            mem[_3622 + 260] = mem[_3622]
                            idx = 0
                            s = _3622 + 32
                            t = _3622 + 292
                            while idx < mem[_3622]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3622 + 196] = this.address
                            mem[_3622 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3622 + (32 * mem[_3622]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4976 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5024 = mem[_4976]
                            require mem[_4976] <= test266151307()
                            require _4976 + mem[_4976] + 31 < _4976 + return_data.size
                            _5072 = mem[_4976 + mem[_4976]]
                            if mem[_4976 + mem[_4976]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4976 + mem[_4976]]) + 1 < 0 or _4976 + ceil32(return_data.size) + ceil32(32 * mem[_4976 + mem[_4976]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4976 + ceil32(return_data.size) + ceil32(32 * mem[_4976 + mem[_4976]]) + 1
                            mem[_4976 + ceil32(return_data.size)] = _5072
                            require _5024 + (32 * _5072) + 32 <= return_data.size
                            mem[_4976 + ceil32(return_data.size) + 32 len ceil32(32 * _5072)] = mem[_4976 + _5024 + 32 len ceil32(32 * _5072)]
                            if 1 >= _5072:
                                revert with 0, 50
                            _6048 = mem[_4976 + ceil32(return_data.size) + 64]
                            _6181 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6181]:
                                revert with 0, 50
                            mem[_6181 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6181]:
                                revert with 0, 50
                            mem[_6181 + 64] = token1Address
                            mem[_6181 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6181 + 100] = ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000) / 2
                            mem[_6181 + 132] = 0
                            mem[_6181 + 164] = 160
                            mem[_6181 + 260] = mem[_6181]
                            idx = 0
                            s = _6181 + 32
                            t = _6181 + 292
                            while idx < mem[_6181]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6181 + 196] = this.address
                            mem[_6181 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6181 + (32 * mem[_6181]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6746 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6762 = mem[_6746]
                            require mem[_6746] <= test266151307()
                            require _6746 + mem[_6746] + 31 < _6746 + return_data.size
                            _6778 = mem[_6746 + mem[_6746]]
                            if mem[_6746 + mem[_6746]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6746 + mem[_6746]]) + 1 < 0 or _6746 + ceil32(return_data.size) + ceil32(32 * mem[_6746 + mem[_6746]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6746 + ceil32(return_data.size) + ceil32(32 * mem[_6746 + mem[_6746]]) + 1
                            mem[_6746 + ceil32(return_data.size)] = _6778
                            require _6762 + (32 * _6778) + 32 <= return_data.size
                            mem[_6746 + ceil32(return_data.size) + 32 len ceil32(32 * _6778)] = mem[_6746 + _6762 + 32 len ceil32(32 * _6778)]
                            if 1 >= _6778:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6048, mem[_6746 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield(ext_call.return_data[0] + _3285 - ((ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000), (ext_call.return_data[0] * sub_b1a41085) + (_3285 * sub_b1a41085) / 10000);
        else:
            mem[132] = this.address
            require ext_code.size(sub_4005760aAddress)
            call sub_4005760aAddress.harvest(uint256 arg1, address arg2) with:
                 gas gas_remaining wei
                args poolId, this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            _28 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            staticcall 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = rewardTokenAddress
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
            mem[(2 * ceil32(return_data.size)) + 228] = 0
            mem[(2 * ceil32(return_data.size)) + 260] = 160
            mem[(2 * ceil32(return_data.size)) + 356] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(2 * ceil32(return_data.size)) + 292] = this.address
            mem[(2 * ceil32(return_data.size)) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[(2 * ceil32(return_data.size)) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1694 = mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _1698 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require _1694 + (32 * _1698) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _1698)] = mem[(2 * ceil32(return_data.size)) + _1694 + 224 len ceil32(32 * _1698)]
            if 1 >= _1698:
                revert with 0, 50
            _3286 = mem[(4 * ceil32(return_data.size)) + 256]
            if ext_call.return_data[0] > !mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            if ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / ext_call.return_data[0] + mem[(4 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64] + 4] = (ext_call.return_data[0] * sub_b1a41085) + (mem[(4 * ceil32(return_data.size)) + 256] * sub_b1a41085) / 10000
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + _3286 < (ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3559 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3559]:
                            revert with 0, 50
                        mem[_3559 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3559]:
                            revert with 0, 50
                        mem[_3559 + 64] = token1Address
                        mem[_3559 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3559 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3559 + 132] = 0
                        mem[_3559 + 164] = 160
                        mem[_3559 + 260] = mem[_3559]
                        idx = 0
                        s = _3559 + 32
                        t = _3559 + 292
                        while idx < mem[_3559]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3559 + 196] = this.address
                        mem[_3559 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3559 + (32 * mem[_3559]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4981 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5029 = mem[_4981]
                        require mem[_4981] <= test266151307()
                        require _4981 + mem[_4981] + 31 < _4981 + return_data.size
                        _5077 = mem[_4981 + mem[_4981]]
                        if mem[_4981 + mem[_4981]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4981 + mem[_4981]]) + 1 < 0 or _4981 + ceil32(return_data.size) + ceil32(32 * mem[_4981 + mem[_4981]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4981 + ceil32(return_data.size) + ceil32(32 * mem[_4981 + mem[_4981]]) + 1
                        mem[_4981 + ceil32(return_data.size)] = _5077
                        require _5029 + (32 * _5077) + 32 <= return_data.size
                        mem[_4981 + ceil32(return_data.size) + 32 len ceil32(32 * _5077)] = mem[_4981 + _5029 + 32 len ceil32(32 * _5077)]
                        if 1 >= _5077:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4981 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3629 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3629]:
                                revert with 0, 50
                            mem[_3629 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3629]:
                                revert with 0, 50
                            mem[_3629 + 64] = token0Address
                            mem[_3629 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3629 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3629 + 132] = 0
                            mem[_3629 + 164] = 160
                            mem[_3629 + 260] = mem[_3629]
                            idx = 0
                            s = _3629 + 32
                            t = _3629 + 292
                            while idx < mem[_3629]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3629 + 196] = this.address
                            mem[_3629 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3629 + (32 * mem[_3629]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4980 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5028 = mem[_4980]
                            require mem[_4980] <= test266151307()
                            require _4980 + mem[_4980] + 31 < _4980 + return_data.size
                            _5076 = mem[_4980 + mem[_4980]]
                            if mem[_4980 + mem[_4980]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4980 + mem[_4980]]) + 1 < 0 or _4980 + ceil32(return_data.size) + ceil32(32 * mem[_4980 + mem[_4980]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4980 + ceil32(return_data.size) + ceil32(32 * mem[_4980 + mem[_4980]]) + 1
                            mem[_4980 + ceil32(return_data.size)] = _5076
                            require _5028 + (32 * _5076) + 32 <= return_data.size
                            mem[_4980 + ceil32(return_data.size) + 32 len ceil32(32 * _5076)] = mem[_4980 + _5028 + 32 len ceil32(32 * _5076)]
                            if 1 >= _5076:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4980 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3627 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3627]:
                                revert with 0, 50
                            mem[_3627 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3627]:
                                revert with 0, 50
                            mem[_3627 + 64] = token0Address
                            mem[_3627 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3627 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3627 + 132] = 0
                            mem[_3627 + 164] = 160
                            mem[_3627 + 260] = mem[_3627]
                            idx = 0
                            s = _3627 + 32
                            t = _3627 + 292
                            while idx < mem[_3627]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3627 + 196] = this.address
                            mem[_3627 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3627 + (32 * mem[_3627]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4979 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5027 = mem[_4979]
                            require mem[_4979] <= test266151307()
                            require _4979 + mem[_4979] + 31 < _4979 + return_data.size
                            _5075 = mem[_4979 + mem[_4979]]
                            if mem[_4979 + mem[_4979]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4979 + mem[_4979]]) + 1 < 0 or _4979 + ceil32(return_data.size) + ceil32(32 * mem[_4979 + mem[_4979]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4979 + ceil32(return_data.size) + ceil32(32 * mem[_4979 + mem[_4979]]) + 1
                            mem[_4979 + ceil32(return_data.size)] = _5075
                            require _5027 + (32 * _5075) + 32 <= return_data.size
                            mem[_4979 + ceil32(return_data.size) + 32 len ceil32(32 * _5075)] = mem[_4979 + _5027 + 32 len ceil32(32 * _5075)]
                            if 1 >= _5075:
                                revert with 0, 50
                            _6051 = mem[_4979 + ceil32(return_data.size) + 64]
                            _6183 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6183]:
                                revert with 0, 50
                            mem[_6183 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6183]:
                                revert with 0, 50
                            mem[_6183 + 64] = token1Address
                            mem[_6183 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6183 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6183 + 132] = 0
                            mem[_6183 + 164] = 160
                            mem[_6183 + 260] = mem[_6183]
                            idx = 0
                            s = _6183 + 32
                            t = _6183 + 292
                            while idx < mem[_6183]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6183 + 196] = this.address
                            mem[_6183 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6183 + (32 * mem[_6183]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6747 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6763 = mem[_6747]
                            require mem[_6747] <= test266151307()
                            require _6747 + mem[_6747] + 31 < _6747 + return_data.size
                            _6779 = mem[_6747 + mem[_6747]]
                            if mem[_6747 + mem[_6747]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6747 + mem[_6747]]) + 1 < 0 or _6747 + ceil32(return_data.size) + ceil32(32 * mem[_6747 + mem[_6747]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6747 + ceil32(return_data.size) + ceil32(32 * mem[_6747 + mem[_6747]]) + 1
                            mem[_6747 + ceil32(return_data.size)] = _6779
                            require _6763 + (32 * _6779) + 32 <= return_data.size
                            mem[_6747 + ceil32(return_data.size) + 32 len ceil32(32 * _6779)] = mem[_6747 + _6763 + 32 len ceil32(32 * _6779)]
                            if 1 >= _6779:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6051, mem[_6747 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3339 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3339] = return_data.size
                    mem[_3339 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3561 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3561]:
                            revert with 0, 50
                        mem[_3561 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3561]:
                            revert with 0, 50
                        mem[_3561 + 64] = token1Address
                        mem[_3561 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3561 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3561 + 132] = 0
                        mem[_3561 + 164] = 160
                        mem[_3561 + 260] = mem[_3561]
                        idx = 0
                        s = _3561 + 32
                        t = _3561 + 292
                        while idx < mem[_3561]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3561 + 196] = this.address
                        mem[_3561 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3561 + (32 * mem[_3561]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4984 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5032 = mem[_4984]
                        require mem[_4984] <= test266151307()
                        require _4984 + mem[_4984] + 31 < _4984 + return_data.size
                        _5080 = mem[_4984 + mem[_4984]]
                        if mem[_4984 + mem[_4984]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4984 + mem[_4984]]) + 1 < 0 or _4984 + ceil32(return_data.size) + ceil32(32 * mem[_4984 + mem[_4984]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4984 + ceil32(return_data.size) + ceil32(32 * mem[_4984 + mem[_4984]]) + 1
                        mem[_4984 + ceil32(return_data.size)] = _5080
                        require _5032 + (32 * _5080) + 32 <= return_data.size
                        mem[_4984 + ceil32(return_data.size) + 32 len ceil32(32 * _5080)] = mem[_4984 + _5032 + 32 len ceil32(32 * _5080)]
                        if 1 >= _5080:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4984 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3634 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3634]:
                                revert with 0, 50
                            mem[_3634 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3634]:
                                revert with 0, 50
                            mem[_3634 + 64] = token0Address
                            mem[_3634 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3634 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3634 + 132] = 0
                            mem[_3634 + 164] = 160
                            mem[_3634 + 260] = mem[_3634]
                            idx = 0
                            s = _3634 + 32
                            t = _3634 + 292
                            while idx < mem[_3634]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3634 + 196] = this.address
                            mem[_3634 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3634 + (32 * mem[_3634]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4983 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5031 = mem[_4983]
                            require mem[_4983] <= test266151307()
                            require _4983 + mem[_4983] + 31 < _4983 + return_data.size
                            _5079 = mem[_4983 + mem[_4983]]
                            if mem[_4983 + mem[_4983]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4983 + mem[_4983]]) + 1 < 0 or _4983 + ceil32(return_data.size) + ceil32(32 * mem[_4983 + mem[_4983]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4983 + ceil32(return_data.size) + ceil32(32 * mem[_4983 + mem[_4983]]) + 1
                            mem[_4983 + ceil32(return_data.size)] = _5079
                            require _5031 + (32 * _5079) + 32 <= return_data.size
                            mem[_4983 + ceil32(return_data.size) + 32 len ceil32(32 * _5079)] = mem[_4983 + _5031 + 32 len ceil32(32 * _5079)]
                            if 1 >= _5079:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4983 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3632 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3632]:
                                revert with 0, 50
                            mem[_3632 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3632]:
                                revert with 0, 50
                            mem[_3632 + 64] = token0Address
                            mem[_3632 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3632 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3632 + 132] = 0
                            mem[_3632 + 164] = 160
                            mem[_3632 + 260] = mem[_3632]
                            idx = 0
                            s = _3632 + 32
                            t = _3632 + 292
                            while idx < mem[_3632]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3632 + 196] = this.address
                            mem[_3632 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3632 + (32 * mem[_3632]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4982 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5030 = mem[_4982]
                            require mem[_4982] <= test266151307()
                            require _4982 + mem[_4982] + 31 < _4982 + return_data.size
                            _5078 = mem[_4982 + mem[_4982]]
                            if mem[_4982 + mem[_4982]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4982 + mem[_4982]]) + 1 < 0 or _4982 + ceil32(return_data.size) + ceil32(32 * mem[_4982 + mem[_4982]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4982 + ceil32(return_data.size) + ceil32(32 * mem[_4982 + mem[_4982]]) + 1
                            mem[_4982 + ceil32(return_data.size)] = _5078
                            require _5030 + (32 * _5078) + 32 <= return_data.size
                            mem[_4982 + ceil32(return_data.size) + 32 len ceil32(32 * _5078)] = mem[_4982 + _5030 + 32 len ceil32(32 * _5078)]
                            if 1 >= _5078:
                                revert with 0, 50
                            _6054 = mem[_4982 + ceil32(return_data.size) + 64]
                            _6185 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6185]:
                                revert with 0, 50
                            mem[_6185 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6185]:
                                revert with 0, 50
                            mem[_6185 + 64] = token1Address
                            mem[_6185 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6185 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6185 + 132] = 0
                            mem[_6185 + 164] = 160
                            mem[_6185 + 260] = mem[_6185]
                            idx = 0
                            s = _6185 + 32
                            t = _6185 + 292
                            while idx < mem[_6185]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6185 + 196] = this.address
                            mem[_6185 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6185 + (32 * mem[_6185]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6748 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6764 = mem[_6748]
                            require mem[_6748] <= test266151307()
                            require _6748 + mem[_6748] + 31 < _6748 + return_data.size
                            _6780 = mem[_6748 + mem[_6748]]
                            if mem[_6748 + mem[_6748]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6748 + mem[_6748]]) + 1 < 0 or _6748 + ceil32(return_data.size) + ceil32(32 * mem[_6748 + mem[_6748]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6748 + ceil32(return_data.size) + ceil32(32 * mem[_6748 + mem[_6748]]) + 1
                            mem[_6748 + ceil32(return_data.size)] = _6780
                            require _6764 + (32 * _6780) + 32 <= return_data.size
                            mem[_6748 + ceil32(return_data.size) + 32 len ceil32(32 * _6780)] = mem[_6748 + _6764 + 32 len ceil32(32 * _6780)]
                            if 1 >= _6780:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6054, mem[_6748 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3310 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3310] = return_data.size
                mem[_3310 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3563 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3563]:
                            revert with 0, 50
                        mem[_3563 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3563]:
                            revert with 0, 50
                        mem[_3563 + 64] = token1Address
                        mem[_3563 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3563 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3563 + 132] = 0
                        mem[_3563 + 164] = 160
                        mem[_3563 + 260] = mem[_3563]
                        idx = 0
                        s = _3563 + 32
                        t = _3563 + 292
                        while idx < mem[_3563]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3563 + 196] = this.address
                        mem[_3563 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3563 + (32 * mem[_3563]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4987 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5035 = mem[_4987]
                        require mem[_4987] <= test266151307()
                        require _4987 + mem[_4987] + 31 < _4987 + return_data.size
                        _5083 = mem[_4987 + mem[_4987]]
                        if mem[_4987 + mem[_4987]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4987 + mem[_4987]]) + 1 < 0 or _4987 + ceil32(return_data.size) + ceil32(32 * mem[_4987 + mem[_4987]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4987 + ceil32(return_data.size) + ceil32(32 * mem[_4987 + mem[_4987]]) + 1
                        mem[_4987 + ceil32(return_data.size)] = _5083
                        require _5035 + (32 * _5083) + 32 <= return_data.size
                        mem[_4987 + ceil32(return_data.size) + 32 len ceil32(32 * _5083)] = mem[_4987 + _5035 + 32 len ceil32(32 * _5083)]
                        if 1 >= _5083:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4987 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3639 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3639]:
                                revert with 0, 50
                            mem[_3639 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3639]:
                                revert with 0, 50
                            mem[_3639 + 64] = token0Address
                            mem[_3639 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3639 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3639 + 132] = 0
                            mem[_3639 + 164] = 160
                            mem[_3639 + 260] = mem[_3639]
                            idx = 0
                            s = _3639 + 32
                            t = _3639 + 292
                            while idx < mem[_3639]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3639 + 196] = this.address
                            mem[_3639 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3639 + (32 * mem[_3639]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4986 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5034 = mem[_4986]
                            require mem[_4986] <= test266151307()
                            require _4986 + mem[_4986] + 31 < _4986 + return_data.size
                            _5082 = mem[_4986 + mem[_4986]]
                            if mem[_4986 + mem[_4986]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4986 + mem[_4986]]) + 1 < 0 or _4986 + ceil32(return_data.size) + ceil32(32 * mem[_4986 + mem[_4986]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4986 + ceil32(return_data.size) + ceil32(32 * mem[_4986 + mem[_4986]]) + 1
                            mem[_4986 + ceil32(return_data.size)] = _5082
                            require _5034 + (32 * _5082) + 32 <= return_data.size
                            mem[_4986 + ceil32(return_data.size) + 32 len ceil32(32 * _5082)] = mem[_4986 + _5034 + 32 len ceil32(32 * _5082)]
                            if 1 >= _5082:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4986 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3637 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3637]:
                                revert with 0, 50
                            mem[_3637 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3637]:
                                revert with 0, 50
                            mem[_3637 + 64] = token0Address
                            mem[_3637 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3637 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3637 + 132] = 0
                            mem[_3637 + 164] = 160
                            mem[_3637 + 260] = mem[_3637]
                            idx = 0
                            s = _3637 + 32
                            t = _3637 + 292
                            while idx < mem[_3637]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3637 + 196] = this.address
                            mem[_3637 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3637 + (32 * mem[_3637]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4985 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5033 = mem[_4985]
                            require mem[_4985] <= test266151307()
                            require _4985 + mem[_4985] + 31 < _4985 + return_data.size
                            _5081 = mem[_4985 + mem[_4985]]
                            if mem[_4985 + mem[_4985]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4985 + mem[_4985]]) + 1 < 0 or _4985 + ceil32(return_data.size) + ceil32(32 * mem[_4985 + mem[_4985]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4985 + ceil32(return_data.size) + ceil32(32 * mem[_4985 + mem[_4985]]) + 1
                            mem[_4985 + ceil32(return_data.size)] = _5081
                            require _5033 + (32 * _5081) + 32 <= return_data.size
                            mem[_4985 + ceil32(return_data.size) + 32 len ceil32(32 * _5081)] = mem[_4985 + _5033 + 32 len ceil32(32 * _5081)]
                            if 1 >= _5081:
                                revert with 0, 50
                            _6057 = mem[_4985 + ceil32(return_data.size) + 64]
                            _6187 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6187]:
                                revert with 0, 50
                            mem[_6187 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6187]:
                                revert with 0, 50
                            mem[_6187 + 64] = token1Address
                            mem[_6187 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6187 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6187 + 132] = 0
                            mem[_6187 + 164] = 160
                            mem[_6187 + 260] = mem[_6187]
                            idx = 0
                            s = _6187 + 32
                            t = _6187 + 292
                            while idx < mem[_6187]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6187 + 196] = this.address
                            mem[_6187 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6187 + (32 * mem[_6187]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6749 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6765 = mem[_6749]
                            require mem[_6749] <= test266151307()
                            require _6749 + mem[_6749] + 31 < _6749 + return_data.size
                            _6781 = mem[_6749 + mem[_6749]]
                            if mem[_6749 + mem[_6749]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6749 + mem[_6749]]) + 1 < 0 or _6749 + ceil32(return_data.size) + ceil32(32 * mem[_6749 + mem[_6749]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6749 + ceil32(return_data.size) + ceil32(32 * mem[_6749 + mem[_6749]]) + 1
                            mem[_6749 + ceil32(return_data.size)] = _6781
                            require _6765 + (32 * _6781) + 32 <= return_data.size
                            mem[_6749 + ceil32(return_data.size) + 32 len ceil32(32 * _6781)] = mem[_6749 + _6765 + 32 len ceil32(32 * _6781)]
                            if 1 >= _6781:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6057, mem[_6749 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3341 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3341] = return_data.size
                    mem[_3341 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _28
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3565 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3565]:
                            revert with 0, 50
                        mem[_3565 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3565]:
                            revert with 0, 50
                        mem[_3565 + 64] = token1Address
                        mem[_3565 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3565 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                        mem[_3565 + 132] = 0
                        mem[_3565 + 164] = 160
                        mem[_3565 + 260] = mem[_3565]
                        idx = 0
                        s = _3565 + 32
                        t = _3565 + 292
                        while idx < mem[_3565]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3565 + 196] = this.address
                        mem[_3565 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3565 + (32 * mem[_3565]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4990 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5038 = mem[_4990]
                        require mem[_4990] <= test266151307()
                        require _4990 + mem[_4990] + 31 < _4990 + return_data.size
                        _5086 = mem[_4990 + mem[_4990]]
                        if mem[_4990 + mem[_4990]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_4990 + mem[_4990]]) + 1 < 0 or _4990 + ceil32(return_data.size) + ceil32(32 * mem[_4990 + mem[_4990]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _4990 + ceil32(return_data.size) + ceil32(32 * mem[_4990 + mem[_4990]]) + 1
                        mem[_4990 + ceil32(return_data.size)] = _5086
                        require _5038 + (32 * _5086) + 32 <= return_data.size
                        mem[_4990 + ceil32(return_data.size) + 32 len ceil32(32 * _5086)] = mem[_4990 + _5038 + 32 len ceil32(32 * _5086)]
                        if 1 >= _5086:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), mem[_4990 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3644 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3644]:
                                revert with 0, 50
                            mem[_3644 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3644]:
                                revert with 0, 50
                            mem[_3644 + 64] = token0Address
                            mem[_3644 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3644 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3644 + 132] = 0
                            mem[_3644 + 164] = 160
                            mem[_3644 + 260] = mem[_3644]
                            idx = 0
                            s = _3644 + 32
                            t = _3644 + 292
                            while idx < mem[_3644]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3644 + 196] = this.address
                            mem[_3644 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3644 + (32 * mem[_3644]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4989 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5037 = mem[_4989]
                            require mem[_4989] <= test266151307()
                            require _4989 + mem[_4989] + 31 < _4989 + return_data.size
                            _5085 = mem[_4989 + mem[_4989]]
                            if mem[_4989 + mem[_4989]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4989 + mem[_4989]]) + 1 < 0 or _4989 + ceil32(return_data.size) + ceil32(32 * mem[_4989 + mem[_4989]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4989 + ceil32(return_data.size) + ceil32(32 * mem[_4989 + mem[_4989]]) + 1
                            mem[_4989 + ceil32(return_data.size)] = _5085
                            require _5037 + (32 * _5085) + 32 <= return_data.size
                            mem[_4989 + ceil32(return_data.size) + 32 len ceil32(32 * _5085)] = mem[_4989 + _5037 + 32 len ceil32(32 * _5085)]
                            if 1 >= _5085:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4989 + ceil32(return_data.size) + 64], Mask(255, 1, ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3642 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3642]:
                                revert with 0, 50
                            mem[_3642 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3642]:
                                revert with 0, 50
                            mem[_3642 + 64] = token0Address
                            mem[_3642 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3642 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_3642 + 132] = 0
                            mem[_3642 + 164] = 160
                            mem[_3642 + 260] = mem[_3642]
                            idx = 0
                            s = _3642 + 32
                            t = _3642 + 292
                            while idx < mem[_3642]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3642 + 196] = this.address
                            mem[_3642 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3642 + (32 * mem[_3642]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4988 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5036 = mem[_4988]
                            require mem[_4988] <= test266151307()
                            require _4988 + mem[_4988] + 31 < _4988 + return_data.size
                            _5084 = mem[_4988 + mem[_4988]]
                            if mem[_4988 + mem[_4988]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_4988 + mem[_4988]]) + 1 < 0 or _4988 + ceil32(return_data.size) + ceil32(32 * mem[_4988 + mem[_4988]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _4988 + ceil32(return_data.size) + ceil32(32 * mem[_4988 + mem[_4988]]) + 1
                            mem[_4988 + ceil32(return_data.size)] = _5084
                            require _5036 + (32 * _5084) + 32 <= return_data.size
                            mem[_4988 + ceil32(return_data.size) + 32 len ceil32(32 * _5084)] = mem[_4988 + _5036 + 32 len ceil32(32 * _5084)]
                            if 1 >= _5084:
                                revert with 0, 50
                            _6060 = mem[_4988 + ceil32(return_data.size) + 64]
                            _6189 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6189]:
                                revert with 0, 50
                            mem[_6189 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6189]:
                                revert with 0, 50
                            mem[_6189 + 64] = token1Address
                            mem[_6189 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6189 + 100] = ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000) / 2
                            mem[_6189 + 132] = 0
                            mem[_6189 + 164] = 160
                            mem[_6189 + 260] = mem[_6189]
                            idx = 0
                            s = _6189 + 32
                            t = _6189 + 292
                            while idx < mem[_6189]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6189 + 196] = this.address
                            mem[_6189 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6189 + (32 * mem[_6189]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6750 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6766 = mem[_6750]
                            require mem[_6750] <= test266151307()
                            require _6750 + mem[_6750] + 31 < _6750 + return_data.size
                            _6782 = mem[_6750 + mem[_6750]]
                            if mem[_6750 + mem[_6750]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_6750 + mem[_6750]]) + 1 < 0 or _6750 + ceil32(return_data.size) + ceil32(32 * mem[_6750 + mem[_6750]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _6750 + ceil32(return_data.size) + ceil32(32 * mem[_6750 + mem[_6750]]) + 1
                            mem[_6750 + ceil32(return_data.size)] = _6782
                            require _6766 + (32 * _6782) + 32 <= return_data.size
                            mem[_6750 + ceil32(return_data.size) + 32 len ceil32(32 * _6782)] = mem[_6750 + _6766 + 32 len ceil32(32 * _6782)]
                            if 1 >= _6782:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6060, mem[_6750 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield(ext_call.return_data[0] + _3286 - ((ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000), (ext_call.return_data[0] * sub_b1a41085) + (_3286 * sub_b1a41085) / 10000);
}

function sub_cd5b5616(?) {
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = token1Address
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = 1
            mem[ceil32(return_data.size) + 228] = 64
            mem[ceil32(return_data.size) + 260] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4171 = mem[ceil32(return_data.size) + 192 len 4], 0
            require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
            _4180 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            require _4171 + (32 * _4180) + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4180)] = mem[ceil32(return_data.size) + _4171 + 224 len ceil32(32 * _4180)]
            if 1 >= _4180:
                revert with 0, 50
            _8236 = mem[(2 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8277 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8297 = mem[_8277]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8236) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8277]:
                    revert with 0, 18
                mem[mem[64] + 36] = this.address
                if not sub_abddf82e:
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8476 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8529 = mem[_8476]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8653 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8653] > !_8529:
                        revert with 0, 17
                    if mem[_8653] + _8529 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297 > -1 / mem[_8653] + _8529:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8653] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297) + (_8529 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297) / 10^18
                else:
                    require ext_code.size(sub_4005760aAddress)
                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8477 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8531 = mem[_8477]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8654 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8654] > !_8531:
                        revert with 0, 17
                    if mem[_8654] + _8531 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297 > -1 / mem[_8654] + _8531:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8654] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297) + (_8531 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236) / _8297) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8323 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8359 = mem[_8323]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8323]:
                        revert with 0, 18
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8619 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8701 = mem[_8619]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8839 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8839] > !_8701:
                            revert with 0, 17
                        if mem[_8839] + _8701 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359 > -1 / mem[_8839] + _8701:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8839] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359) + (_8701 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8620 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8703 = mem[_8620]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8840 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8840] > !_8703:
                            revert with 0, 17
                        if mem[_8840] + _8703 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359 > -1 / mem[_8840] + _8703:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8840] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359) + (_8703 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / 10^stor259) / _8359) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12402 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12453 = mem[_12402]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12402]:
                        revert with 0, 18
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12632 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12682 = mem[_12632]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12799 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12799] > !_12682:
                            revert with 0, 17
                        if mem[_12799] + _12682 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453 > -1 / mem[_12799] + _12682:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12799] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453) + (_12682 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12633 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12684 = mem[_12633]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12800 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12800] > !_12684:
                            revert with 0, 17
                        if mem[_12800] + _12684 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453 > -1 / mem[_12800] + _12684:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12800] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453) + (_12684 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8236 / s * t) / _12453) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 10^stor259
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4170 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4179 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require _4170 + (32 * _4179) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4179)] = mem[ceil32(return_data.size) + _4170 + 224 len ceil32(32 * _4179)]
                if 1 >= _4179:
                    revert with 0, 50
                _8235 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8276 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8296 = mem[_8276]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8235) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8276]:
                        revert with 0, 18
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8474 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8525 = mem[_8474]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8651 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8651] > !_8525:
                            revert with 0, 17
                        if mem[_8651] + _8525 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296 > -1 / mem[_8651] + _8525:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8651] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296) + (_8525 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8475 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8527 = mem[_8475]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8652 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8652] > !_8527:
                            revert with 0, 17
                        if mem[_8652] + _8527 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296 > -1 / mem[_8652] + _8527:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8652] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296) + (_8527 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235) / _8296) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8322 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8356 = mem[_8322]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8322]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8617 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8693 = mem[_8617]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8833 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8833] > !_8693:
                                revert with 0, 17
                            if mem[_8833] + _8693 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356 > -1 / mem[_8833] + _8693:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8833] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356) + (_8693 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8618 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8695 = mem[_8618]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8834 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8834] > !_8695:
                                revert with 0, 17
                            if mem[_8834] + _8695 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356 > -1 / mem[_8834] + _8695:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8834] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356) + (_8695 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / 10^stor259) / _8356) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12401 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12452 = mem[_12401]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12401]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12630 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12678 = mem[_12630]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12797 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12797] > !_12678:
                                revert with 0, 17
                            if mem[_12797] + _12678 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452 > -1 / mem[_12797] + _12678:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12797] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452) + (_12678 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12631 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12680 = mem[_12631]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12798 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12798] > !_12680:
                                revert with 0, 17
                            if mem[_12798] + _12680 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452 > -1 / mem[_12798] + _12680:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12798] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452) + (_12680 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8235 / s * t) / _12452) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = s * t
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                u = ceil32(return_data.size) + 128
                v = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _8242 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _8245 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require _8242 + (32 * _8245) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _8245)] = mem[ceil32(return_data.size) + _8242 + 224 len ceil32(32 * _8245)]
                if 1 >= _8245:
                    revert with 0, 50
                _12268 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12468 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12494 = mem[_12468]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12268) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12468]:
                        revert with 0, 18
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12733 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12793 = mem[_12733]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12905 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12905] > !_12793:
                            revert with 0, 17
                        if mem[_12905] + _12793 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494 > -1 / mem[_12905] + _12793:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12905] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494) + (_12793 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12734 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12795 = mem[_12734]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12906 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12906] > !_12795:
                            revert with 0, 17
                        if mem[_12906] + _12795 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494 > -1 / mem[_12906] + _12795:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12906] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494) + (_12795 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268) / _12494) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12529 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12569 = mem[_12529]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12529]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12879 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12939 = mem[_12879]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13043 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13043] > !_12939:
                                revert with 0, 17
                            if mem[_13043] + _12939 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569 > -1 / mem[_13043] + _12939:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13043] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569) + (_12939 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12880 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12941 = mem[_12880]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13044 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13044] > !_12941:
                                revert with 0, 17
                            if mem[_13044] + _12941 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569 > -1 / mem[_13044] + _12941:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13044] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569) + (_12941 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / 10^stor259) / _12569) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16196 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16243 = mem[_16196]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_16196]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16428 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16449 = mem[_16428]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16566 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16566] > !_16449:
                                revert with 0, 17
                            if mem[_16566] + _16449 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243 > -1 / mem[_16566] + _16449:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16566] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243) + (_16449 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16429 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16451 = mem[_16429]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16567 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16567] > !_16451:
                                revert with 0, 17
                            if mem[_16567] + _16451 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243 > -1 / mem[_16567] + _16451:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16567] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243) + (_16451 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12268 / s * t) / _16243) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4168 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4177 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require _4168 + (32 * _4177) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4177)] = mem[ceil32(return_data.size) + _4168 + 224 len ceil32(32 * _4177)]
                if 1 >= _4177:
                    revert with 0, 50
                _8233 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8275 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8295 = mem[_8275]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8233) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8275]:
                        revert with 0, 18
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8472 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8521 = mem[_8472]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8648 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8648] > !_8521:
                            revert with 0, 17
                        if mem[_8648] + _8521 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295 > -1 / mem[_8648] + _8521:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8648] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295) + (_8521 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8473 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8523 = mem[_8473]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8649 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8649] > !_8523:
                            revert with 0, 17
                        if mem[_8649] + _8523 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295 > -1 / mem[_8649] + _8523:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8649] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295) + (_8523 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233) / _8295) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8321 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8353 = mem[_8321]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8321]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8615 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8685 = mem[_8615]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8827 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8827] > !_8685:
                                revert with 0, 17
                            if mem[_8827] + _8685 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353 > -1 / mem[_8827] + _8685:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8827] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353) + (_8685 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8616 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8687 = mem[_8616]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8828 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8828] > !_8687:
                                revert with 0, 17
                            if mem[_8828] + _8687 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353 > -1 / mem[_8828] + _8687:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8828] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353) + (_8687 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / 10^stor258) / _8353) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12400 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12449 = mem[_12400]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12400]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12628 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12670 = mem[_12628]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12791 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12791] > !_12670:
                                revert with 0, 17
                            if mem[_12791] + _12670 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449 > -1 / mem[_12791] + _12670:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12791] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449) + (_12670 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12629 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12672 = mem[_12629]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12792 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12792] > !_12672:
                                revert with 0, 17
                            if mem[_12792] + _12672 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449 > -1 / mem[_12792] + _12672:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12792] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449) + (_12672 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8233 / s * t) / _12449) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4167 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4176 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4167 + (32 * _4176) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4176)] = mem[ceil32(return_data.size) + _4167 + 224 len ceil32(32 * _4176)]
                    if 1 >= _4176:
                        revert with 0, 50
                    _8232 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8274 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8294 = mem[_8274]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8232) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8274]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8470 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8517 = mem[_8470]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8646 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8646] > !_8517:
                                revert with 0, 17
                            if mem[_8646] + _8517 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294 > -1 / mem[_8646] + _8517:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8646] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294) + (_8517 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8471 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8519 = mem[_8471]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8647 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8647] > !_8519:
                                revert with 0, 17
                            if mem[_8647] + _8519 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294 > -1 / mem[_8647] + _8519:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8647] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294) + (_8519 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232) / _8294) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8320 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8350 = mem[_8320]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8320]:
                                revert with 0, 18
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8613 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8677 = mem[_8613]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8821 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8821] > !_8677:
                                    revert with 0, 17
                                if mem[_8821] + _8677 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350 > -1 / mem[_8821] + _8677:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8821] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350) + (_8677 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8614 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8679 = mem[_8614]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8822 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8822] > !_8679:
                                    revert with 0, 17
                                if mem[_8822] + _8679 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350 > -1 / mem[_8822] + _8679:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8822] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350) + (_8679 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / 10^stor258) / _8350) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12399 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12448 = mem[_12399]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12399]:
                                revert with 0, 18
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12626 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12666 = mem[_12626]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12789 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12789] > !_12666:
                                    revert with 0, 17
                                if mem[_12789] + _12666 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448 > -1 / mem[_12789] + _12666:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12789] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448) + (_12666 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12627 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12668 = mem[_12627]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12790 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12790] > !_12668:
                                    revert with 0, 17
                                if mem[_12790] + _12668 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448 > -1 / mem[_12790] + _12668:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12790] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448) + (_12668 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8232 / s * t) / _12448) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _8241 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _8244 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _8241 + (32 * _8244) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _8244)] = mem[ceil32(return_data.size) + _8241 + 224 len ceil32(32 * _8244)]
                    if 1 >= _8244:
                        revert with 0, 50
                    _12267 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12467 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12493 = mem[_12467]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12267) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12467]:
                            revert with 0, 18
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12723 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12785 = mem[_12723]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12903 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12903] > !_12785:
                                revert with 0, 17
                            if mem[_12903] + _12785 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493 > -1 / mem[_12903] + _12785:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12903] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493) + (_12785 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12724 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12787 = mem[_12724]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12904 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12904] > !_12787:
                                revert with 0, 17
                            if mem[_12904] + _12787 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493 > -1 / mem[_12904] + _12787:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12904] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493) + (_12787 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267) / _12493) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12528 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12566 = mem[_12528]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12528]:
                                revert with 0, 18
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12877 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12931 = mem[_12877]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13037 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_13037] > !_12931:
                                    revert with 0, 17
                                if mem[_13037] + _12931 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566 > -1 / mem[_13037] + _12931:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_13037] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566) + (_12931 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12878 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12933 = mem[_12878]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13038 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_13038] > !_12933:
                                    revert with 0, 17
                                if mem[_13038] + _12933 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566 > -1 / mem[_13038] + _12933:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_13038] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566) + (_12933 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / 10^stor258) / _12566) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16195 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16242 = mem[_16195]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_16195]:
                                revert with 0, 18
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16426 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16445 = mem[_16426]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16564 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16564] > !_16445:
                                    revert with 0, 17
                                if mem[_16564] + _16445 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242 > -1 / mem[_16564] + _16445:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16564] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242) + (_16445 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16427 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16447 = mem[_16427]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16565 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16565] > !_16447:
                                    revert with 0, 17
                                if mem[_16565] + _16447 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242 > -1 / mem[_16565] + _16447:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16565] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242) + (_16447 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12267 / s * t) / _16242) / 10^18
        else:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4165 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4174 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require _4165 + (32 * _4174) + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4174)] = mem[ceil32(return_data.size) + _4165 + 224 len ceil32(32 * _4174)]
                if 1 >= _4174:
                    revert with 0, 50
                _8230 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8292 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8292]:
                                revert with 0, 50
                            mem[_8292 + 32] = token1Address
                            if 1 >= mem[_8292]:
                                revert with 0, 50
                            mem[_8292 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8292 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8292 + 100] = 1
                            mem[_8292 + 132] = 64
                            mem[_8292 + 164] = mem[_8292]
                            idx = 0
                            s = _8292 + 32
                            t = _8292 + 196
                            while idx < mem[_8292]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8292 + (32 * mem[_8292]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12287 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12311 = mem[_12287]
                            require mem[_12287] <= test266151307()
                            require _12287 + mem[_12287] + 31 < _12287 + return_data.size
                            _12327 = mem[_12287 + mem[_12287]]
                            if mem[_12287 + mem[_12287]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12287 + mem[_12287]]) + 1 < 0 or _12287 + ceil32(return_data.size) + ceil32(32 * mem[_12287 + mem[_12287]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12287 + ceil32(return_data.size) + ceil32(32 * mem[_12287 + mem[_12287]]) + 1
                            mem[_12287 + ceil32(return_data.size)] = _12327
                            require _12311 + (32 * _12327) + 32 <= return_data.size
                            mem[_12287 + ceil32(return_data.size) + 32 len ceil32(32 * _12327)] = mem[_12287 + _12311 + 32 len ceil32(32 * _12327)]
                            if 1 >= _12327:
                                revert with 0, 50
                            _16011 = mem[_12287 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12287 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12287 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16287 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16309 = mem[_16287]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16011) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_16287]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16545 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16598 = mem[_16545]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16764 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16764] > !_16598:
                                        revert with 0, 17
                                    if mem[_16764] + _16598 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309 > -1 / mem[_16764] + _16598:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16764] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309) + (_16598 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16546 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16600 = mem[_16546]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16765 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16765] > !_16600:
                                        revert with 0, 17
                                    if mem[_16765] + _16600 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309 > -1 / mem[_16765] + _16600:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16765] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309) + (_16600 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011) / _16309) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12287 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12287 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16350 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16397 = mem[_16350]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16350]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16731 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16833 = mem[_16731]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _17019 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_17019] > !_16833:
                                            revert with 0, 17
                                        if mem[_17019] + _16833 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397 > -1 / mem[_17019] + _16833:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_17019] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397) + (_16833 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16732 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16835 = mem[_16732]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _17020 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_17020] > !_16835:
                                            revert with 0, 17
                                        if mem[_17020] + _16835 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397 > -1 / mem[_17020] + _16835:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_17020] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397) + (_16835 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / 10^stor259) / _16397) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12287 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12287 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19461 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19490 = mem[_19461]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19461]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19696 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19739 = mem[_19696]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19892 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19892] > !_19739:
                                            revert with 0, 17
                                        if mem[_19892] + _19739 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490 > -1 / mem[_19892] + _19739:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19892] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490) + (_19739 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19697 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19741 = mem[_19697]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19893 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19893] > !_19741:
                                            revert with 0, 17
                                        if mem[_19893] + _19741 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490 > -1 / mem[_19893] + _19741:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19893] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490) + (_19741 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16011 / s * t) / _19490) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8344 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8344]:
                                    revert with 0, 50
                                mem[_8344 + 32] = token1Address
                                if 1 >= mem[_8344]:
                                    revert with 0, 50
                                mem[_8344 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8344 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8344 + 100] = 10^stor259
                                mem[_8344 + 132] = 64
                                mem[_8344 + 164] = mem[_8344]
                                idx = 0
                                s = _8344 + 32
                                t = _8344 + 196
                                while idx < mem[_8344]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8344 + (32 * mem[_8344]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12286 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12310 = mem[_12286]
                                require mem[_12286] <= test266151307()
                                require _12286 + mem[_12286] + 31 < _12286 + return_data.size
                                _12326 = mem[_12286 + mem[_12286]]
                                if mem[_12286 + mem[_12286]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12286 + mem[_12286]]) + 1 < 0 or _12286 + ceil32(return_data.size) + ceil32(32 * mem[_12286 + mem[_12286]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12286 + ceil32(return_data.size) + ceil32(32 * mem[_12286 + mem[_12286]]) + 1
                                mem[_12286 + ceil32(return_data.size)] = _12326
                                require _12310 + (32 * _12326) + 32 <= return_data.size
                                mem[_12286 + ceil32(return_data.size) + 32 len ceil32(32 * _12326)] = mem[_12286 + _12310 + 32 len ceil32(32 * _12326)]
                                var100002 = _12286 + ceil32(return_data.size) + ceil32(32 * _12326) + 32
                                if 1 >= _12326:
                                    revert with 0, 50
                                _16010 = mem[_12286 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12286 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12286 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16286 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16308 = mem[_16286]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16010) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16286]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16543 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16594 = mem[_16543]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16762 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16762] > !_16594:
                                            revert with 0, 17
                                        if mem[_16762] + _16594 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308 > -1 / mem[_16762] + _16594:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16762] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308) + (_16594 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16544 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16596 = mem[_16544]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16763 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16763] > !_16596:
                                            revert with 0, 17
                                        if mem[_16763] + _16596 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308 > -1 / mem[_16763] + _16596:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16763] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308) + (_16596 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010) / _16308) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12286 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12286 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16394 = mem[_16349]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16349]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16729 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16825 = mem[_16729]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17013 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17013] > !_16825:
                                                revert with 0, 17
                                            if mem[_17013] + _16825 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394 > -1 / mem[_17013] + _16825:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17013] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394) + (_16825 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16730 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16827 = mem[_16730]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17014 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17014] > !_16827:
                                                revert with 0, 17
                                            if mem[_17014] + _16827 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394 > -1 / mem[_17014] + _16827:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17014] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394) + (_16827 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / 10^stor259) / _16394) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12286 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12286 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19460 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19489 = mem[_19460]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19460]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19694 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19735 = mem[_19694]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19890 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19890] > !_19735:
                                                revert with 0, 17
                                            if mem[_19890] + _19735 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489 > -1 / mem[_19890] + _19735:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19890] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489) + (_19735 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19695 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19737 = mem[_19695]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19891 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19891] > !_19737:
                                                revert with 0, 17
                                            if mem[_19891] + _19737 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489 > -1 / mem[_19891] + _19737:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19891] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489) + (_19737 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16010 / s * t) / _19489) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _12295 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12295]:
                                    revert with 0, 50
                                mem[_12295 + 32] = token1Address
                                if 1 >= mem[_12295]:
                                    revert with 0, 50
                                mem[_12295 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12295 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12295 + 100] = s * t
                                mem[_12295 + 132] = 64
                                mem[_12295 + 164] = mem[_12295]
                                idx = 0
                                s = _12295 + 32
                                t = _12295 + 196
                                while idx < mem[_12295]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12295 + (32 * mem[_12295]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16049 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16081 = mem[_16049]
                                require mem[_16049] <= test266151307()
                                require _16049 + mem[_16049] + 31 < _16049 + return_data.size
                                _16105 = mem[_16049 + mem[_16049]]
                                if mem[_16049 + mem[_16049]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16049 + mem[_16049]]) + 1 < 0 or _16049 + ceil32(return_data.size) + ceil32(32 * mem[_16049 + mem[_16049]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16049 + ceil32(return_data.size) + ceil32(32 * mem[_16049 + mem[_16049]]) + 1
                                mem[_16049 + ceil32(return_data.size)] = _16105
                                require _16081 + (32 * _16105) + 32 <= return_data.size
                                mem[_16049 + ceil32(return_data.size) + 32 len ceil32(32 * _16105)] = mem[_16049 + _16081 + 32 len ceil32(32 * _16105)]
                                var105002 = _16049 + ceil32(return_data.size) + ceil32(32 * _16105) + 32
                                if 1 >= _16105:
                                    revert with 0, 50
                                _19325 = mem[_16049 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16049 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16049 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19533 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19547 = mem[_19533]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _19325) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19533]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19867 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19939 = mem[_19867]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20142 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20142] > !_19939:
                                            revert with 0, 17
                                        if mem[_20142] + _19939 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547 > -1 / mem[_20142] + _19939:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20142] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547) + (_19939 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19868 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19941 = mem[_19868]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20143 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20143] > !_19941:
                                            revert with 0, 17
                                        if mem[_20143] + _19941 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547 > -1 / mem[_20143] + _19941:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20143] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547) + (_19941 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325) / _19547) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16049 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16049 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19592 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19659 = mem[_19592]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19592]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20108 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20238 = mem[_20108]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20462 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20462] > !_20238:
                                                revert with 0, 17
                                            if mem[_20462] + _20238 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659 > -1 / mem[_20462] + _20238:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20462] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659) + (_20238 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20109 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20240 = mem[_20109]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20463 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20463] > !_20240:
                                                revert with 0, 17
                                            if mem[_20463] + _20240 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659 > -1 / mem[_20463] + _20240:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20463] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659) + (_20240 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / 10^stor259) / _19659) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16049 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16049 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22003 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22021 = mem[_22003]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22003]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22205 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22261 = mem[_22205]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22411 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22411] > !_22261:
                                                revert with 0, 17
                                            if mem[_22411] + _22261 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021 > -1 / mem[_22411] + _22261:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22411] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021) + (_22261 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22206 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22263 = mem[_22206]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22412 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22412] > !_22263:
                                                revert with 0, 17
                                            if mem[_22412] + _22263 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021 > -1 / mem[_22412] + _22263:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22412] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021) + (_22263 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19325 / s * t) / _22021) / 10^18
                    else:
                        _8255 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_8255]:
                            revert with 0, 50
                        mem[_8255 + 32] = token1Address
                        if 1 >= mem[_8255]:
                            revert with 0, 50
                        mem[_8255 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_8255 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_8255 + 100] = 10^18
                        mem[_8255 + 132] = 64
                        mem[_8255 + 164] = mem[_8255]
                        idx = 0
                        s = _8255 + 32
                        t = _8255 + 196
                        while idx < mem[_8255]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _8255 + (32 * mem[_8255]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12288 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12312 = mem[_12288]
                        require mem[_12288] <= test266151307()
                        require _12288 + mem[_12288] + 31 < _12288 + return_data.size
                        _12328 = mem[_12288 + mem[_12288]]
                        if mem[_12288 + mem[_12288]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_12288 + mem[_12288]]) + 1 < 0 or _12288 + ceil32(return_data.size) + ceil32(32 * mem[_12288 + mem[_12288]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _12288 + ceil32(return_data.size) + ceil32(32 * mem[_12288 + mem[_12288]]) + 1
                        mem[_12288 + ceil32(return_data.size)] = _12328
                        require _12312 + (32 * _12328) + 32 <= return_data.size
                        mem[_12288 + ceil32(return_data.size) + 32 len ceil32(32 * _12328)] = mem[_12288 + _12312 + 32 len ceil32(32 * _12328)]
                        var89002 = _12288 + ceil32(return_data.size) + ceil32(32 * _12328) + 32
                        var89005 = _12288 + _12312 + ceil32(32 * _12328) + 32
                        if 1 >= _12328:
                            revert with 0, 50
                        _16012 = mem[_12288 + ceil32(return_data.size) + 64]
                        _16021 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_16021]:
                            revert with 0, 50
                        mem[_16021 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_16021]:
                            revert with 0, 50
                        mem[_16021 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_16021 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_16021 + 100] = _16012
                        mem[_16021 + 132] = 64
                        mem[_16021 + 164] = mem[_16021]
                        idx = 0
                        s = _16021 + 32
                        t = _16021 + 196
                        while idx < mem[_16021]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _16021 + (32 * mem[_16021]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _19351 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _19369 = mem[_19351]
                        require mem[_19351] <= test266151307()
                        require _19351 + mem[_19351] + 31 < _19351 + return_data.size
                        _19385 = mem[_19351 + mem[_19351]]
                        if mem[_19351 + mem[_19351]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_19351 + mem[_19351]]) + 1 < 0 or _19351 + ceil32(return_data.size) + ceil32(32 * mem[_19351 + mem[_19351]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _19351 + ceil32(return_data.size) + ceil32(32 * mem[_19351 + mem[_19351]]) + 1
                        mem[_19351 + ceil32(return_data.size)] = _19385
                        require _19369 + (32 * _19385) + 32 <= return_data.size
                        mem[_19351 + ceil32(return_data.size) + 32 len ceil32(32 * _19385)] = mem[_19351 + _19369 + 32 len ceil32(32 * _19385)]
                        if 1 >= _19385:
                            revert with 0, 50
                        _21928 = mem[_19351 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19351 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19351 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _22052 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _22062 = mem[_22052]
                            if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _21928) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_22052]:
                                revert with 0, 18
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22382 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _22449 = mem[_22382]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22615 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_22615] > !_22449:
                                    revert with 0, 17
                                if mem[_22615] + _22449 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062 > -1 / mem[_22615] + _22449:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_22615] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062) + (_22449 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22383 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _22451 = mem[_22383]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22616 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_22616] > !_22451:
                                    revert with 0, 17
                                if mem[_22616] + _22451 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062 > -1 / mem[_22616] + _22451:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_22616] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062) + (_22451 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928) / _22062) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19351 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19351 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22094 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22173 = mem[_22094]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22094]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22590 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22693 = mem[_22590]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22858 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22858] > !_22693:
                                        revert with 0, 17
                                    if mem[_22858] + _22693 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173 > -1 / mem[_22858] + _22693:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22858] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173) + (_22693 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22591 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22695 = mem[_22591]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22859 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22859] > !_22695:
                                        revert with 0, 17
                                    if mem[_22859] + _22695 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173 > -1 / mem[_22859] + _22695:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22859] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173) + (_22695 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / 10^stor259) / _22173) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19351 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _8230 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19351 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23590 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23601 = mem[_23590]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8230) + (Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23590]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23715 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23758 = mem[_23715]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23853 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23853] > !_23758:
                                        revert with 0, 17
                                    if mem[_23853] + _23758 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601 > -1 / mem[_23853] + _23758:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23853] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601) + (_23758 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23716 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23760 = mem[_23716]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23854 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23854] > !_23760:
                                        revert with 0, 17
                                    if mem[_23854] + _23760 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601 > -1 / mem[_23854] + _23760:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23854] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601) + (_23760 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21928 / s * t) / _23601) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8342 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8342]:
                                    revert with 0, 50
                                mem[_8342 + 32] = token1Address
                                if 1 >= mem[_8342]:
                                    revert with 0, 50
                                mem[_8342 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8342 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8342 + 100] = 1
                                mem[_8342 + 132] = 64
                                mem[_8342 + 164] = mem[_8342]
                                idx = 0
                                s = _8342 + 32
                                t = _8342 + 196
                                while idx < mem[_8342]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8342 + (32 * mem[_8342]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12282 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12307 = mem[_12282]
                                require mem[_12282] <= test266151307()
                                require _12282 + mem[_12282] + 31 < _12282 + return_data.size
                                _12323 = mem[_12282 + mem[_12282]]
                                if mem[_12282 + mem[_12282]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12282 + mem[_12282]]) + 1 < 0 or _12282 + ceil32(return_data.size) + ceil32(32 * mem[_12282 + mem[_12282]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12282 + ceil32(return_data.size) + ceil32(32 * mem[_12282 + mem[_12282]]) + 1
                                mem[_12282 + ceil32(return_data.size)] = _12323
                                require _12307 + (32 * _12323) + 32 <= return_data.size
                                mem[_12282 + ceil32(return_data.size) + 32 len ceil32(32 * _12323)] = mem[_12282 + _12307 + 32 len ceil32(32 * _12323)]
                                var100002 = _12282 + ceil32(return_data.size) + ceil32(32 * _12323) + 32
                                if 1 >= _12323:
                                    revert with 0, 50
                                _16005 = mem[_12282 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12282 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12282 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16285 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16307 = mem[_16285]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16005) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16285]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16541 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16590 = mem[_16541]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16759 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16759] > !_16590:
                                            revert with 0, 17
                                        if mem[_16759] + _16590 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307 > -1 / mem[_16759] + _16590:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16759] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307) + (_16590 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16542 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16592 = mem[_16542]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16760 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16760] > !_16592:
                                            revert with 0, 17
                                        if mem[_16760] + _16592 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307 > -1 / mem[_16760] + _16592:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16760] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307) + (_16592 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005) / _16307) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12282 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12282 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16347 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16391 = mem[_16347]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16347]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16727 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16817 = mem[_16727]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17006 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17006] > !_16817:
                                                revert with 0, 17
                                            if mem[_17006] + _16817 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391 > -1 / mem[_17006] + _16817:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17006] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391) + (_16817 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16728 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16819 = mem[_16728]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17007 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17007] > !_16819:
                                                revert with 0, 17
                                            if mem[_17007] + _16819 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391 > -1 / mem[_17007] + _16819:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17007] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391) + (_16819 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / 10^stor259) / _16391) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12282 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12282 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19458 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19488 = mem[_19458]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19458]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19691 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19730 = mem[_19691]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19887 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19887] > !_19730:
                                                revert with 0, 17
                                            if mem[_19887] + _19730 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488 > -1 / mem[_19887] + _19730:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19887] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488) + (_19730 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19692 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19732 = mem[_19692]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19888 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19888] > !_19732:
                                                revert with 0, 17
                                            if mem[_19888] + _19732 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488 > -1 / mem[_19888] + _19732:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19888] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488) + (_19732 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16005 / s * t) / _19488) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8425 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8425]:
                                        revert with 0, 50
                                    mem[_8425 + 32] = token1Address
                                    if 1 >= mem[_8425]:
                                        revert with 0, 50
                                    mem[_8425 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8425 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8425 + 100] = 10^stor259
                                    mem[_8425 + 132] = 64
                                    mem[_8425 + 164] = mem[_8425]
                                    idx = 0
                                    s = _8425 + 32
                                    t = _8425 + 196
                                    while idx < mem[_8425]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8425 + (32 * mem[_8425]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12281 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12306 = mem[_12281]
                                    require mem[_12281] <= test266151307()
                                    require _12281 + mem[_12281] + 31 < _12281 + return_data.size
                                    _12322 = mem[_12281 + mem[_12281]]
                                    if mem[_12281 + mem[_12281]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12281 + mem[_12281]]) + 1 < 0 or _12281 + ceil32(return_data.size) + ceil32(32 * mem[_12281 + mem[_12281]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12281 + ceil32(return_data.size) + ceil32(32 * mem[_12281 + mem[_12281]]) + 1
                                    mem[_12281 + ceil32(return_data.size)] = _12322
                                    require _12306 + (32 * _12322) + 32 <= return_data.size
                                    mem[_12281 + ceil32(return_data.size) + 32 len ceil32(32 * _12322)] = mem[_12281 + _12306 + 32 len ceil32(32 * _12322)]
                                    var105002 = _12281 + ceil32(return_data.size) + ceil32(32 * _12322) + 32
                                    if 1 >= _12322:
                                        revert with 0, 50
                                    _16004 = mem[_12281 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12281 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12281 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16284 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16306 = mem[_16284]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16004) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16284]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16539 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16586 = mem[_16539]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16757 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16757] > !_16586:
                                                revert with 0, 17
                                            if mem[_16757] + _16586 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306 > -1 / mem[_16757] + _16586:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16757] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306) + (_16586 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16540 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16588 = mem[_16540]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16758 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16758] > !_16588:
                                                revert with 0, 17
                                            if mem[_16758] + _16588 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306 > -1 / mem[_16758] + _16588:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16758] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306) + (_16588 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004) / _16306) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12281 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12281 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16346 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16388 = mem[_16346]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16346]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16725 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16809 = mem[_16725]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17000 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17000] > !_16809:
                                                    revert with 0, 17
                                                if mem[_17000] + _16809 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388 > -1 / mem[_17000] + _16809:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17000] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388) + (_16809 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16726 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16811 = mem[_16726]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17001 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17001] > !_16811:
                                                    revert with 0, 17
                                                if mem[_17001] + _16811 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388 > -1 / mem[_17001] + _16811:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17001] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388) + (_16811 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / 10^stor259) / _16388) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12281 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12281 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19457 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19487 = mem[_19457]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19457]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19689 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19726 = mem[_19689]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19885 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19885] > !_19726:
                                                    revert with 0, 17
                                                if mem[_19885] + _19726 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487 > -1 / mem[_19885] + _19726:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19885] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487) + (_19726 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19690 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19728 = mem[_19690]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19886 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19886] > !_19728:
                                                    revert with 0, 17
                                                if mem[_19886] + _19728 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487 > -1 / mem[_19886] + _19728:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19886] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487) + (_19728 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16004 / s * t) / _19487) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _12293 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12293]:
                                        revert with 0, 50
                                    mem[_12293 + 32] = token1Address
                                    if 1 >= mem[_12293]:
                                        revert with 0, 50
                                    mem[_12293 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12293 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12293 + 100] = s * t
                                    mem[_12293 + 132] = 64
                                    mem[_12293 + 164] = mem[_12293]
                                    idx = 0
                                    s = _12293 + 32
                                    t = _12293 + 196
                                    while idx < mem[_12293]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12293 + (32 * mem[_12293]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16047 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16079 = mem[_16047]
                                    require mem[_16047] <= test266151307()
                                    require _16047 + mem[_16047] + 31 < _16047 + return_data.size
                                    _16103 = mem[_16047 + mem[_16047]]
                                    if mem[_16047 + mem[_16047]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16047 + mem[_16047]]) + 1 < 0 or _16047 + ceil32(return_data.size) + ceil32(32 * mem[_16047 + mem[_16047]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16047 + ceil32(return_data.size) + ceil32(32 * mem[_16047 + mem[_16047]]) + 1
                                    mem[_16047 + ceil32(return_data.size)] = _16103
                                    require _16079 + (32 * _16103) + 32 <= return_data.size
                                    mem[_16047 + ceil32(return_data.size) + 32 len ceil32(32 * _16103)] = mem[_16047 + _16079 + 32 len ceil32(32 * _16103)]
                                    var110002 = _16047 + ceil32(return_data.size) + ceil32(32 * _16103) + 32
                                    if 1 >= _16103:
                                        revert with 0, 50
                                    _19323 = mem[_16047 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16047 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16047 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19532 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19546 = mem[_19532]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19323) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19532]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19865 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19935 = mem[_19865]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20139 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20139] > !_19935:
                                                revert with 0, 17
                                            if mem[_20139] + _19935 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546 > -1 / mem[_20139] + _19935:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20139] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546) + (_19935 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19866 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19937 = mem[_19866]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20140 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20140] > !_19937:
                                                revert with 0, 17
                                            if mem[_20140] + _19937 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546 > -1 / mem[_20140] + _19937:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20140] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546) + (_19937 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323) / _19546) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16047 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16047 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19591 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19648 = mem[_19591]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19591]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20106 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20230 = mem[_20106]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20456 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20456] > !_20230:
                                                    revert with 0, 17
                                                if mem[_20456] + _20230 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648 > -1 / mem[_20456] + _20230:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20456] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648) + (_20230 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20107 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20232 = mem[_20107]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20457 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20457] > !_20232:
                                                    revert with 0, 17
                                                if mem[_20457] + _20232 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648 > -1 / mem[_20457] + _20232:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20457] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648) + (_20232 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / 10^stor259) / _19648) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16047 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16047 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22002 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22020 = mem[_22002]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22002]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22202 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22256 = mem[_22202]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22409 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22409] > !_22256:
                                                    revert with 0, 17
                                                if mem[_22409] + _22256 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020 > -1 / mem[_22409] + _22256:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22409] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020) + (_22256 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22203 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22258 = mem[_22203]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22410 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22410] > !_22258:
                                                    revert with 0, 17
                                                if mem[_22410] + _22258 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020 > -1 / mem[_22410] + _22258:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22410] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020) + (_22258 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19323 / s * t) / _22020) / 10^18
                        else:
                            _8283 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8283]:
                                revert with 0, 50
                            mem[_8283 + 32] = token1Address
                            if 1 >= mem[_8283]:
                                revert with 0, 50
                            mem[_8283 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8283 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8283 + 100] = 10^18
                            mem[_8283 + 132] = 64
                            mem[_8283 + 164] = mem[_8283]
                            idx = 0
                            s = _8283 + 32
                            t = _8283 + 196
                            while idx < mem[_8283]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8283 + (32 * mem[_8283]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12283 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12308 = mem[_12283]
                            require mem[_12283] <= test266151307()
                            require _12283 + mem[_12283] + 31 < _12283 + return_data.size
                            _12324 = mem[_12283 + mem[_12283]]
                            if mem[_12283 + mem[_12283]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12283 + mem[_12283]]) + 1 < 0 or _12283 + ceil32(return_data.size) + ceil32(32 * mem[_12283 + mem[_12283]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12283 + ceil32(return_data.size) + ceil32(32 * mem[_12283 + mem[_12283]]) + 1
                            mem[_12283 + ceil32(return_data.size)] = _12324
                            require _12308 + (32 * _12324) + 32 <= return_data.size
                            mem[_12283 + ceil32(return_data.size) + 32 len ceil32(32 * _12324)] = mem[_12283 + _12308 + 32 len ceil32(32 * _12324)]
                            var94002 = _12283 + ceil32(return_data.size) + ceil32(32 * _12324) + 32
                            if 1 >= _12324:
                                revert with 0, 50
                            _16006 = mem[_12283 + ceil32(return_data.size) + 64]
                            _16019 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_16019]:
                                revert with 0, 50
                            mem[_16019 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_16019]:
                                revert with 0, 50
                            mem[_16019 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_16019 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_16019 + 100] = _16006
                            mem[_16019 + 132] = 64
                            mem[_16019 + 164] = mem[_16019]
                            idx = 0
                            s = _16019 + 32
                            t = _16019 + 196
                            while idx < mem[_16019]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _16019 + (32 * mem[_16019]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _19350 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _19368 = mem[_19350]
                            require mem[_19350] <= test266151307()
                            require _19350 + mem[_19350] + 31 < _19350 + return_data.size
                            _19384 = mem[_19350 + mem[_19350]]
                            if mem[_19350 + mem[_19350]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_19350 + mem[_19350]]) + 1 < 0 or _19350 + ceil32(return_data.size) + ceil32(32 * mem[_19350 + mem[_19350]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _19350 + ceil32(return_data.size) + ceil32(32 * mem[_19350 + mem[_19350]]) + 1
                            mem[_19350 + ceil32(return_data.size)] = _19384
                            require _19368 + (32 * _19384) + 32 <= return_data.size
                            mem[_19350 + ceil32(return_data.size) + 32 len ceil32(32 * _19384)] = mem[_19350 + _19368 + 32 len ceil32(32 * _19384)]
                            if 1 >= _19384:
                                revert with 0, 50
                            _21927 = mem[_19350 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19350 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19350 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22051 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22061 = mem[_22051]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21927) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22051]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22380 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22445 = mem[_22380]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22613 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22613] > !_22445:
                                        revert with 0, 17
                                    if mem[_22613] + _22445 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061 > -1 / mem[_22613] + _22445:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22613] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061) + (_22445 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22381 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22447 = mem[_22381]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22614 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22614] > !_22447:
                                        revert with 0, 17
                                    if mem[_22614] + _22447 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061 > -1 / mem[_22614] + _22447:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22614] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061) + (_22447 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927) / _22061) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19350 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19350 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22093 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22166 = mem[_22093]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22093]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22588 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22685 = mem[_22588]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22852 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22852] > !_22685:
                                            revert with 0, 17
                                        if mem[_22852] + _22685 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166 > -1 / mem[_22852] + _22685:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22852] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166) + (_22685 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22589 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22687 = mem[_22589]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22853 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22853] > !_22687:
                                            revert with 0, 17
                                        if mem[_22853] + _22687 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166 > -1 / mem[_22853] + _22687:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22853] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166) + (_22687 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / 10^stor259) / _22166) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19350 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19350 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23589 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23600 = mem[_23589]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23589]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23713 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23754 = mem[_23713]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23851 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23851] > !_23754:
                                            revert with 0, 17
                                        if mem[_23851] + _23754 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600 > -1 / mem[_23851] + _23754:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23851] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600) + (_23754 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23714 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23756 = mem[_23714]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23852 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23852] > !_23756:
                                            revert with 0, 17
                                        if mem[_23852] + _23756 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600 > -1 / mem[_23852] + _23756:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23852] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600) + (_23756 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21927 / s * t) / _23600) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12438 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12438]:
                                    revert with 0, 50
                                mem[_12438 + 32] = token1Address
                                if 1 >= mem[_12438]:
                                    revert with 0, 50
                                mem[_12438 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12438 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12438 + 100] = 1
                                mem[_12438 + 132] = 64
                                mem[_12438 + 164] = mem[_12438]
                                idx = 0
                                u = _12438 + 32
                                v = _12438 + 196
                                while idx < mem[_12438]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12438 + (32 * mem[_12438]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16045 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16077 = mem[_16045]
                                require mem[_16045] <= test266151307()
                                require _16045 + mem[_16045] + 31 < _16045 + return_data.size
                                _16101 = mem[_16045 + mem[_16045]]
                                if mem[_16045 + mem[_16045]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16045 + mem[_16045]]) + 1 < 0 or _16045 + ceil32(return_data.size) + ceil32(32 * mem[_16045 + mem[_16045]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16045 + ceil32(return_data.size) + ceil32(32 * mem[_16045 + mem[_16045]]) + 1
                                mem[_16045 + ceil32(return_data.size)] = _16101
                                require _16077 + (32 * _16101) + 32 <= return_data.size
                                mem[_16045 + ceil32(return_data.size) + 32 len ceil32(32 * _16101)] = mem[_16045 + _16077 + 32 len ceil32(32 * _16101)]
                                var105002 = _16045 + ceil32(return_data.size) + ceil32(32 * _16101) + 32
                                if 1 >= _16101:
                                    revert with 0, 50
                                _19319 = mem[_16045 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16045 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16045 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19531 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19545 = mem[_19531]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19319) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19531]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19863 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19931 = mem[_19863]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20137 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20137] > !_19931:
                                            revert with 0, 17
                                        if mem[_20137] + _19931 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545 > -1 / mem[_20137] + _19931:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20137] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545) + (_19931 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19864 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19933 = mem[_19864]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20138 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20138] > !_19933:
                                            revert with 0, 17
                                        if mem[_20138] + _19933 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545 > -1 / mem[_20138] + _19933:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20138] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545) + (_19933 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319) / _19545) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16045 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16045 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19589 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19645 = mem[_19589]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19589]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20104 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20222 = mem[_20104]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20449 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20449] > !_20222:
                                                revert with 0, 17
                                            if mem[_20449] + _20222 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645 > -1 / mem[_20449] + _20222:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20449] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645) + (_20222 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20105 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20224 = mem[_20105]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20450 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20450] > !_20224:
                                                revert with 0, 17
                                            if mem[_20450] + _20224 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645 > -1 / mem[_20450] + _20224:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20450] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645) + (_20224 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / 10^stor259) / _19645) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16045 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16045 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22000 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22019 = mem[_22000]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22000]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22200 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22252 = mem[_22200]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22406 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22406] > !_22252:
                                                revert with 0, 17
                                            if mem[_22406] + _22252 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019 > -1 / mem[_22406] + _22252:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22406] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019) + (_22252 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22201 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22254 = mem[_22201]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22407 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22407] > !_22254:
                                                revert with 0, 17
                                            if mem[_22407] + _22254 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019 > -1 / mem[_22407] + _22254:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22407] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019) + (_22254 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19319 / u * v) / _22019) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12503 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12503]:
                                        revert with 0, 50
                                    mem[_12503 + 32] = token1Address
                                    if 1 >= mem[_12503]:
                                        revert with 0, 50
                                    mem[_12503 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12503 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12503 + 100] = 10^stor259
                                    mem[_12503 + 132] = 64
                                    mem[_12503 + 164] = mem[_12503]
                                    idx = 0
                                    u = _12503 + 32
                                    v = _12503 + 196
                                    while idx < mem[_12503]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12503 + (32 * mem[_12503]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16044 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16076 = mem[_16044]
                                    require mem[_16044] <= test266151307()
                                    require _16044 + mem[_16044] + 31 < _16044 + return_data.size
                                    _16100 = mem[_16044 + mem[_16044]]
                                    if mem[_16044 + mem[_16044]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16044 + mem[_16044]]) + 1 < 0 or _16044 + ceil32(return_data.size) + ceil32(32 * mem[_16044 + mem[_16044]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16044 + ceil32(return_data.size) + ceil32(32 * mem[_16044 + mem[_16044]]) + 1
                                    mem[_16044 + ceil32(return_data.size)] = _16100
                                    require _16076 + (32 * _16100) + 32 <= return_data.size
                                    mem[_16044 + ceil32(return_data.size) + 32 len ceil32(32 * _16100)] = mem[_16044 + _16076 + 32 len ceil32(32 * _16100)]
                                    var110002 = _16044 + ceil32(return_data.size) + ceil32(32 * _16100) + 32
                                    if 1 >= _16100:
                                        revert with 0, 50
                                    _19318 = mem[_16044 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16044 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16044 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19530 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19544 = mem[_19530]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19318) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19530]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19861 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19927 = mem[_19861]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20135 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20135] > !_19927:
                                                revert with 0, 17
                                            if mem[_20135] + _19927 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544 > -1 / mem[_20135] + _19927:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20135] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544) + (_19927 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19862 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19929 = mem[_19862]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20136 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20136] > !_19929:
                                                revert with 0, 17
                                            if mem[_20136] + _19929 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544 > -1 / mem[_20136] + _19929:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20136] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544) + (_19929 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318) / _19544) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16044 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16044 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19588 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19642 = mem[_19588]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19588]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20102 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20214 = mem[_20102]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20443 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20443] > !_20214:
                                                    revert with 0, 17
                                                if mem[_20443] + _20214 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642 > -1 / mem[_20443] + _20214:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20443] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642) + (_20214 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20103 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20216 = mem[_20103]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20444 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20444] > !_20216:
                                                    revert with 0, 17
                                                if mem[_20444] + _20216 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642 > -1 / mem[_20444] + _20216:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20444] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642) + (_20216 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / 10^stor259) / _19642) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16044 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16044 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21999 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22018 = mem[_21999]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21999]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22198 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22248 = mem[_22198]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22404 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22404] > !_22248:
                                                    revert with 0, 17
                                                if mem[_22404] + _22248 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018 > -1 / mem[_22404] + _22248:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22404] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018) + (_22248 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22199 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22250 = mem[_22199]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22405 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22405] > !_22250:
                                                    revert with 0, 17
                                                if mem[_22405] + _22250 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018 > -1 / mem[_22405] + _22250:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22405] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018) + (_22250 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19318 / u * v) / _22018) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _16057 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16057]:
                                        revert with 0, 50
                                    mem[_16057 + 32] = token1Address
                                    if 1 >= mem[_16057]:
                                        revert with 0, 50
                                    mem[_16057 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16057 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16057 + 100] = u * v
                                    mem[_16057 + 132] = 64
                                    mem[_16057 + 164] = mem[_16057]
                                    idx = 0
                                    u = _16057 + 32
                                    v = _16057 + 196
                                    while idx < mem[_16057]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16057 + (32 * mem[_16057]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19348 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19366 = mem[_19348]
                                    require mem[_19348] <= test266151307()
                                    require _19348 + mem[_19348] + 31 < _19348 + return_data.size
                                    _19382 = mem[_19348 + mem[_19348]]
                                    if mem[_19348 + mem[_19348]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19348 + mem[_19348]]) + 1 < 0 or _19348 + ceil32(return_data.size) + ceil32(32 * mem[_19348 + mem[_19348]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19348 + ceil32(return_data.size) + ceil32(32 * mem[_19348 + mem[_19348]]) + 1
                                    mem[_19348 + ceil32(return_data.size)] = _19382
                                    require _19366 + (32 * _19382) + 32 <= return_data.size
                                    mem[_19348 + ceil32(return_data.size) + 32 len ceil32(32 * _19382)] = mem[_19348 + _19366 + 32 len ceil32(32 * _19382)]
                                    if 1 >= _19382:
                                        revert with 0, 50
                                    _21925 = mem[_19348 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19348 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19348 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22050 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22060 = mem[_22050]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21925) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22050]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22378 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22441 = mem[_22378]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22610 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22610] > !_22441:
                                                revert with 0, 17
                                            if mem[_22610] + _22441 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060 > -1 / mem[_22610] + _22441:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22610] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060) + (_22441 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22379 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22443 = mem[_22379]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22611 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22611] > !_22443:
                                                revert with 0, 17
                                            if mem[_22611] + _22443 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060 > -1 / mem[_22611] + _22443:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22611] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060) + (_22443 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925) / _22060) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19348 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19348 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22092 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22151 = mem[_22092]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22092]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22586 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22677 = mem[_22586]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22846 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22846] > !_22677:
                                                    revert with 0, 17
                                                if mem[_22846] + _22677 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151 > -1 / mem[_22846] + _22677:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22846] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151) + (_22677 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22587 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22679 = mem[_22587]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22847 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22847] > !_22679:
                                                    revert with 0, 17
                                                if mem[_22847] + _22679 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151 > -1 / mem[_22847] + _22679:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22847] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151) + (_22679 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / 10^stor259) / _22151) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19348 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19348 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23588 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23599 = mem[_23588]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23588]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23710 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23749 = mem[_23710]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23849 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23849] > !_23749:
                                                    revert with 0, 17
                                                if mem[_23849] + _23749 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599 > -1 / mem[_23849] + _23749:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599) + (_23749 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23711 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23751 = mem[_23711]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23850 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23850] > !_23751:
                                                    revert with 0, 17
                                                if mem[_23850] + _23751 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599 > -1 / mem[_23850] + _23751:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23850] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599) + (_23751 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21925 / u * v) / _23599) / 10^18
                        else:
                            _12349 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12349]:
                                revert with 0, 50
                            mem[_12349 + 32] = token1Address
                            if 1 >= mem[_12349]:
                                revert with 0, 50
                            mem[_12349 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12349 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12349 + 100] = 10^18
                            mem[_12349 + 132] = 64
                            mem[_12349 + 164] = mem[_12349]
                            idx = 0
                            u = _12349 + 32
                            v = _12349 + 196
                            while idx < mem[_12349]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12349 + (32 * mem[_12349]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16046 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16078 = mem[_16046]
                            require mem[_16046] <= test266151307()
                            require _16046 + mem[_16046] + 31 < _16046 + return_data.size
                            _16102 = mem[_16046 + mem[_16046]]
                            if mem[_16046 + mem[_16046]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16046 + mem[_16046]]) + 1 < 0 or _16046 + ceil32(return_data.size) + ceil32(32 * mem[_16046 + mem[_16046]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16046 + ceil32(return_data.size) + ceil32(32 * mem[_16046 + mem[_16046]]) + 1
                            mem[_16046 + ceil32(return_data.size)] = _16102
                            require _16078 + (32 * _16102) + 32 <= return_data.size
                            mem[_16046 + ceil32(return_data.size) + 32 len ceil32(32 * _16102)] = mem[_16046 + _16078 + 32 len ceil32(32 * _16102)]
                            var99002 = _16046 + ceil32(return_data.size) + ceil32(32 * _16102) + 32
                            if 1 >= _16102:
                                revert with 0, 50
                            _19320 = mem[_16046 + ceil32(return_data.size) + 64]
                            _19333 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_19333]:
                                revert with 0, 50
                            mem[_19333 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_19333]:
                                revert with 0, 50
                            mem[_19333 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_19333 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_19333 + 100] = _19320
                            mem[_19333 + 132] = 64
                            mem[_19333 + 164] = mem[_19333]
                            idx = 0
                            u = _19333 + 32
                            v = _19333 + 196
                            while idx < mem[_19333]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _19333 + (32 * mem[_19333]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21936 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21942 = mem[_21936]
                            require mem[_21936] <= test266151307()
                            require _21936 + mem[_21936] + 31 < _21936 + return_data.size
                            _21948 = mem[_21936 + mem[_21936]]
                            if mem[_21936 + mem[_21936]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21936 + mem[_21936]]) + 1 < 0 or _21936 + ceil32(return_data.size) + ceil32(32 * mem[_21936 + mem[_21936]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21936 + ceil32(return_data.size) + ceil32(32 * mem[_21936 + mem[_21936]]) + 1
                            mem[_21936 + ceil32(return_data.size)] = _21948
                            require _21942 + (32 * _21948) + 32 <= return_data.size
                            mem[_21936 + ceil32(return_data.size) + 32 len ceil32(32 * _21948)] = mem[_21936 + _21942 + 32 len ceil32(32 * _21948)]
                            if 1 >= _21948:
                                revert with 0, 50
                            _23554 = mem[_21936 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21936 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21936 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23616 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23621 = mem[_23616]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23554) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23616]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23832 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23871 = mem[_23832]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23957 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23957] > !_23871:
                                        revert with 0, 17
                                    if mem[_23957] + _23871 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621 > -1 / mem[_23957] + _23871:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23957] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621) + (_23871 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23833 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23873 = mem[_23833]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23958 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23958] > !_23873:
                                        revert with 0, 17
                                    if mem[_23958] + _23873 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621 > -1 / mem[_23958] + _23873:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23958] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621) + (_23873 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554) / _23621) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21936 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21936 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23636 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23683 = mem[_23636]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23636]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23946 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23995 = mem[_23946]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24071 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24071] > !_23995:
                                            revert with 0, 17
                                        if mem[_24071] + _23995 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683 > -1 / mem[_24071] + _23995:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24071] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683) + (_23995 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23947 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23997 = mem[_23947]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24072 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24072] > !_23997:
                                            revert with 0, 17
                                        if mem[_24072] + _23997 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683 > -1 / mem[_24072] + _23997:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683) + (_23997 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / 10^stor259) / _23683) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21936 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21936 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24307 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24312 = mem[_24307]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24307]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24371 = mem[_24352]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24409 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24409] > !_24371:
                                            revert with 0, 17
                                        if mem[_24409] + _24371 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312 > -1 / mem[_24409] + _24371:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24409] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312) + (_24371 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24353 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24373 = mem[_24353]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24410 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24410] > !_24373:
                                            revert with 0, 17
                                        if mem[_24410] + _24373 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312 > -1 / mem[_24410] + _24373:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24410] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312) + (_24373 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8230 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23554 / u * v) / _24312) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4164 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4173 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4164 + (32 * _4173) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4173)] = mem[ceil32(return_data.size) + _4164 + 224 len ceil32(32 * _4173)]
                    if 1 >= _4173:
                        revert with 0, 50
                    _8229 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8289 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8289]:
                                    revert with 0, 50
                                mem[_8289 + 32] = token1Address
                                if 1 >= mem[_8289]:
                                    revert with 0, 50
                                mem[_8289 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8289 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8289 + 100] = 1
                                mem[_8289 + 132] = 64
                                mem[_8289 + 164] = mem[_8289]
                                idx = 0
                                s = _8289 + 32
                                t = _8289 + 196
                                while idx < mem[_8289]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8289 + (32 * mem[_8289]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12277 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12303 = mem[_12277]
                                require mem[_12277] <= test266151307()
                                require _12277 + mem[_12277] + 31 < _12277 + return_data.size
                                _12319 = mem[_12277 + mem[_12277]]
                                if mem[_12277 + mem[_12277]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12277 + mem[_12277]]) + 1 < 0 or _12277 + ceil32(return_data.size) + ceil32(32 * mem[_12277 + mem[_12277]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12277 + ceil32(return_data.size) + ceil32(32 * mem[_12277 + mem[_12277]]) + 1
                                mem[_12277 + ceil32(return_data.size)] = _12319
                                require _12303 + (32 * _12319) + 32 <= return_data.size
                                mem[_12277 + ceil32(return_data.size) + 32 len ceil32(32 * _12319)] = mem[_12277 + _12303 + 32 len ceil32(32 * _12319)]
                                if 1 >= _12319:
                                    revert with 0, 50
                                _15996 = mem[_12277 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16282 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16304 = mem[_16282]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15996) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16282]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16536 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16582 = mem[_16536]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16751 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16751] > !_16582:
                                            revert with 0, 17
                                        if mem[_16751] + _16582 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304 > -1 / mem[_16751] + _16582:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16751] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304) + (_16582 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16537 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16584 = mem[_16537]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16752 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16752] > !_16584:
                                            revert with 0, 17
                                        if mem[_16752] + _16584 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304 > -1 / mem[_16752] + _16584:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16752] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304) + (_16584 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996) / _16304) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16344 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16384 = mem[_16344]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16344]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16722 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16800 = mem[_16722]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16991 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16991] > !_16800:
                                                revert with 0, 17
                                            if mem[_16991] + _16800 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384 > -1 / mem[_16991] + _16800:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16991] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384) + (_16800 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16723 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16802 = mem[_16723]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16992 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16992] > !_16802:
                                                revert with 0, 17
                                            if mem[_16992] + _16802 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384 > -1 / mem[_16992] + _16802:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16992] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384) + (_16802 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / 10^stor259) / _16384) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19453 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19485 = mem[_19453]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19453]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19684 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19719 = mem[_19684]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19881 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19881] > !_19719:
                                                revert with 0, 17
                                            if mem[_19881] + _19719 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485 > -1 / mem[_19881] + _19719:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19881] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485) + (_19719 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19685 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19721 = mem[_19685]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19882 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19882] > !_19721:
                                                revert with 0, 17
                                            if mem[_19882] + _19721 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485 > -1 / mem[_19882] + _19721:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19882] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485) + (_19721 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15996 / s * t) / _19485) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8338 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8338]:
                                        revert with 0, 50
                                    mem[_8338 + 32] = token1Address
                                    if 1 >= mem[_8338]:
                                        revert with 0, 50
                                    mem[_8338 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8338 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8338 + 100] = 10^stor259
                                    mem[_8338 + 132] = 64
                                    mem[_8338 + 164] = mem[_8338]
                                    idx = 0
                                    s = _8338 + 32
                                    t = _8338 + 196
                                    while idx < mem[_8338]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8338 + (32 * mem[_8338]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12276 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12302 = mem[_12276]
                                    require mem[_12276] <= test266151307()
                                    require _12276 + mem[_12276] + 31 < _12276 + return_data.size
                                    _12318 = mem[_12276 + mem[_12276]]
                                    if mem[_12276 + mem[_12276]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12276 + mem[_12276]]) + 1 < 0 or _12276 + ceil32(return_data.size) + ceil32(32 * mem[_12276 + mem[_12276]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12276 + ceil32(return_data.size) + ceil32(32 * mem[_12276 + mem[_12276]]) + 1
                                    mem[_12276 + ceil32(return_data.size)] = _12318
                                    require _12302 + (32 * _12318) + 32 <= return_data.size
                                    mem[_12276 + ceil32(return_data.size) + 32 len ceil32(32 * _12318)] = mem[_12276 + _12302 + 32 len ceil32(32 * _12318)]
                                    var105002 = _12276 + ceil32(return_data.size) + ceil32(32 * _12318) + 32
                                    if 1 >= _12318:
                                        revert with 0, 50
                                    _15995 = mem[_12276 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16281 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16303 = mem[_16281]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15995) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16281]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16534 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16578 = mem[_16534]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16749 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16749] > !_16578:
                                                revert with 0, 17
                                            if mem[_16749] + _16578 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303 > -1 / mem[_16749] + _16578:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16749] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303) + (_16578 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16535 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16580 = mem[_16535]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16750 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16750] > !_16580:
                                                revert with 0, 17
                                            if mem[_16750] + _16580 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303 > -1 / mem[_16750] + _16580:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16750] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303) + (_16580 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16303) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16343 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16381 = mem[_16343]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16343]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16720 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16792 = mem[_16720]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16985 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16985] > !_16792:
                                                    revert with 0, 17
                                                if mem[_16985] + _16792 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 > -1 / mem[_16985] + _16792:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16985] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381) + (_16792 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16721 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16794 = mem[_16721]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16986 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16986] > !_16794:
                                                    revert with 0, 17
                                                if mem[_16986] + _16794 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 > -1 / mem[_16986] + _16794:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16986] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381) + (_16794 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19452 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19484 = mem[_19452]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19452]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19682 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19715 = mem[_19682]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19879 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19879] > !_19715:
                                                    revert with 0, 17
                                                if mem[_19879] + _19715 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484 > -1 / mem[_19879] + _19715:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19879] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484) + (_19715 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19683 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19717 = mem[_19683]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19880 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19880] > !_19717:
                                                    revert with 0, 17
                                                if mem[_19880] + _19717 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484 > -1 / mem[_19880] + _19717:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19880] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484) + (_19717 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19484) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _12291 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12291]:
                                        revert with 0, 50
                                    mem[_12291 + 32] = token1Address
                                    if 1 >= mem[_12291]:
                                        revert with 0, 50
                                    mem[_12291 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12291 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12291 + 100] = s * t
                                    mem[_12291 + 132] = 64
                                    mem[_12291 + 164] = mem[_12291]
                                    idx = 0
                                    s = _12291 + 32
                                    t = _12291 + 196
                                    while idx < mem[_12291]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12291 + (32 * mem[_12291]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16040 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16073 = mem[_16040]
                                    require mem[_16040] <= test266151307()
                                    require _16040 + mem[_16040] + 31 < _16040 + return_data.size
                                    _16097 = mem[_16040 + mem[_16040]]
                                    if mem[_16040 + mem[_16040]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16040 + mem[_16040]]) + 1 < 0 or _16040 + ceil32(return_data.size) + ceil32(32 * mem[_16040 + mem[_16040]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16040 + ceil32(return_data.size) + ceil32(32 * mem[_16040 + mem[_16040]]) + 1
                                    mem[_16040 + ceil32(return_data.size)] = _16097
                                    require _16073 + (32 * _16097) + 32 <= return_data.size
                                    mem[_16040 + ceil32(return_data.size) + 32 len ceil32(32 * _16097)] = mem[_16040 + _16073 + 32 len ceil32(32 * _16097)]
                                    var110002 = _16040 + ceil32(return_data.size) + ceil32(32 * _16097) + 32
                                    if 1 >= _16097:
                                        revert with 0, 50
                                    _19315 = mem[_16040 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16040 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16040 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19529 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19543 = mem[_19529]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _19315) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19529]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19859 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19923 = mem[_19859]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20131 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20131] > !_19923:
                                                revert with 0, 17
                                            if mem[_20131] + _19923 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543 > -1 / mem[_20131] + _19923:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20131] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543) + (_19923 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19860 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19925 = mem[_19860]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20132 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20132] > !_19925:
                                                revert with 0, 17
                                            if mem[_20132] + _19925 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543 > -1 / mem[_20132] + _19925:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20132] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543) + (_19925 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19543) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16040 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16040 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19587 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19631 = mem[_19587]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19587]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20100 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20206 = mem[_20100]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20437 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20437] > !_20206:
                                                    revert with 0, 17
                                                if mem[_20437] + _20206 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631 > -1 / mem[_20437] + _20206:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20437] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631) + (_20206 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20101 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20208 = mem[_20101]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20438 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20438] > !_20208:
                                                    revert with 0, 17
                                                if mem[_20438] + _20208 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631 > -1 / mem[_20438] + _20208:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20438] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631) + (_20208 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19631) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16040 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16040 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21998 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22017 = mem[_21998]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21998]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22194 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22242 = mem[_22194]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22402 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22402] > !_22242:
                                                    revert with 0, 17
                                                if mem[_22402] + _22242 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017 > -1 / mem[_22402] + _22242:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22402] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017) + (_22242 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22195 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22244 = mem[_22195]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22403 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22403] > !_22244:
                                                    revert with 0, 17
                                                if mem[_22403] + _22244 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017 > -1 / mem[_22403] + _22244:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22403] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017) + (_22244 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22017) / 10^18
                        else:
                            _8253 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8253]:
                                revert with 0, 50
                            mem[_8253 + 32] = token1Address
                            if 1 >= mem[_8253]:
                                revert with 0, 50
                            mem[_8253 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8253 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8253 + 100] = 10^18
                            mem[_8253 + 132] = 64
                            mem[_8253 + 164] = mem[_8253]
                            idx = 0
                            s = _8253 + 32
                            t = _8253 + 196
                            while idx < mem[_8253]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8253 + (32 * mem[_8253]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12278 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12304 = mem[_12278]
                            require mem[_12278] <= test266151307()
                            require _12278 + mem[_12278] + 31 < _12278 + return_data.size
                            _12320 = mem[_12278 + mem[_12278]]
                            if mem[_12278 + mem[_12278]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12278 + mem[_12278]]) + 1 < 0 or _12278 + ceil32(return_data.size) + ceil32(32 * mem[_12278 + mem[_12278]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12278 + ceil32(return_data.size) + ceil32(32 * mem[_12278 + mem[_12278]]) + 1
                            mem[_12278 + ceil32(return_data.size)] = _12320
                            require _12304 + (32 * _12320) + 32 <= return_data.size
                            mem[_12278 + ceil32(return_data.size) + 32 len ceil32(32 * _12320)] = mem[_12278 + _12304 + 32 len ceil32(32 * _12320)]
                            var94002 = _12278 + ceil32(return_data.size) + ceil32(32 * _12320) + 32
                            var94005 = _12278 + _12304 + ceil32(32 * _12320) + 32
                            if 1 >= _12320:
                                revert with 0, 50
                            _15997 = mem[_12278 + ceil32(return_data.size) + 64]
                            _16017 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_16017]:
                                revert with 0, 50
                            mem[_16017 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_16017]:
                                revert with 0, 50
                            mem[_16017 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_16017 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_16017 + 100] = _15997
                            mem[_16017 + 132] = 64
                            mem[_16017 + 164] = mem[_16017]
                            idx = 0
                            s = _16017 + 32
                            t = _16017 + 196
                            while idx < mem[_16017]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _16017 + (32 * mem[_16017]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _19347 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _19365 = mem[_19347]
                            require mem[_19347] <= test266151307()
                            require _19347 + mem[_19347] + 31 < _19347 + return_data.size
                            _19381 = mem[_19347 + mem[_19347]]
                            if mem[_19347 + mem[_19347]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_19347 + mem[_19347]]) + 1 < 0 or _19347 + ceil32(return_data.size) + ceil32(32 * mem[_19347 + mem[_19347]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _19347 + ceil32(return_data.size) + ceil32(32 * mem[_19347 + mem[_19347]]) + 1
                            mem[_19347 + ceil32(return_data.size)] = _19381
                            require _19365 + (32 * _19381) + 32 <= return_data.size
                            mem[_19347 + ceil32(return_data.size) + 32 len ceil32(32 * _19381)] = mem[_19347 + _19365 + 32 len ceil32(32 * _19381)]
                            if 1 >= _19381:
                                revert with 0, 50
                            _21924 = mem[_19347 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19347 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19347 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22049 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22059 = mem[_22049]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _21924) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22049]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22376 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22437 = mem[_22376]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22608 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22608] > !_22437:
                                        revert with 0, 17
                                    if mem[_22608] + _22437 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059 > -1 / mem[_22608] + _22437:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22608] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059) + (_22437 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22377 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22439 = mem[_22377]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22609 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22609] > !_22439:
                                        revert with 0, 17
                                    if mem[_22609] + _22439 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059 > -1 / mem[_22609] + _22439:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22609] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059) + (_22439 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924) / _22059) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19347 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19347 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22091 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22148 = mem[_22091]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22091]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22584 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22669 = mem[_22584]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22840 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22840] > !_22669:
                                            revert with 0, 17
                                        if mem[_22840] + _22669 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148 > -1 / mem[_22840] + _22669:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148) + (_22669 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22585 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22671 = mem[_22585]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22841 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22841] > !_22671:
                                            revert with 0, 17
                                        if mem[_22841] + _22671 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148 > -1 / mem[_22841] + _22671:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22841] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148) + (_22671 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / 10^stor259) / _22148) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19347 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8229 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19347 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23587 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23598 = mem[_23587]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8229) + (Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23587]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23708 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23745 = mem[_23708]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23847 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23847] > !_23745:
                                            revert with 0, 17
                                        if mem[_23847] + _23745 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598 > -1 / mem[_23847] + _23745:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23847] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598) + (_23745 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23709 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23747 = mem[_23709]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23848 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23848] > !_23747:
                                            revert with 0, 17
                                        if mem[_23848] + _23747 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598 > -1 / mem[_23848] + _23747:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23848] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598) + (_23747 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21924 / s * t) / _23598) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8336 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8336]:
                                        revert with 0, 50
                                    mem[_8336 + 32] = token1Address
                                    if 1 >= mem[_8336]:
                                        revert with 0, 50
                                    mem[_8336 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8336 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8336 + 100] = 1
                                    mem[_8336 + 132] = 64
                                    mem[_8336 + 164] = mem[_8336]
                                    idx = 0
                                    s = _8336 + 32
                                    t = _8336 + 196
                                    while idx < mem[_8336]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8336 + (32 * mem[_8336]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12272 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12299 = mem[_12272]
                                    require mem[_12272] <= test266151307()
                                    require _12272 + mem[_12272] + 31 < _12272 + return_data.size
                                    _12315 = mem[_12272 + mem[_12272]]
                                    if mem[_12272 + mem[_12272]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12272 + mem[_12272]]) + 1 < 0 or _12272 + ceil32(return_data.size) + ceil32(32 * mem[_12272 + mem[_12272]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12272 + ceil32(return_data.size) + ceil32(32 * mem[_12272 + mem[_12272]]) + 1
                                    mem[_12272 + ceil32(return_data.size)] = _12315
                                    require _12299 + (32 * _12315) + 32 <= return_data.size
                                    mem[_12272 + ceil32(return_data.size) + 32 len ceil32(32 * _12315)] = mem[_12272 + _12299 + 32 len ceil32(32 * _12315)]
                                    var105002 = _12272 + ceil32(return_data.size) + ceil32(32 * _12315) + 32
                                    if 1 >= _12315:
                                        revert with 0, 50
                                    _15990 = mem[_12272 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16280 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16302 = mem[_16280]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15990) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16280]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16532 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16574 = mem[_16532]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16746 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16746] > !_16574:
                                                revert with 0, 17
                                            if mem[_16746] + _16574 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302 > -1 / mem[_16746] + _16574:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16746] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302) + (_16574 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16533 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16576 = mem[_16533]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16747 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16747] > !_16576:
                                                revert with 0, 17
                                            if mem[_16747] + _16576 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302 > -1 / mem[_16747] + _16576:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16747] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302) + (_16576 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990) / _16302) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16341 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16378 = mem[_16341]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16341]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16718 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16784 = mem[_16718]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16978 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16978] > !_16784:
                                                    revert with 0, 17
                                                if mem[_16978] + _16784 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378 > -1 / mem[_16978] + _16784:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16978] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378) + (_16784 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16719 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16786 = mem[_16719]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16979 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16979] > !_16786:
                                                    revert with 0, 17
                                                if mem[_16979] + _16786 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378 > -1 / mem[_16979] + _16786:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16979] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378) + (_16786 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / 10^stor259) / _16378) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19450 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19483 = mem[_19450]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19450]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19679 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19710 = mem[_19679]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19876 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19876] > !_19710:
                                                    revert with 0, 17
                                                if mem[_19876] + _19710 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483 > -1 / mem[_19876] + _19710:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19876] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483) + (_19710 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19680 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19712 = mem[_19680]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19877 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19877] > !_19712:
                                                    revert with 0, 17
                                                if mem[_19877] + _19712 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483 > -1 / mem[_19877] + _19712:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19877] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483) + (_19712 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15990 / s * t) / _19483) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8417 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8417]:
                                            revert with 0, 50
                                        mem[_8417 + 32] = token1Address
                                        if 1 >= mem[_8417]:
                                            revert with 0, 50
                                        mem[_8417 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8417 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8417 + 100] = 10^stor259
                                        mem[_8417 + 132] = 64
                                        mem[_8417 + 164] = mem[_8417]
                                        idx = 0
                                        s = _8417 + 32
                                        t = _8417 + 196
                                        while idx < mem[_8417]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8417 + (32 * mem[_8417]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12271 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _12298 = mem[_12271]
                                        require mem[_12271] <= test266151307()
                                        require _12271 + mem[_12271] + 31 < _12271 + return_data.size
                                        _12314 = mem[_12271 + mem[_12271]]
                                        if mem[_12271 + mem[_12271]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_12271 + mem[_12271]]) + 1 < 0 or _12271 + ceil32(return_data.size) + ceil32(32 * mem[_12271 + mem[_12271]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _12271 + ceil32(return_data.size) + ceil32(32 * mem[_12271 + mem[_12271]]) + 1
                                        mem[_12271 + ceil32(return_data.size)] = _12314
                                        require _12298 + (32 * _12314) + 32 <= return_data.size
                                        mem[_12271 + ceil32(return_data.size) + 32 len ceil32(32 * _12314)] = mem[_12271 + _12298 + 32 len ceil32(32 * _12314)]
                                        var110002 = _12271 + ceil32(return_data.size) + ceil32(32 * _12314) + 32
                                        if 1 >= _12314:
                                            revert with 0, 50
                                        _15989 = mem[_12271 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16279 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16301 = mem[_16279]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15989) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16279]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16530 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16570 = mem[_16530]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16744 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16744] > !_16570:
                                                    revert with 0, 17
                                                if mem[_16744] + _16570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301 > -1 / mem[_16744] + _16570:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16744] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301) + (_16570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16531 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16572 = mem[_16531]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16745 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16745] > !_16572:
                                                    revert with 0, 17
                                                if mem[_16745] + _16572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301 > -1 / mem[_16745] + _16572:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16745] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301) + (_16572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989) / _16301) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16340 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16375 = mem[_16340]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_16340]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16716 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16776 = mem[_16716]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16972 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16972] > !_16776:
                                                        revert with 0, 17
                                                    if mem[_16972] + _16776 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375 > -1 / mem[_16972] + _16776:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16972] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375) + (_16776 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16717 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16778 = mem[_16717]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16973 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16973] > !_16778:
                                                        revert with 0, 17
                                                    if mem[_16973] + _16778 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375 > -1 / mem[_16973] + _16778:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16973] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375) + (_16778 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / 10^stor259) / _16375) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19449 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19482 = mem[_19449]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19449]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19677 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19706 = mem[_19677]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19874 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19874] > !_19706:
                                                        revert with 0, 17
                                                    if mem[_19874] + _19706 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482 > -1 / mem[_19874] + _19706:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19874] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482) + (_19706 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19678 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19708 = mem[_19678]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19875 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19875] > !_19708:
                                                        revert with 0, 17
                                                    if mem[_19875] + _19708 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482 > -1 / mem[_19875] + _19708:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19875] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482) + (_19708 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15989 / s * t) / _19482) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _12289 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12289]:
                                            revert with 0, 50
                                        mem[_12289 + 32] = token1Address
                                        if 1 >= mem[_12289]:
                                            revert with 0, 50
                                        mem[_12289 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12289 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12289 + 100] = s * t
                                        mem[_12289 + 132] = 64
                                        mem[_12289 + 164] = mem[_12289]
                                        idx = 0
                                        s = _12289 + 32
                                        t = _12289 + 196
                                        while idx < mem[_12289]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12289 + (32 * mem[_12289]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16038 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16071 = mem[_16038]
                                        require mem[_16038] <= test266151307()
                                        require _16038 + mem[_16038] + 31 < _16038 + return_data.size
                                        _16095 = mem[_16038 + mem[_16038]]
                                        if mem[_16038 + mem[_16038]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16038 + mem[_16038]]) + 1 < 0 or _16038 + ceil32(return_data.size) + ceil32(32 * mem[_16038 + mem[_16038]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16038 + ceil32(return_data.size) + ceil32(32 * mem[_16038 + mem[_16038]]) + 1
                                        mem[_16038 + ceil32(return_data.size)] = _16095
                                        require _16071 + (32 * _16095) + 32 <= return_data.size
                                        mem[_16038 + ceil32(return_data.size) + 32 len ceil32(32 * _16095)] = mem[_16038 + _16071 + 32 len ceil32(32 * _16095)]
                                        var115002 = _16038 + ceil32(return_data.size) + ceil32(32 * _16095) + 32
                                        if 1 >= _16095:
                                            revert with 0, 50
                                        _19313 = mem[_16038 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16038 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16038 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19528 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19542 = mem[_19528]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19528]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19857 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19919 = mem[_19857]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20128 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20128] > !_19919:
                                                    revert with 0, 17
                                                if mem[_20128] + _19919 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542 > -1 / mem[_20128] + _19919:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20128] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542) + (_19919 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19858 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19921 = mem[_19858]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20129 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20129] > !_19921:
                                                    revert with 0, 17
                                                if mem[_20129] + _19921 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542 > -1 / mem[_20129] + _19921:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20129] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542) + (_19921 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19542) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16038 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16038 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19586 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19620 = mem[_19586]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19586]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20098 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20198 = mem[_20098]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20431 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20431] > !_20198:
                                                        revert with 0, 17
                                                    if mem[_20431] + _20198 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620 > -1 / mem[_20431] + _20198:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20431] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620) + (_20198 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20099 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20200 = mem[_20099]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20432 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20432] > !_20200:
                                                        revert with 0, 17
                                                    if mem[_20432] + _20200 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620 > -1 / mem[_20432] + _20200:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20432] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620) + (_20200 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19620) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16038 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16038 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21997 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22016 = mem[_21997]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21997]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22191 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22237 = mem[_22191]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22400 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22400] > !_22237:
                                                        revert with 0, 17
                                                    if mem[_22400] + _22237 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016 > -1 / mem[_22400] + _22237:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22400] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016) + (_22237 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22192 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22239 = mem[_22192]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22401 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22401] > !_22239:
                                                        revert with 0, 17
                                                    if mem[_22401] + _22239 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016 > -1 / mem[_22401] + _22239:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22401] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016) + (_22239 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22016) / 10^18
                            else:
                                _8278 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8278]:
                                    revert with 0, 50
                                mem[_8278 + 32] = token1Address
                                if 1 >= mem[_8278]:
                                    revert with 0, 50
                                mem[_8278 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8278 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8278 + 100] = 10^18
                                mem[_8278 + 132] = 64
                                mem[_8278 + 164] = mem[_8278]
                                idx = 0
                                s = _8278 + 32
                                t = _8278 + 196
                                while idx < mem[_8278]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8278 + (32 * mem[_8278]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12273 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12300 = mem[_12273]
                                require mem[_12273] <= test266151307()
                                require _12273 + mem[_12273] + 31 < _12273 + return_data.size
                                _12316 = mem[_12273 + mem[_12273]]
                                if mem[_12273 + mem[_12273]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12273 + mem[_12273]]) + 1 < 0 or _12273 + ceil32(return_data.size) + ceil32(32 * mem[_12273 + mem[_12273]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12273 + ceil32(return_data.size) + ceil32(32 * mem[_12273 + mem[_12273]]) + 1
                                mem[_12273 + ceil32(return_data.size)] = _12316
                                require _12300 + (32 * _12316) + 32 <= return_data.size
                                mem[_12273 + ceil32(return_data.size) + 32 len ceil32(32 * _12316)] = mem[_12273 + _12300 + 32 len ceil32(32 * _12316)]
                                var99002 = _12273 + ceil32(return_data.size) + ceil32(32 * _12316) + 32
                                if 1 >= _12316:
                                    revert with 0, 50
                                _15991 = mem[_12273 + ceil32(return_data.size) + 64]
                                _16015 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_16015]:
                                    revert with 0, 50
                                mem[_16015 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_16015]:
                                    revert with 0, 50
                                mem[_16015 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_16015 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_16015 + 100] = _15991
                                mem[_16015 + 132] = 64
                                mem[_16015 + 164] = mem[_16015]
                                idx = 0
                                s = _16015 + 32
                                t = _16015 + 196
                                while idx < mem[_16015]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _16015 + (32 * mem[_16015]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _19346 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _19364 = mem[_19346]
                                require mem[_19346] <= test266151307()
                                require _19346 + mem[_19346] + 31 < _19346 + return_data.size
                                _19380 = mem[_19346 + mem[_19346]]
                                if mem[_19346 + mem[_19346]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_19346 + mem[_19346]]) + 1 < 0 or _19346 + ceil32(return_data.size) + ceil32(32 * mem[_19346 + mem[_19346]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _19346 + ceil32(return_data.size) + ceil32(32 * mem[_19346 + mem[_19346]]) + 1
                                mem[_19346 + ceil32(return_data.size)] = _19380
                                require _19364 + (32 * _19380) + 32 <= return_data.size
                                mem[_19346 + ceil32(return_data.size) + 32 len ceil32(32 * _19380)] = mem[_19346 + _19364 + 32 len ceil32(32 * _19380)]
                                if 1 >= _19380:
                                    revert with 0, 50
                                _21923 = mem[_19346 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19346 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19346 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22048 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22058 = mem[_22048]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21923) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22048]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22374 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22433 = mem[_22374]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22606 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22606] > !_22433:
                                            revert with 0, 17
                                        if mem[_22606] + _22433 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058 > -1 / mem[_22606] + _22433:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22606] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058) + (_22433 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22375 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22435 = mem[_22375]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22607 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22607] > !_22435:
                                            revert with 0, 17
                                        if mem[_22607] + _22435 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058 > -1 / mem[_22607] + _22435:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22607] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058) + (_22435 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923) / _22058) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19346 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19346 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22090 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22141 = mem[_22090]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22090]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22582 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22661 = mem[_22582]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22834 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22834] > !_22661:
                                                revert with 0, 17
                                            if mem[_22834] + _22661 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141 > -1 / mem[_22834] + _22661:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22834] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141) + (_22661 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22583 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22663 = mem[_22583]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22835 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22835] > !_22663:
                                                revert with 0, 17
                                            if mem[_22835] + _22663 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141 > -1 / mem[_22835] + _22663:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22835] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141) + (_22663 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / 10^stor259) / _22141) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19346 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19346 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23586 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23597 = mem[_23586]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23586]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23706 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23741 = mem[_23706]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23845 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23845] > !_23741:
                                                revert with 0, 17
                                            if mem[_23845] + _23741 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597 > -1 / mem[_23845] + _23741:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23845] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597) + (_23741 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23707 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23743 = mem[_23707]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23846 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23846] > !_23743:
                                                revert with 0, 17
                                            if mem[_23846] + _23743 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597 > -1 / mem[_23846] + _23743:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23846] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597) + (_23743 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21923 / s * t) / _23597) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12430 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12430]:
                                        revert with 0, 50
                                    mem[_12430 + 32] = token1Address
                                    if 1 >= mem[_12430]:
                                        revert with 0, 50
                                    mem[_12430 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12430 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12430 + 100] = 1
                                    mem[_12430 + 132] = 64
                                    mem[_12430 + 164] = mem[_12430]
                                    idx = 0
                                    u = _12430 + 32
                                    v = _12430 + 196
                                    while idx < mem[_12430]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12430 + (32 * mem[_12430]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16036 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16069 = mem[_16036]
                                    require mem[_16036] <= test266151307()
                                    require _16036 + mem[_16036] + 31 < _16036 + return_data.size
                                    _16093 = mem[_16036 + mem[_16036]]
                                    if mem[_16036 + mem[_16036]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16036 + mem[_16036]]) + 1 < 0 or _16036 + ceil32(return_data.size) + ceil32(32 * mem[_16036 + mem[_16036]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16036 + ceil32(return_data.size) + ceil32(32 * mem[_16036 + mem[_16036]]) + 1
                                    mem[_16036 + ceil32(return_data.size)] = _16093
                                    require _16069 + (32 * _16093) + 32 <= return_data.size
                                    mem[_16036 + ceil32(return_data.size) + 32 len ceil32(32 * _16093)] = mem[_16036 + _16069 + 32 len ceil32(32 * _16093)]
                                    var110002 = _16036 + ceil32(return_data.size) + ceil32(32 * _16093) + 32
                                    if 1 >= _16093:
                                        revert with 0, 50
                                    _19309 = mem[_16036 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16036 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16036 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19527 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19541 = mem[_19527]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19527]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19855 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19915 = mem[_19855]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20126 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20126] > !_19915:
                                                revert with 0, 17
                                            if mem[_20126] + _19915 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541 > -1 / mem[_20126] + _19915:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20126] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541) + (_19915 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19856 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19917 = mem[_19856]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20127 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20127] > !_19917:
                                                revert with 0, 17
                                            if mem[_20127] + _19917 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541 > -1 / mem[_20127] + _19917:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20127] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541) + (_19917 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19541) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16036 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16036 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19584 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19617 = mem[_19584]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19584]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20096 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20190 = mem[_20096]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20424 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20424] > !_20190:
                                                    revert with 0, 17
                                                if mem[_20424] + _20190 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617 > -1 / mem[_20424] + _20190:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20424] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617) + (_20190 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20097 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20192 = mem[_20097]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20425 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20425] > !_20192:
                                                    revert with 0, 17
                                                if mem[_20425] + _20192 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617 > -1 / mem[_20425] + _20192:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20425] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617) + (_20192 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19617) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16036 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16036 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21995 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22015 = mem[_21995]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21995]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22189 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22233 = mem[_22189]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22397 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22397] > !_22233:
                                                    revert with 0, 17
                                                if mem[_22397] + _22233 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015 > -1 / mem[_22397] + _22233:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22397] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015) + (_22233 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22190 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22235 = mem[_22190]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22398 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22398] > !_22235:
                                                    revert with 0, 17
                                                if mem[_22398] + _22235 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015 > -1 / mem[_22398] + _22235:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22398] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015) + (_22235 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22015) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12497 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12497]:
                                            revert with 0, 50
                                        mem[_12497 + 32] = token1Address
                                        if 1 >= mem[_12497]:
                                            revert with 0, 50
                                        mem[_12497 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12497 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12497 + 100] = 10^stor259
                                        mem[_12497 + 132] = 64
                                        mem[_12497 + 164] = mem[_12497]
                                        idx = 0
                                        u = _12497 + 32
                                        v = _12497 + 196
                                        while idx < mem[_12497]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12497 + (32 * mem[_12497]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16035 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16068 = mem[_16035]
                                        require mem[_16035] <= test266151307()
                                        require _16035 + mem[_16035] + 31 < _16035 + return_data.size
                                        _16092 = mem[_16035 + mem[_16035]]
                                        if mem[_16035 + mem[_16035]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16035 + mem[_16035]]) + 1 < 0 or _16035 + ceil32(return_data.size) + ceil32(32 * mem[_16035 + mem[_16035]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16035 + ceil32(return_data.size) + ceil32(32 * mem[_16035 + mem[_16035]]) + 1
                                        mem[_16035 + ceil32(return_data.size)] = _16092
                                        require _16068 + (32 * _16092) + 32 <= return_data.size
                                        mem[_16035 + ceil32(return_data.size) + 32 len ceil32(32 * _16092)] = mem[_16035 + _16068 + 32 len ceil32(32 * _16092)]
                                        var115002 = _16035 + ceil32(return_data.size) + ceil32(32 * _16092) + 32
                                        if 1 >= _16092:
                                            revert with 0, 50
                                        _19308 = mem[_16035 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19526 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19540 = mem[_19526]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19526]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19853 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19911 = mem[_19853]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20124 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20124] > !_19911:
                                                    revert with 0, 17
                                                if mem[_20124] + _19911 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540 > -1 / mem[_20124] + _19911:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20124] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540) + (_19911 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19854 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19913 = mem[_19854]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20125 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20125] > !_19913:
                                                    revert with 0, 17
                                                if mem[_20125] + _19913 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540 > -1 / mem[_20125] + _19913:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20125] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540) + (_19913 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19540) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19583 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19614 = mem[_19583]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19583]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20094 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20182 = mem[_20094]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20418 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20418] > !_20182:
                                                        revert with 0, 17
                                                    if mem[_20418] + _20182 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614 > -1 / mem[_20418] + _20182:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20418] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614) + (_20182 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20095 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20184 = mem[_20095]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20419 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20419] > !_20184:
                                                        revert with 0, 17
                                                    if mem[_20419] + _20184 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614 > -1 / mem[_20419] + _20184:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20419] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614) + (_20184 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19614) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21994 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22014 = mem[_21994]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21994]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22187 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22229 = mem[_22187]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22395 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22395] > !_22229:
                                                        revert with 0, 17
                                                    if mem[_22395] + _22229 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014 > -1 / mem[_22395] + _22229:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22395] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014) + (_22229 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22188 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22231 = mem[_22188]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22396 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22396] > !_22231:
                                                        revert with 0, 17
                                                    if mem[_22396] + _22231 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014 > -1 / mem[_22396] + _22231:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22396] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014) + (_22231 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22014) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _16055 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16055]:
                                            revert with 0, 50
                                        mem[_16055 + 32] = token1Address
                                        if 1 >= mem[_16055]:
                                            revert with 0, 50
                                        mem[_16055 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16055 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16055 + 100] = u * v
                                        mem[_16055 + 132] = 64
                                        mem[_16055 + 164] = mem[_16055]
                                        idx = 0
                                        u = _16055 + 32
                                        v = _16055 + 196
                                        while idx < mem[_16055]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16055 + (32 * mem[_16055]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19344 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19362 = mem[_19344]
                                        require mem[_19344] <= test266151307()
                                        require _19344 + mem[_19344] + 31 < _19344 + return_data.size
                                        _19378 = mem[_19344 + mem[_19344]]
                                        if mem[_19344 + mem[_19344]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19344 + mem[_19344]]) + 1 < 0 or _19344 + ceil32(return_data.size) + ceil32(32 * mem[_19344 + mem[_19344]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19344 + ceil32(return_data.size) + ceil32(32 * mem[_19344 + mem[_19344]]) + 1
                                        mem[_19344 + ceil32(return_data.size)] = _19378
                                        require _19362 + (32 * _19378) + 32 <= return_data.size
                                        mem[_19344 + ceil32(return_data.size) + 32 len ceil32(32 * _19378)] = mem[_19344 + _19362 + 32 len ceil32(32 * _19378)]
                                        if 1 >= _19378:
                                            revert with 0, 50
                                        _21921 = mem[_19344 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19344 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19344 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22047 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22057 = mem[_22047]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21921) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22047]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22372 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22429 = mem[_22372]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22603 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22603] > !_22429:
                                                    revert with 0, 17
                                                if mem[_22603] + _22429 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057 > -1 / mem[_22603] + _22429:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22603] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057) + (_22429 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22373 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22431 = mem[_22373]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22604 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22604] > !_22431:
                                                    revert with 0, 17
                                                if mem[_22604] + _22431 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057 > -1 / mem[_22604] + _22431:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22604] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057) + (_22431 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921) / _22057) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19344 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19344 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22089 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22126 = mem[_22089]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22089]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22580 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22653 = mem[_22580]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22828 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22828] > !_22653:
                                                        revert with 0, 17
                                                    if mem[_22828] + _22653 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126 > -1 / mem[_22828] + _22653:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22828] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126) + (_22653 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22581 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22655 = mem[_22581]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22829 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22829] > !_22655:
                                                        revert with 0, 17
                                                    if mem[_22829] + _22655 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126 > -1 / mem[_22829] + _22655:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22829] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126) + (_22655 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / 10^stor259) / _22126) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19344 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19344 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23585 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23596 = mem[_23585]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23585]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23703 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23736 = mem[_23703]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23843 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23843] > !_23736:
                                                        revert with 0, 17
                                                    if mem[_23843] + _23736 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596 > -1 / mem[_23843] + _23736:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23843] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596) + (_23736 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23704 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23738 = mem[_23704]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23844 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23844] > !_23738:
                                                        revert with 0, 17
                                                    if mem[_23844] + _23738 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596 > -1 / mem[_23844] + _23738:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23844] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596) + (_23738 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21921 / u * v) / _23596) / 10^18
                            else:
                                _12345 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12345]:
                                    revert with 0, 50
                                mem[_12345 + 32] = token1Address
                                if 1 >= mem[_12345]:
                                    revert with 0, 50
                                mem[_12345 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12345 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12345 + 100] = 10^18
                                mem[_12345 + 132] = 64
                                mem[_12345 + 164] = mem[_12345]
                                idx = 0
                                u = _12345 + 32
                                v = _12345 + 196
                                while idx < mem[_12345]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12345 + (32 * mem[_12345]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16037 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16070 = mem[_16037]
                                require mem[_16037] <= test266151307()
                                require _16037 + mem[_16037] + 31 < _16037 + return_data.size
                                _16094 = mem[_16037 + mem[_16037]]
                                if mem[_16037 + mem[_16037]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16037 + mem[_16037]]) + 1 < 0 or _16037 + ceil32(return_data.size) + ceil32(32 * mem[_16037 + mem[_16037]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16037 + ceil32(return_data.size) + ceil32(32 * mem[_16037 + mem[_16037]]) + 1
                                mem[_16037 + ceil32(return_data.size)] = _16094
                                require _16070 + (32 * _16094) + 32 <= return_data.size
                                mem[_16037 + ceil32(return_data.size) + 32 len ceil32(32 * _16094)] = mem[_16037 + _16070 + 32 len ceil32(32 * _16094)]
                                var104002 = _16037 + ceil32(return_data.size) + ceil32(32 * _16094) + 32
                                if 1 >= _16094:
                                    revert with 0, 50
                                _19310 = mem[_16037 + ceil32(return_data.size) + 64]
                                _19331 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_19331]:
                                    revert with 0, 50
                                mem[_19331 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_19331]:
                                    revert with 0, 50
                                mem[_19331 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_19331 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_19331 + 100] = _19310
                                mem[_19331 + 132] = 64
                                mem[_19331 + 164] = mem[_19331]
                                idx = 0
                                u = _19331 + 32
                                v = _19331 + 196
                                while idx < mem[_19331]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _19331 + (32 * mem[_19331]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21935 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21941 = mem[_21935]
                                require mem[_21935] <= test266151307()
                                require _21935 + mem[_21935] + 31 < _21935 + return_data.size
                                _21947 = mem[_21935 + mem[_21935]]
                                if mem[_21935 + mem[_21935]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21935 + mem[_21935]]) + 1 < 0 or _21935 + ceil32(return_data.size) + ceil32(32 * mem[_21935 + mem[_21935]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21935 + ceil32(return_data.size) + ceil32(32 * mem[_21935 + mem[_21935]]) + 1
                                mem[_21935 + ceil32(return_data.size)] = _21947
                                require _21941 + (32 * _21947) + 32 <= return_data.size
                                mem[_21935 + ceil32(return_data.size) + 32 len ceil32(32 * _21947)] = mem[_21935 + _21941 + 32 len ceil32(32 * _21947)]
                                if 1 >= _21947:
                                    revert with 0, 50
                                _23553 = mem[_21935 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21935 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21935 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23615 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23620 = mem[_23615]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23553) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23615]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23830 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23867 = mem[_23830]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23955 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23955] > !_23867:
                                            revert with 0, 17
                                        if mem[_23955] + _23867 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620 > -1 / mem[_23955] + _23867:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23955] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620) + (_23867 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23831 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23869 = mem[_23831]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23956 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23956] > !_23869:
                                            revert with 0, 17
                                        if mem[_23956] + _23869 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620 > -1 / mem[_23956] + _23869:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23956] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620) + (_23869 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553) / _23620) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21935 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21935 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23635 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23668 = mem[_23635]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23635]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23944 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23987 = mem[_23944]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24065 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24065] > !_23987:
                                                revert with 0, 17
                                            if mem[_24065] + _23987 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668 > -1 / mem[_24065] + _23987:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24065] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668) + (_23987 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23945 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23989 = mem[_23945]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24066 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24066] > !_23989:
                                                revert with 0, 17
                                            if mem[_24066] + _23989 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668 > -1 / mem[_24066] + _23989:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24066] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668) + (_23989 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / 10^stor259) / _23668) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21935 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21935 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24306 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24311 = mem[_24306]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24306]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24350 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24367 = mem[_24350]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24407 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24407] > !_24367:
                                                revert with 0, 17
                                            if mem[_24407] + _24367 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311 > -1 / mem[_24407] + _24367:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24407] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311) + (_24367 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24351 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24369 = mem[_24351]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24408 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24408] > !_24369:
                                                revert with 0, 17
                                            if mem[_24408] + _24369 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311 > -1 / mem[_24408] + _24369:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24408] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311) + (_24369 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8229 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23553 / u * v) / _24311) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _8240 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _8243 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _8240 + (32 * _8243) + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _8243)] = mem[ceil32(return_data.size) + _8240 + 224 len ceil32(32 * _8243)]
                    if 1 >= _8243:
                        revert with 0, 50
                    _12254 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12483 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12483]:
                                    revert with 0, 50
                                mem[_12483 + 32] = token1Address
                                if 1 >= mem[_12483]:
                                    revert with 0, 50
                                mem[_12483 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12483 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12483 + 100] = 1
                                mem[_12483 + 132] = 64
                                mem[_12483 + 164] = mem[_12483]
                                idx = 0
                                s = _12483 + 32
                                t = _12483 + 196
                                while idx < mem[_12483]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12483 + (32 * mem[_12483]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16031 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16065 = mem[_16031]
                                require mem[_16031] <= test266151307()
                                require _16031 + mem[_16031] + 31 < _16031 + return_data.size
                                _16089 = mem[_16031 + mem[_16031]]
                                if mem[_16031 + mem[_16031]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16031 + mem[_16031]]) + 1 < 0 or _16031 + ceil32(return_data.size) + ceil32(32 * mem[_16031 + mem[_16031]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16031 + ceil32(return_data.size) + ceil32(32 * mem[_16031 + mem[_16031]]) + 1
                                mem[_16031 + ceil32(return_data.size)] = _16089
                                require _16065 + (32 * _16089) + 32 <= return_data.size
                                mem[_16031 + ceil32(return_data.size) + 32 len ceil32(32 * _16089)] = mem[_16031 + _16065 + 32 len ceil32(32 * _16089)]
                                if 1 >= _16089:
                                    revert with 0, 50
                                _19303 = mem[_16031 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16031 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16031 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19525 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19539 = mem[_19525]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19303) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19525]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19851 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19907 = mem[_19851]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20121 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20121] > !_19907:
                                            revert with 0, 17
                                        if mem[_20121] + _19907 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539 > -1 / mem[_20121] + _19907:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20121] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539) + (_19907 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19852 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19909 = mem[_19852]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20122 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20122] > !_19909:
                                            revert with 0, 17
                                        if mem[_20122] + _19909 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539 > -1 / mem[_20122] + _19909:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20122] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539) + (_19909 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19539) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16031 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16031 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19581 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19611 = mem[_19581]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19581]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20092 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20174 = mem[_20092]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20411 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20411] > !_20174:
                                                revert with 0, 17
                                            if mem[_20411] + _20174 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611 > -1 / mem[_20411] + _20174:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20411] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611) + (_20174 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20093 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20176 = mem[_20093]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20412 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20412] > !_20176:
                                                revert with 0, 17
                                            if mem[_20412] + _20176 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611 > -1 / mem[_20412] + _20176:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20412] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611) + (_20176 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19611) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16031 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16031 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21992 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22013 = mem[_21992]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21992]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22184 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22224 = mem[_22184]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22392 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22392] > !_22224:
                                                revert with 0, 17
                                            if mem[_22392] + _22224 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013 > -1 / mem[_22392] + _22224:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22392] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013) + (_22224 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22185 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22226 = mem[_22185]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22393 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22393] > !_22226:
                                                revert with 0, 17
                                            if mem[_22393] + _22226 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013 > -1 / mem[_22393] + _22226:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22393] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013) + (_22226 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22013) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12544 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12544]:
                                        revert with 0, 50
                                    mem[_12544 + 32] = token1Address
                                    if 1 >= mem[_12544]:
                                        revert with 0, 50
                                    mem[_12544 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12544 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12544 + 100] = 10^stor259
                                    mem[_12544 + 132] = 64
                                    mem[_12544 + 164] = mem[_12544]
                                    idx = 0
                                    s = _12544 + 32
                                    t = _12544 + 196
                                    while idx < mem[_12544]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12544 + (32 * mem[_12544]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16030 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16064 = mem[_16030]
                                    require mem[_16030] <= test266151307()
                                    require _16030 + mem[_16030] + 31 < _16030 + return_data.size
                                    _16088 = mem[_16030 + mem[_16030]]
                                    if mem[_16030 + mem[_16030]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16030 + mem[_16030]]) + 1 < 0 or _16030 + ceil32(return_data.size) + ceil32(32 * mem[_16030 + mem[_16030]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16030 + ceil32(return_data.size) + ceil32(32 * mem[_16030 + mem[_16030]]) + 1
                                    mem[_16030 + ceil32(return_data.size)] = _16088
                                    require _16064 + (32 * _16088) + 32 <= return_data.size
                                    mem[_16030 + ceil32(return_data.size) + 32 len ceil32(32 * _16088)] = mem[_16030 + _16064 + 32 len ceil32(32 * _16088)]
                                    var110002 = _16030 + ceil32(return_data.size) + ceil32(32 * _16088) + 32
                                    if 1 >= _16088:
                                        revert with 0, 50
                                    _19302 = mem[_16030 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19524 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19538 = mem[_19524]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19302) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19524]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19849 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19903 = mem[_19849]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20119 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20119] > !_19903:
                                                revert with 0, 17
                                            if mem[_20119] + _19903 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538 > -1 / mem[_20119] + _19903:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20119] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538) + (_19903 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19850 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19905 = mem[_19850]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20120 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20120] > !_19905:
                                                revert with 0, 17
                                            if mem[_20120] + _19905 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538 > -1 / mem[_20120] + _19905:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20120] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538) + (_19905 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302) / _19538) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19580 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19608 = mem[_19580]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19580]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20090 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20166 = mem[_20090]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20405 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20405] > !_20166:
                                                    revert with 0, 17
                                                if mem[_20405] + _20166 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608 > -1 / mem[_20405] + _20166:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20405] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608) + (_20166 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20091 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20168 = mem[_20091]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20406 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20406] > !_20168:
                                                    revert with 0, 17
                                                if mem[_20406] + _20168 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608 > -1 / mem[_20406] + _20168:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20406] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608) + (_20168 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / 10^stor259) / _19608) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21991 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22012 = mem[_21991]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21991]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22182 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22220 = mem[_22182]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22390 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22390] > !_22220:
                                                    revert with 0, 17
                                                if mem[_22390] + _22220 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012 > -1 / mem[_22390] + _22220:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22390] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012) + (_22220 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22183 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22222 = mem[_22183]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22391 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22391] > !_22222:
                                                    revert with 0, 17
                                                if mem[_22391] + _22222 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012 > -1 / mem[_22391] + _22222:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22391] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012) + (_22222 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19302 / s * t) / _22012) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _16053 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16053]:
                                        revert with 0, 50
                                    mem[_16053 + 32] = token1Address
                                    if 1 >= mem[_16053]:
                                        revert with 0, 50
                                    mem[_16053 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16053 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16053 + 100] = s * t
                                    mem[_16053 + 132] = 64
                                    mem[_16053 + 164] = mem[_16053]
                                    idx = 0
                                    s = _16053 + 32
                                    t = _16053 + 196
                                    while idx < mem[_16053]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16053 + (32 * mem[_16053]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19342 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19360 = mem[_19342]
                                    require mem[_19342] <= test266151307()
                                    require _19342 + mem[_19342] + 31 < _19342 + return_data.size
                                    _19376 = mem[_19342 + mem[_19342]]
                                    if mem[_19342 + mem[_19342]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19342 + mem[_19342]]) + 1 < 0 or _19342 + ceil32(return_data.size) + ceil32(32 * mem[_19342 + mem[_19342]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19342 + ceil32(return_data.size) + ceil32(32 * mem[_19342 + mem[_19342]]) + 1
                                    mem[_19342 + ceil32(return_data.size)] = _19376
                                    require _19360 + (32 * _19376) + 32 <= return_data.size
                                    mem[_19342 + ceil32(return_data.size) + 32 len ceil32(32 * _19376)] = mem[_19342 + _19360 + 32 len ceil32(32 * _19376)]
                                    var115002 = _19342 + ceil32(return_data.size) + ceil32(32 * _19376) + 32
                                    if 1 >= _19376:
                                        revert with 0, 50
                                    _21919 = mem[_19342 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19342 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19342 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22046 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22056 = mem[_22046]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _21919) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22046]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22370 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22425 = mem[_22370]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22600 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22600] > !_22425:
                                                revert with 0, 17
                                            if mem[_22600] + _22425 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056 > -1 / mem[_22600] + _22425:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22600] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056) + (_22425 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22371 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22427 = mem[_22371]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22601 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22601] > !_22427:
                                                revert with 0, 17
                                            if mem[_22601] + _22427 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056 > -1 / mem[_22601] + _22427:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22601] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056) + (_22427 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919) / _22056) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19342 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19342 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22088 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22115 = mem[_22088]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22088]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22578 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22645 = mem[_22578]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22822 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22822] > !_22645:
                                                    revert with 0, 17
                                                if mem[_22822] + _22645 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115 > -1 / mem[_22822] + _22645:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22822] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115) + (_22645 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22579 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22647 = mem[_22579]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22823 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22823] > !_22647:
                                                    revert with 0, 17
                                                if mem[_22823] + _22647 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115 > -1 / mem[_22823] + _22647:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22823] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115) + (_22647 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / 10^stor259) / _22115) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19342 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19342 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23584 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23595 = mem[_23584]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23584]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23700 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23731 = mem[_23700]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23841 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23841] > !_23731:
                                                    revert with 0, 17
                                                if mem[_23841] + _23731 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595 > -1 / mem[_23841] + _23731:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23841] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595) + (_23731 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23701 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23733 = mem[_23701]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23842 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23842] > !_23733:
                                                    revert with 0, 17
                                                if mem[_23842] + _23733 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595 > -1 / mem[_23842] + _23733:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23842] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595) + (_23733 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21919 / s * t) / _23595) / 10^18
                        else:
                            _12381 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12381]:
                                revert with 0, 50
                            mem[_12381 + 32] = token1Address
                            if 1 >= mem[_12381]:
                                revert with 0, 50
                            mem[_12381 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12381 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12381 + 100] = 10^18
                            mem[_12381 + 132] = 64
                            mem[_12381 + 164] = mem[_12381]
                            idx = 0
                            s = _12381 + 32
                            t = _12381 + 196
                            while idx < mem[_12381]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12381 + (32 * mem[_12381]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16032 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16066 = mem[_16032]
                            require mem[_16032] <= test266151307()
                            require _16032 + mem[_16032] + 31 < _16032 + return_data.size
                            _16090 = mem[_16032 + mem[_16032]]
                            if mem[_16032 + mem[_16032]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16032 + mem[_16032]]) + 1 < 0 or _16032 + ceil32(return_data.size) + ceil32(32 * mem[_16032 + mem[_16032]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16032 + ceil32(return_data.size) + ceil32(32 * mem[_16032 + mem[_16032]]) + 1
                            mem[_16032 + ceil32(return_data.size)] = _16090
                            require _16066 + (32 * _16090) + 32 <= return_data.size
                            mem[_16032 + ceil32(return_data.size) + 32 len ceil32(32 * _16090)] = mem[_16032 + _16066 + 32 len ceil32(32 * _16090)]
                            var99002 = _16032 + ceil32(return_data.size) + ceil32(32 * _16090) + 32
                            var99005 = _16032 + _16066 + ceil32(32 * _16090) + 32
                            if 1 >= _16090:
                                revert with 0, 50
                            _19304 = mem[_16032 + ceil32(return_data.size) + 64]
                            _19329 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_19329]:
                                revert with 0, 50
                            mem[_19329 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_19329]:
                                revert with 0, 50
                            mem[_19329 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_19329 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_19329 + 100] = _19304
                            mem[_19329 + 132] = 64
                            mem[_19329 + 164] = mem[_19329]
                            idx = 0
                            s = _19329 + 32
                            t = _19329 + 196
                            while idx < mem[_19329]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _19329 + (32 * mem[_19329]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21934 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21940 = mem[_21934]
                            require mem[_21934] <= test266151307()
                            require _21934 + mem[_21934] + 31 < _21934 + return_data.size
                            _21946 = mem[_21934 + mem[_21934]]
                            if mem[_21934 + mem[_21934]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21934 + mem[_21934]]) + 1 < 0 or _21934 + ceil32(return_data.size) + ceil32(32 * mem[_21934 + mem[_21934]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21934 + ceil32(return_data.size) + ceil32(32 * mem[_21934 + mem[_21934]]) + 1
                            mem[_21934 + ceil32(return_data.size)] = _21946
                            require _21940 + (32 * _21946) + 32 <= return_data.size
                            mem[_21934 + ceil32(return_data.size) + 32 len ceil32(32 * _21946)] = mem[_21934 + _21940 + 32 len ceil32(32 * _21946)]
                            if 1 >= _21946:
                                revert with 0, 50
                            _23552 = mem[_21934 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21934 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21934 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23614 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23619 = mem[_23614]
                                if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _23552) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23614]:
                                    revert with 0, 18
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23828 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23863 = mem[_23828]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23953 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23953] > !_23863:
                                        revert with 0, 17
                                    if mem[_23953] + _23863 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619 > -1 / mem[_23953] + _23863:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23953] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619) + (_23863 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23829 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23865 = mem[_23829]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23954 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23954] > !_23865:
                                        revert with 0, 17
                                    if mem[_23954] + _23865 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619 > -1 / mem[_23954] + _23865:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23954] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619) + (_23865 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552) / _23619) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21934 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21934 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23634 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23661 = mem[_23634]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23634]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23942 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23979 = mem[_23942]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24059 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24059] > !_23979:
                                            revert with 0, 17
                                        if mem[_24059] + _23979 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661 > -1 / mem[_24059] + _23979:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24059] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661) + (_23979 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23943 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23981 = mem[_23943]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24060 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24060] > !_23981:
                                            revert with 0, 17
                                        if mem[_24060] + _23981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661 > -1 / mem[_24060] + _23981:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24060] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661) + (_23981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / 10^stor259) / _23661) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21934 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _12254 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21934 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24305 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24310 = mem[_24305]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12254) + (Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24305]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24363 = mem[_24348]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24405 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24405] > !_24363:
                                            revert with 0, 17
                                        if mem[_24405] + _24363 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310 > -1 / mem[_24405] + _24363:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24405] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310) + (_24363 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24365 = mem[_24349]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24406 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24406] > !_24365:
                                            revert with 0, 17
                                        if mem[_24406] + _24365 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310 > -1 / mem[_24406] + _24365:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24406] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310) + (_24365 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23552 / s * t) / _24310) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12542 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12542]:
                                        revert with 0, 50
                                    mem[_12542 + 32] = token1Address
                                    if 1 >= mem[_12542]:
                                        revert with 0, 50
                                    mem[_12542 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12542 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12542 + 100] = 1
                                    mem[_12542 + 132] = 64
                                    mem[_12542 + 164] = mem[_12542]
                                    idx = 0
                                    s = _12542 + 32
                                    t = _12542 + 196
                                    while idx < mem[_12542]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12542 + (32 * mem[_12542]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16026 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16061 = mem[_16026]
                                    require mem[_16026] <= test266151307()
                                    require _16026 + mem[_16026] + 31 < _16026 + return_data.size
                                    _16085 = mem[_16026 + mem[_16026]]
                                    if mem[_16026 + mem[_16026]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16026 + mem[_16026]]) + 1 < 0 or _16026 + ceil32(return_data.size) + ceil32(32 * mem[_16026 + mem[_16026]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16026 + ceil32(return_data.size) + ceil32(32 * mem[_16026 + mem[_16026]]) + 1
                                    mem[_16026 + ceil32(return_data.size)] = _16085
                                    require _16061 + (32 * _16085) + 32 <= return_data.size
                                    mem[_16026 + ceil32(return_data.size) + 32 len ceil32(32 * _16085)] = mem[_16026 + _16061 + 32 len ceil32(32 * _16085)]
                                    var110002 = _16026 + ceil32(return_data.size) + ceil32(32 * _16085) + 32
                                    if 1 >= _16085:
                                        revert with 0, 50
                                    _19297 = mem[_16026 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19523 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19537 = mem[_19523]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19297) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19523]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19847 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19899 = mem[_19847]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20116 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20116] > !_19899:
                                                revert with 0, 17
                                            if mem[_20116] + _19899 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537 > -1 / mem[_20116] + _19899:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20116] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537) + (_19899 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19848 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19901 = mem[_19848]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20117 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20117] > !_19901:
                                                revert with 0, 17
                                            if mem[_20117] + _19901 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537 > -1 / mem[_20117] + _19901:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20117] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537) + (_19901 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297) / _19537) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19578 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19605 = mem[_19578]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19578]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20088 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20158 = mem[_20088]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20398 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20398] > !_20158:
                                                    revert with 0, 17
                                                if mem[_20398] + _20158 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605 > -1 / mem[_20398] + _20158:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20398] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605) + (_20158 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20089 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20160 = mem[_20089]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20399 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20399] > !_20160:
                                                    revert with 0, 17
                                                if mem[_20399] + _20160 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605 > -1 / mem[_20399] + _20160:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20399] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605) + (_20160 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / 10^stor259) / _19605) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21989 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22011 = mem[_21989]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21989]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22179 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22215 = mem[_22179]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22387 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22387] > !_22215:
                                                    revert with 0, 17
                                                if mem[_22387] + _22215 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011 > -1 / mem[_22387] + _22215:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22387] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011) + (_22215 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22180 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22217 = mem[_22180]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22388 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22388] > !_22217:
                                                    revert with 0, 17
                                                if mem[_22388] + _22217 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011 > -1 / mem[_22388] + _22217:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22388] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011) + (_22217 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19297 / s * t) / _22011) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12652 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12652]:
                                            revert with 0, 50
                                        mem[_12652 + 32] = token1Address
                                        if 1 >= mem[_12652]:
                                            revert with 0, 50
                                        mem[_12652 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12652 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12652 + 100] = 10^stor259
                                        mem[_12652 + 132] = 64
                                        mem[_12652 + 164] = mem[_12652]
                                        idx = 0
                                        s = _12652 + 32
                                        t = _12652 + 196
                                        while idx < mem[_12652]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12652 + (32 * mem[_12652]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16025 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16060 = mem[_16025]
                                        require mem[_16025] <= test266151307()
                                        require _16025 + mem[_16025] + 31 < _16025 + return_data.size
                                        _16084 = mem[_16025 + mem[_16025]]
                                        if mem[_16025 + mem[_16025]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16025 + mem[_16025]]) + 1 < 0 or _16025 + ceil32(return_data.size) + ceil32(32 * mem[_16025 + mem[_16025]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16025 + ceil32(return_data.size) + ceil32(32 * mem[_16025 + mem[_16025]]) + 1
                                        mem[_16025 + ceil32(return_data.size)] = _16084
                                        require _16060 + (32 * _16084) + 32 <= return_data.size
                                        mem[_16025 + ceil32(return_data.size) + 32 len ceil32(32 * _16084)] = mem[_16025 + _16060 + 32 len ceil32(32 * _16084)]
                                        var115002 = _16025 + ceil32(return_data.size) + ceil32(32 * _16084) + 32
                                        if 1 >= _16084:
                                            revert with 0, 50
                                        _19296 = mem[_16025 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19522 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19536 = mem[_19522]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19296) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19522]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19845 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19895 = mem[_19845]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20114 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20114] > !_19895:
                                                    revert with 0, 17
                                                if mem[_20114] + _19895 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536 > -1 / mem[_20114] + _19895:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20114] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536) + (_19895 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19846 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19897 = mem[_19846]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20115 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20115] > !_19897:
                                                    revert with 0, 17
                                                if mem[_20115] + _19897 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536 > -1 / mem[_20115] + _19897:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20115] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536) + (_19897 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296) / _19536) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19577 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19602 = mem[_19577]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19577]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20086 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20150 = mem[_20086]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20392 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20392] > !_20150:
                                                        revert with 0, 17
                                                    if mem[_20392] + _20150 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602 > -1 / mem[_20392] + _20150:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20392] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602) + (_20150 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20087 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20152 = mem[_20087]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20393 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20393] > !_20152:
                                                        revert with 0, 17
                                                    if mem[_20393] + _20152 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602 > -1 / mem[_20393] + _20152:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20393] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602) + (_20152 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / 10^stor259) / _19602) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21988 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22010 = mem[_21988]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21988]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22177 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22211 = mem[_22177]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22385 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22385] > !_22211:
                                                        revert with 0, 17
                                                    if mem[_22385] + _22211 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010 > -1 / mem[_22385] + _22211:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22385] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010) + (_22211 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22178 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22213 = mem[_22178]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22386 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22386] > !_22213:
                                                        revert with 0, 17
                                                    if mem[_22386] + _22213 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010 > -1 / mem[_22386] + _22213:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22386] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010) + (_22213 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19296 / s * t) / _22010) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _16051 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16051]:
                                            revert with 0, 50
                                        mem[_16051 + 32] = token1Address
                                        if 1 >= mem[_16051]:
                                            revert with 0, 50
                                        mem[_16051 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16051 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16051 + 100] = s * t
                                        mem[_16051 + 132] = 64
                                        mem[_16051 + 164] = mem[_16051]
                                        idx = 0
                                        s = _16051 + 32
                                        t = _16051 + 196
                                        while idx < mem[_16051]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16051 + (32 * mem[_16051]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19340 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19358 = mem[_19340]
                                        require mem[_19340] <= test266151307()
                                        require _19340 + mem[_19340] + 31 < _19340 + return_data.size
                                        _19374 = mem[_19340 + mem[_19340]]
                                        if mem[_19340 + mem[_19340]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19340 + mem[_19340]]) + 1 < 0 or _19340 + ceil32(return_data.size) + ceil32(32 * mem[_19340 + mem[_19340]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19340 + ceil32(return_data.size) + ceil32(32 * mem[_19340 + mem[_19340]]) + 1
                                        mem[_19340 + ceil32(return_data.size)] = _19374
                                        require _19358 + (32 * _19374) + 32 <= return_data.size
                                        mem[_19340 + ceil32(return_data.size) + 32 len ceil32(32 * _19374)] = mem[_19340 + _19358 + 32 len ceil32(32 * _19374)]
                                        var120002 = _19340 + ceil32(return_data.size) + ceil32(32 * _19374) + 32
                                        if 1 >= _19374:
                                            revert with 0, 50
                                        _21917 = mem[_19340 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22045 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22055 = mem[_22045]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22045]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22368 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22421 = mem[_22368]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22597 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22597] > !_22421:
                                                    revert with 0, 17
                                                if mem[_22597] + _22421 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055 > -1 / mem[_22597] + _22421:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22597] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055) + (_22421 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22369 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22423 = mem[_22369]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22598 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22598] > !_22423:
                                                    revert with 0, 17
                                                if mem[_22598] + _22423 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055 > -1 / mem[_22598] + _22423:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22598] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055) + (_22423 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22055) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22087 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22104 = mem[_22087]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22087]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22576 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22637 = mem[_22576]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22816 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22816] > !_22637:
                                                        revert with 0, 17
                                                    if mem[_22816] + _22637 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104 > -1 / mem[_22816] + _22637:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22816] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104) + (_22637 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22577 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22639 = mem[_22577]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22817 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22817] > !_22639:
                                                        revert with 0, 17
                                                    if mem[_22817] + _22639 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104 > -1 / mem[_22817] + _22639:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22817] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104) + (_22639 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22104) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23583 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23594 = mem[_23583]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23583]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23697 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23726 = mem[_23697]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23839 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23839] > !_23726:
                                                        revert with 0, 17
                                                    if mem[_23839] + _23726 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594 > -1 / mem[_23839] + _23726:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23839] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594) + (_23726 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23698 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23728 = mem[_23698]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23840 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23840] > !_23728:
                                                        revert with 0, 17
                                                    if mem[_23840] + _23728 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594 > -1 / mem[_23840] + _23728:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594) + (_23728 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23594) / 10^18
                            else:
                                _12469 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12469]:
                                    revert with 0, 50
                                mem[_12469 + 32] = token1Address
                                if 1 >= mem[_12469]:
                                    revert with 0, 50
                                mem[_12469 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12469 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12469 + 100] = 10^18
                                mem[_12469 + 132] = 64
                                mem[_12469 + 164] = mem[_12469]
                                idx = 0
                                s = _12469 + 32
                                t = _12469 + 196
                                while idx < mem[_12469]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12469 + (32 * mem[_12469]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16027 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16062 = mem[_16027]
                                require mem[_16027] <= test266151307()
                                require _16027 + mem[_16027] + 31 < _16027 + return_data.size
                                _16086 = mem[_16027 + mem[_16027]]
                                if mem[_16027 + mem[_16027]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16027 + mem[_16027]]) + 1 < 0 or _16027 + ceil32(return_data.size) + ceil32(32 * mem[_16027 + mem[_16027]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16027 + ceil32(return_data.size) + ceil32(32 * mem[_16027 + mem[_16027]]) + 1
                                mem[_16027 + ceil32(return_data.size)] = _16086
                                require _16062 + (32 * _16086) + 32 <= return_data.size
                                mem[_16027 + ceil32(return_data.size) + 32 len ceil32(32 * _16086)] = mem[_16027 + _16062 + 32 len ceil32(32 * _16086)]
                                var104002 = _16027 + ceil32(return_data.size) + ceil32(32 * _16086) + 32
                                if 1 >= _16086:
                                    revert with 0, 50
                                _19298 = mem[_16027 + ceil32(return_data.size) + 64]
                                _19327 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_19327]:
                                    revert with 0, 50
                                mem[_19327 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_19327]:
                                    revert with 0, 50
                                mem[_19327 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_19327 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_19327 + 100] = _19298
                                mem[_19327 + 132] = 64
                                mem[_19327 + 164] = mem[_19327]
                                idx = 0
                                s = _19327 + 32
                                t = _19327 + 196
                                while idx < mem[_19327]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _19327 + (32 * mem[_19327]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21933 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21939 = mem[_21933]
                                require mem[_21933] <= test266151307()
                                require _21933 + mem[_21933] + 31 < _21933 + return_data.size
                                _21945 = mem[_21933 + mem[_21933]]
                                if mem[_21933 + mem[_21933]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21933 + mem[_21933]]) + 1 < 0 or _21933 + ceil32(return_data.size) + ceil32(32 * mem[_21933 + mem[_21933]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21933 + ceil32(return_data.size) + ceil32(32 * mem[_21933 + mem[_21933]]) + 1
                                mem[_21933 + ceil32(return_data.size)] = _21945
                                require _21939 + (32 * _21945) + 32 <= return_data.size
                                mem[_21933 + ceil32(return_data.size) + 32 len ceil32(32 * _21945)] = mem[_21933 + _21939 + 32 len ceil32(32 * _21945)]
                                if 1 >= _21945:
                                    revert with 0, 50
                                _23551 = mem[_21933 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21933 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21933 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23613 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23618 = mem[_23613]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23551) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23613]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23826 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23859 = mem[_23826]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23951 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23951] > !_23859:
                                            revert with 0, 17
                                        if mem[_23951] + _23859 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618 > -1 / mem[_23951] + _23859:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23951] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618) + (_23859 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23827 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23861 = mem[_23827]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23952 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23952] > !_23861:
                                            revert with 0, 17
                                        if mem[_23952] + _23861 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618 > -1 / mem[_23952] + _23861:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23952] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618) + (_23861 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551) / _23618) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21933 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21933 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23633 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23654 = mem[_23633]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23633]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23940 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23971 = mem[_23940]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24053 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24053] > !_23971:
                                                revert with 0, 17
                                            if mem[_24053] + _23971 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654 > -1 / mem[_24053] + _23971:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24053] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654) + (_23971 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23941 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23973 = mem[_23941]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24054 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24054] > !_23973:
                                                revert with 0, 17
                                            if mem[_24054] + _23973 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654 > -1 / mem[_24054] + _23973:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24054] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654) + (_23973 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / 10^stor259) / _23654) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21933 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21933 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24304 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24309 = mem[_24304]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24304]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24346 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24359 = mem[_24346]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24403 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24403] > !_24359:
                                                revert with 0, 17
                                            if mem[_24403] + _24359 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309 > -1 / mem[_24403] + _24359:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24403] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309) + (_24359 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24347 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24361 = mem[_24347]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24404 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24404] > !_24361:
                                                revert with 0, 17
                                            if mem[_24404] + _24361 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309 > -1 / mem[_24404] + _24361:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24404] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309) + (_24361 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23551 / s * t) / _24309) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _16224 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16224]:
                                        revert with 0, 50
                                    mem[_16224 + 32] = token1Address
                                    if 1 >= mem[_16224]:
                                        revert with 0, 50
                                    mem[_16224 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16224 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16224 + 100] = 1
                                    mem[_16224 + 132] = 64
                                    mem[_16224 + 164] = mem[_16224]
                                    idx = 0
                                    u = _16224 + 32
                                    v = _16224 + 196
                                    while idx < mem[_16224]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16224 + (32 * mem[_16224]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19338 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19356 = mem[_19338]
                                    require mem[_19338] <= test266151307()
                                    require _19338 + mem[_19338] + 31 < _19338 + return_data.size
                                    _19372 = mem[_19338 + mem[_19338]]
                                    if mem[_19338 + mem[_19338]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19338 + mem[_19338]]) + 1 < 0 or _19338 + ceil32(return_data.size) + ceil32(32 * mem[_19338 + mem[_19338]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19338 + ceil32(return_data.size) + ceil32(32 * mem[_19338 + mem[_19338]]) + 1
                                    mem[_19338 + ceil32(return_data.size)] = _19372
                                    require _19356 + (32 * _19372) + 32 <= return_data.size
                                    mem[_19338 + ceil32(return_data.size) + 32 len ceil32(32 * _19372)] = mem[_19338 + _19356 + 32 len ceil32(32 * _19372)]
                                    var115002 = _19338 + ceil32(return_data.size) + ceil32(32 * _19372) + 32
                                    if 1 >= _19372:
                                        revert with 0, 50
                                    _21913 = mem[_19338 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22044 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22054 = mem[_22044]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21913) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22044]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22366 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22417 = mem[_22366]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22595 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22595] > !_22417:
                                                revert with 0, 17
                                            if mem[_22595] + _22417 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054 > -1 / mem[_22595] + _22417:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22595] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054) + (_22417 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22367 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22419 = mem[_22367]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22596 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22596] > !_22419:
                                                revert with 0, 17
                                            if mem[_22596] + _22419 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054 > -1 / mem[_22596] + _22419:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22596] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054) + (_22419 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22054) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22085 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22101 = mem[_22085]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22085]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22574 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22629 = mem[_22574]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22809 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22809] > !_22629:
                                                    revert with 0, 17
                                                if mem[_22809] + _22629 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101 > -1 / mem[_22809] + _22629:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22809] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101) + (_22629 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22575 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22631 = mem[_22575]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22810 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22810] > !_22631:
                                                    revert with 0, 17
                                                if mem[_22810] + _22631 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101 > -1 / mem[_22810] + _22631:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22810] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101) + (_22631 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22101) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23581 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23593 = mem[_23581]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23581]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23695 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23722 = mem[_23695]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23836 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23836] > !_23722:
                                                    revert with 0, 17
                                                if mem[_23836] + _23722 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593 > -1 / mem[_23836] + _23722:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23836] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593) + (_23722 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23696 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23724 = mem[_23696]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23837 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23837] > !_23724:
                                                    revert with 0, 17
                                                if mem[_23837] + _23724 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593 > -1 / mem[_23837] + _23724:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23837] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593) + (_23724 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / u * v) / _23593) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _16294 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16294]:
                                            revert with 0, 50
                                        mem[_16294 + 32] = token1Address
                                        if 1 >= mem[_16294]:
                                            revert with 0, 50
                                        mem[_16294 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16294 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16294 + 100] = 10^stor259
                                        mem[_16294 + 132] = 64
                                        mem[_16294 + 164] = mem[_16294]
                                        idx = 0
                                        u = _16294 + 32
                                        v = _16294 + 196
                                        while idx < mem[_16294]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16294 + (32 * mem[_16294]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19337 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19355 = mem[_19337]
                                        require mem[_19337] <= test266151307()
                                        require _19337 + mem[_19337] + 31 < _19337 + return_data.size
                                        _19371 = mem[_19337 + mem[_19337]]
                                        if mem[_19337 + mem[_19337]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19337 + mem[_19337]]) + 1 < 0 or _19337 + ceil32(return_data.size) + ceil32(32 * mem[_19337 + mem[_19337]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19337 + ceil32(return_data.size) + ceil32(32 * mem[_19337 + mem[_19337]]) + 1
                                        mem[_19337 + ceil32(return_data.size)] = _19371
                                        require _19355 + (32 * _19371) + 32 <= return_data.size
                                        mem[_19337 + ceil32(return_data.size) + 32 len ceil32(32 * _19371)] = mem[_19337 + _19355 + 32 len ceil32(32 * _19371)]
                                        var120002 = _19337 + ceil32(return_data.size) + ceil32(32 * _19371) + 32
                                        if 1 >= _19371:
                                            revert with 0, 50
                                        _21912 = mem[_19337 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22043 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22053 = mem[_22043]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21912) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22043]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22364 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22413 = mem[_22364]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22593 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22593] > !_22413:
                                                    revert with 0, 17
                                                if mem[_22593] + _22413 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053 > -1 / mem[_22593] + _22413:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22593] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053) + (_22413 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22365 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22415 = mem[_22365]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22594 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22594] > !_22415:
                                                    revert with 0, 17
                                                if mem[_22594] + _22415 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053 > -1 / mem[_22594] + _22415:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22594] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053) + (_22415 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912) / _22053) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22084 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22098 = mem[_22084]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22084]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22572 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22621 = mem[_22572]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22803 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22803] > !_22621:
                                                        revert with 0, 17
                                                    if mem[_22803] + _22621 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098 > -1 / mem[_22803] + _22621:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22803] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098) + (_22621 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22573 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22623 = mem[_22573]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22804 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22804] > !_22623:
                                                        revert with 0, 17
                                                    if mem[_22804] + _22623 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098 > -1 / mem[_22804] + _22623:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22804] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098) + (_22623 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / 10^stor259) / _22098) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23580 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23592 = mem[_23580]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23580]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23693 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23718 = mem[_23693]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23834 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23834] > !_23718:
                                                        revert with 0, 17
                                                    if mem[_23834] + _23718 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592 > -1 / mem[_23834] + _23718:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23834] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592) + (_23718 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23694 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23720 = mem[_23694]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23835 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23835] > !_23720:
                                                        revert with 0, 17
                                                    if mem[_23835] + _23720 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592 > -1 / mem[_23835] + _23720:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23835] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592) + (_23720 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21912 / u * v) / _23592) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _19352 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_19352]:
                                            revert with 0, 50
                                        mem[_19352 + 32] = token1Address
                                        if 1 >= mem[_19352]:
                                            revert with 0, 50
                                        mem[_19352 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_19352 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_19352 + 100] = u * v
                                        mem[_19352 + 132] = 64
                                        mem[_19352 + 164] = mem[_19352]
                                        idx = 0
                                        u = _19352 + 32
                                        v = _19352 + 196
                                        while idx < mem[_19352]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _19352 + (32 * mem[_19352]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21931 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21937 = mem[_21931]
                                        require mem[_21931] <= test266151307()
                                        require _21931 + mem[_21931] + 31 < _21931 + return_data.size
                                        _21943 = mem[_21931 + mem[_21931]]
                                        if mem[_21931 + mem[_21931]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_21931 + mem[_21931]]) + 1 < 0 or _21931 + ceil32(return_data.size) + ceil32(32 * mem[_21931 + mem[_21931]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _21931 + ceil32(return_data.size) + ceil32(32 * mem[_21931 + mem[_21931]]) + 1
                                        mem[_21931 + ceil32(return_data.size)] = _21943
                                        require _21937 + (32 * _21943) + 32 <= return_data.size
                                        mem[_21931 + ceil32(return_data.size) + 32 len ceil32(32 * _21943)] = mem[_21931 + _21937 + 32 len ceil32(32 * _21943)]
                                        if 1 >= _21943:
                                            revert with 0, 50
                                        _23549 = mem[_21931 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21931 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21931 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23612 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23617 = mem[_23612]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23549) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23612]:
                                                revert with 0, 18
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23855 = mem[_23824]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23948 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23948] > !_23855:
                                                    revert with 0, 17
                                                if mem[_23948] + _23855 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617 > -1 / mem[_23948] + _23855:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23948] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617) + (_23855 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23825 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23857 = mem[_23825]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23949 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23949] > !_23857:
                                                    revert with 0, 17
                                                if mem[_23949] + _23857 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617 > -1 / mem[_23949] + _23857:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23949] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617) + (_23857 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549) / _23617) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21931 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21931 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23632 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23639 = mem[_23632]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23632]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23938 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23963 = mem[_23938]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24047 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24047] > !_23963:
                                                        revert with 0, 17
                                                    if mem[_24047] + _23963 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639 > -1 / mem[_24047] + _23963:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24047] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639) + (_23963 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23939 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23965 = mem[_23939]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24048 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24048] > !_23965:
                                                        revert with 0, 17
                                                    if mem[_24048] + _23965 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639 > -1 / mem[_24048] + _23965:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24048] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639) + (_23965 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / 10^stor259) / _23639) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21931 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21931 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _24303 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _24308 = mem[_24303]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_24303]:
                                                    revert with 0, 18
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24343 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _24354 = mem[_24343]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24401 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24401] > !_24354:
                                                        revert with 0, 17
                                                    if mem[_24401] + _24354 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308 > -1 / mem[_24401] + _24354:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24401] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308) + (_24354 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24344 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _24356 = mem[_24344]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24402 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24402] > !_24356:
                                                        revert with 0, 17
                                                    if mem[_24402] + _24356 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308 > -1 / mem[_24402] + _24356:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24402] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308) + (_24356 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23549 / u * v) / _24308) / 10^18
                            else:
                                _16131 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_16131]:
                                    revert with 0, 50
                                mem[_16131 + 32] = token1Address
                                if 1 >= mem[_16131]:
                                    revert with 0, 50
                                mem[_16131 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_16131 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_16131 + 100] = 10^18
                                mem[_16131 + 132] = 64
                                mem[_16131 + 164] = mem[_16131]
                                idx = 0
                                u = _16131 + 32
                                v = _16131 + 196
                                while idx < mem[_16131]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _16131 + (32 * mem[_16131]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _19339 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _19357 = mem[_19339]
                                require mem[_19339] <= test266151307()
                                require _19339 + mem[_19339] + 31 < _19339 + return_data.size
                                _19373 = mem[_19339 + mem[_19339]]
                                if mem[_19339 + mem[_19339]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_19339 + mem[_19339]]) + 1 < 0 or _19339 + ceil32(return_data.size) + ceil32(32 * mem[_19339 + mem[_19339]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _19339 + ceil32(return_data.size) + ceil32(32 * mem[_19339 + mem[_19339]]) + 1
                                mem[_19339 + ceil32(return_data.size)] = _19373
                                require _19357 + (32 * _19373) + 32 <= return_data.size
                                mem[_19339 + ceil32(return_data.size) + 32 len ceil32(32 * _19373)] = mem[_19339 + _19357 + 32 len ceil32(32 * _19373)]
                                var109002 = _19339 + ceil32(return_data.size) + ceil32(32 * _19373) + 32
                                if 1 >= _19373:
                                    revert with 0, 50
                                _21914 = mem[_19339 + ceil32(return_data.size) + 64]
                                _21929 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21929]:
                                    revert with 0, 50
                                mem[_21929 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21929]:
                                    revert with 0, 50
                                mem[_21929 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21929 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21929 + 100] = _21914
                                mem[_21929 + 132] = 64
                                mem[_21929 + 164] = mem[_21929]
                                idx = 0
                                u = _21929 + 32
                                v = _21929 + 196
                                while idx < mem[_21929]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21929 + (32 * mem[_21929]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23555 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23556 = mem[_23555]
                                require mem[_23555] <= test266151307()
                                require _23555 + mem[_23555] + 31 < _23555 + return_data.size
                                _23557 = mem[_23555 + mem[_23555]]
                                if mem[_23555 + mem[_23555]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_23555 + mem[_23555]]) + 1 < 0 or _23555 + ceil32(return_data.size) + ceil32(32 * mem[_23555 + mem[_23555]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _23555 + ceil32(return_data.size) + ceil32(32 * mem[_23555 + mem[_23555]]) + 1
                                mem[_23555 + ceil32(return_data.size)] = _23557
                                require _23556 + (32 * _23557) + 32 <= return_data.size
                                mem[_23555 + ceil32(return_data.size) + 32 len ceil32(32 * _23557)] = mem[_23555 + _23556 + 32 len ceil32(32 * _23557)]
                                if 1 >= _23557:
                                    revert with 0, 50
                                _24292 = mem[_23555 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_23555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23555 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24315 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24316 = mem[_24315]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24292) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24315]:
                                        revert with 0, 18
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24399 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24411 = mem[_24399]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24435 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24435] > !_24411:
                                            revert with 0, 17
                                        if mem[_24435] + _24411 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316 > -1 / mem[_24435] + _24411:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24435] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316) + (_24411 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24400 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24413 = mem[_24400]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24436 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24436] > !_24413:
                                            revert with 0, 17
                                        if mem[_24436] + _24413 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316 > -1 / mem[_24436] + _24413:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24436] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316) + (_24413 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292) / _24316) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_23555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23555 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24319 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24326 = mem[_24319]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24319]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24433 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24441 = mem[_24433]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24457 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24457] > !_24441:
                                                revert with 0, 17
                                            if mem[_24457] + _24441 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326 > -1 / mem[_24457] + _24441:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24457] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326) + (_24441 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24434 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24443 = mem[_24434]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24458 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24458] > !_24443:
                                                revert with 0, 17
                                            if mem[_24458] + _24443 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326 > -1 / mem[_24458] + _24443:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24458] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326) + (_24443 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / 10^stor259) / _24326) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_23555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23555 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24503 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24504 = mem[_24503]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24503]:
                                            revert with 0, 18
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24509 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24511 = mem[_24509]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24519 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24519] > !_24511:
                                                revert with 0, 17
                                            if mem[_24519] + _24511 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504 > -1 / mem[_24519] + _24511:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24519] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504) + (_24511 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24510 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24513 = mem[_24510]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24520 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24520] > !_24513:
                                                revert with 0, 17
                                            if mem[_24520] + _24513 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504 > -1 / mem[_24520] + _24513:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24520] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504) + (_24513 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12254 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24292 / u * v) / _24504) / 10^18
    return memory
      from mem[64]
       len 32
}

function getAllPoolInUSD() {
    require ext_code.size(0xa77230d17318075983913bc2145db16c7366156)
    staticcall 0xa77230d17318075983913bc2145db16c7366156.latestAnswer() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 'ChainLink error'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = token1Address
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = 1
            mem[(2 * ceil32(return_data.size)) + 228] = 64
            mem[(2 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4161 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _4170 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            require _4161 + (32 * _4170) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4170)] = mem[(2 * ceil32(return_data.size)) + _4161 + 224 len ceil32(32 * _4170)]
            if 1 >= _4170:
                revert with 0, 50
            _8226 = mem[(4 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8267 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8287 = mem[_8267]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8226) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8267]:
                    revert with 0, 18
                if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / mem[_8267] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / mem[_8267]:
                    revert with 0, 17
                mem[mem[64] + 36] = this.address
                if not sub_abddf82e:
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8597 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8649 = mem[_8597]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8783 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8783] > !_8649:
                        revert with 0, 17
                    if mem[_8783] + _8649 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8783] + _8649:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8783] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6) + (_8649 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    require ext_code.size(sub_4005760aAddress)
                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8598 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8651 = mem[_8598]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8784 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8784] > !_8651:
                        revert with 0, 17
                    if mem[_8784] + _8651 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8784] + _8651:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8784] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6) + (_8651 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226) / _8287 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8313 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8349 = mem[_8313]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8313]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / mem[_8313] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / mem[_8313]:
                        revert with 0, 17
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8755 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8824 = mem[_8755]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8954 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8954] > !_8824:
                            revert with 0, 17
                        if mem[_8954] + _8824 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8954] + _8824:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8954] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6) + (_8824 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8756 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8826 = mem[_8756]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8955 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8955] > !_8826:
                            revert with 0, 17
                        if mem[_8955] + _8826 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8955] + _8826:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8955] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6) + (_8826 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / 10^stor259) / _8349 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12392 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12443 = mem[_12392]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12392]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / mem[_12392] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / mem[_12392]:
                        revert with 0, 17
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12737 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12803 = mem[_12737]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12928 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12928] > !_12803:
                            revert with 0, 17
                        if mem[_12928] + _12803 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12928] + _12803:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12928] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6) + (_12803 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12738 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12805 = mem[_12738]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12929 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12929] > !_12805:
                            revert with 0, 17
                        if mem[_12929] + _12805 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12929] + _12805:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12929] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6) + (_12805 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8226 / s * t) / _12443 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 10^stor259
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4160 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4169 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require _4160 + (32 * _4169) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4169)] = mem[(2 * ceil32(return_data.size)) + _4160 + 224 len ceil32(32 * _4169)]
                if 1 >= _4169:
                    revert with 0, 50
                _8225 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8266 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8286 = mem[_8266]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8225) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8266]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / mem[_8266] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / mem[_8266]:
                        revert with 0, 17
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8595 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8645 = mem[_8595]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8781 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8781] > !_8645:
                            revert with 0, 17
                        if mem[_8781] + _8645 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8781] + _8645:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8781] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6) + (_8645 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8596 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8647 = mem[_8596]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8782 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8782] > !_8647:
                            revert with 0, 17
                        if mem[_8782] + _8647 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8782] + _8647:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8782] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6) + (_8647 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225) / _8286 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8312 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8346 = mem[_8312]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8312]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / mem[_8312] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / mem[_8312]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8753 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8816 = mem[_8753]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8948 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8948] > !_8816:
                                revert with 0, 17
                            if mem[_8948] + _8816 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8948] + _8816:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8948] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6) + (_8816 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8754 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8818 = mem[_8754]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8949 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8949] > !_8818:
                                revert with 0, 17
                            if mem[_8949] + _8818 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8949] + _8818:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8949] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6) + (_8818 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / 10^stor259) / _8346 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12391 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12442 = mem[_12391]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12391]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / mem[_12391] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / mem[_12391]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12735 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12799 = mem[_12735]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12926 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12926] > !_12799:
                                revert with 0, 17
                            if mem[_12926] + _12799 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12926] + _12799:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12926] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6) + (_12799 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12736 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12801 = mem[_12736]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12927 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12927] > !_12801:
                                revert with 0, 17
                            if mem[_12927] + _12801 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12927] + _12801:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12927] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6) + (_12801 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _8225 / s * t) / _12442 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = s * t
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                u = (2 * ceil32(return_data.size)) + 128
                v = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _8232 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _8235 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require _8232 + (32 * _8235) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _8235)] = mem[(2 * ceil32(return_data.size)) + _8232 + 224 len ceil32(32 * _8235)]
                if 1 >= _8235:
                    revert with 0, 50
                _12258 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12458 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12484 = mem[_12458]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12458]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / mem[_12458] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / mem[_12458]:
                        revert with 0, 17
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12859 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12922 = mem[_12859]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13023 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_13023] > !_12922:
                            revert with 0, 17
                        if mem[_13023] + _12922 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13023] + _12922:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_13023] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6) + (_12922 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12860 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12924 = mem[_12860]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13024 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_13024] > !_12924:
                            revert with 0, 17
                        if mem[_13024] + _12924 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13024] + _12924:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_13024] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6) + (_12924 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258) / _12484 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12519 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12559 = mem[_12519]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12519]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / mem[_12519] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / mem[_12519]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13003 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _13047 = mem[_13003]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13122 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13122] > !_13047:
                                revert with 0, 17
                            if mem[_13122] + _13047 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13122] + _13047:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13122] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6) + (_13047 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13004 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _13049 = mem[_13004]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13123 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13123] > !_13049:
                                revert with 0, 17
                            if mem[_13123] + _13049 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13123] + _13049:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13123] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6) + (_13049 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / 10^stor259) / _12559 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16186 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16233 = mem[_16186]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_16186]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / mem[_16186] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / mem[_16186]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16490 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16535 = mem[_16490]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16665 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16665] > !_16535:
                                revert with 0, 17
                            if mem[_16665] + _16535 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16665] + _16535:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16665] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6) + (_16535 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16491 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16537 = mem[_16491]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16666 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16666] > !_16537:
                                revert with 0, 17
                            if mem[_16666] + _16537 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16666] + _16537:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16666] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6) + (_16537 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _12258 / s * t) / _16233 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4158 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4167 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require _4158 + (32 * _4167) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4167)] = mem[(2 * ceil32(return_data.size)) + _4158 + 224 len ceil32(32 * _4167)]
                if 1 >= _4167:
                    revert with 0, 50
                _8223 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8265 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8285 = mem[_8265]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8223) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8265]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / mem[_8265] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / mem[_8265]:
                        revert with 0, 17
                    mem[mem[64] + 36] = this.address
                    if not sub_abddf82e:
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8593 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8641 = mem[_8593]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8779 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8779] > !_8641:
                            revert with 0, 17
                        if mem[_8779] + _8641 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8779] + _8641:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8779] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6) + (_8641 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        require ext_code.size(sub_4005760aAddress)
                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8594 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8643 = mem[_8594]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8780 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8780] > !_8643:
                            revert with 0, 17
                        if mem[_8780] + _8643 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8780] + _8643:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8780] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6) + (_8643 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223) / _8285 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8311 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8343 = mem[_8311]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8311]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / mem[_8311] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / mem[_8311]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8750 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8808 = mem[_8750]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8942 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8942] > !_8808:
                                revert with 0, 17
                            if mem[_8942] + _8808 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8942] + _8808:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8942] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6) + (_8808 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8751 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8810 = mem[_8751]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8943 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8943] > !_8810:
                                revert with 0, 17
                            if mem[_8943] + _8810 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8943] + _8810:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8943] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6) + (_8810 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / 10^stor258) / _8343 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12390 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12439 = mem[_12390]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12390]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / mem[_12390] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / mem[_12390]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12733 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12791 = mem[_12733]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12920 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12920] > !_12791:
                                revert with 0, 17
                            if mem[_12920] + _12791 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12920] + _12791:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12920] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6) + (_12791 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12734 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12793 = mem[_12734]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12921 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12921] > !_12793:
                                revert with 0, 17
                            if mem[_12921] + _12793 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12921] + _12793:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12921] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6) + (_12793 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8223 / s * t) / _12439 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4157 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4166 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4157 + (32 * _4166) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4166)] = mem[(2 * ceil32(return_data.size)) + _4157 + 224 len ceil32(32 * _4166)]
                    if 1 >= _4166:
                        revert with 0, 50
                    _8222 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8264 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8284 = mem[_8264]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8222) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8264]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / mem[_8264] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / mem[_8264]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8591 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8637 = mem[_8591]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8777 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8777] > !_8637:
                                revert with 0, 17
                            if mem[_8777] + _8637 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8777] + _8637:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8777] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6) + (_8637 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8592 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8639 = mem[_8592]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8778 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8778] > !_8639:
                                revert with 0, 17
                            if mem[_8778] + _8639 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8778] + _8639:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8778] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6) + (_8639 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222) / _8284 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8310 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8340 = mem[_8310]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8310]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / mem[_8310] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / mem[_8310]:
                                revert with 0, 17
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8748 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8800 = mem[_8748]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8936 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8936] > !_8800:
                                    revert with 0, 17
                                if mem[_8936] + _8800 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8936] + _8800:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8936] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6) + (_8800 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8749 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8802 = mem[_8749]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8937 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8937] > !_8802:
                                    revert with 0, 17
                                if mem[_8937] + _8802 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8937] + _8802:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8937] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6) + (_8802 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / 10^stor258) / _8340 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12389 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12438 = mem[_12389]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12389]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / mem[_12389] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / mem[_12389]:
                                revert with 0, 17
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12731 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12787 = mem[_12731]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12918 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12918] > !_12787:
                                    revert with 0, 17
                                if mem[_12918] + _12787 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12918] + _12787:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12918] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6) + (_12787 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12732 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12789 = mem[_12732]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12919 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12919] > !_12789:
                                    revert with 0, 17
                                if mem[_12919] + _12789 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12919] + _12789:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12919] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6) + (_12789 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8222 / s * t) / _12438 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _8231 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _8234 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _8231 + (32 * _8234) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _8234)] = mem[(2 * ceil32(return_data.size)) + _8231 + 224 len ceil32(32 * _8234)]
                    if 1 >= _8234:
                        revert with 0, 50
                    _12257 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12457 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12483 = mem[_12457]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12257) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12457]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / mem[_12457] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / mem[_12457]:
                            revert with 0, 17
                        mem[mem[64] + 36] = this.address
                        if not sub_abddf82e:
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12849 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12914 = mem[_12849]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13021 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13021] > !_12914:
                                revert with 0, 17
                            if mem[_13021] + _12914 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13021] + _12914:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13021] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6) + (_12914 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            require ext_code.size(sub_4005760aAddress)
                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12850 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12916 = mem[_12850]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13022 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_13022] > !_12916:
                                revert with 0, 17
                            if mem[_13022] + _12916 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13022] + _12916:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_13022] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6) + (_12916 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257) / _12483 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12518 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12556 = mem[_12518]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12518]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / mem[_12518] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / mem[_12518]:
                                revert with 0, 17
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13001 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _13039 = mem[_13001]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13116 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_13116] > !_13039:
                                    revert with 0, 17
                                if mem[_13116] + _13039 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13116] + _13039:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_13116] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6) + (_13039 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13002 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _13041 = mem[_13002]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _13117 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_13117] > !_13041:
                                    revert with 0, 17
                                if mem[_13117] + _13041 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_13117] + _13041:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_13117] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6) + (_13041 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / 10^stor258) / _12556 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16185 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16232 = mem[_16185]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_16185]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / mem[_16185] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / mem[_16185]:
                                revert with 0, 17
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16488 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16531 = mem[_16488]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16663 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16663] > !_16531:
                                    revert with 0, 17
                                if mem[_16663] + _16531 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16663] + _16531:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16663] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6) + (_16531 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16489 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16533 = mem[_16489]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16664 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16664] > !_16533:
                                    revert with 0, 17
                                if mem[_16664] + _16533 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16664] + _16533:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16664] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6) + (_16533 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12257 / s * t) / _16232 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4155 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4164 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307():
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require _4155 + (32 * _4164) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4164)] = mem[(2 * ceil32(return_data.size)) + _4155 + 224 len ceil32(32 * _4164)]
                if 1 >= _4164:
                    revert with 0, 50
                _8220 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8282 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8282]:
                                revert with 0, 50
                            mem[_8282 + 32] = token1Address
                            if 1 >= mem[_8282]:
                                revert with 0, 50
                            mem[_8282 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8282 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8282 + 100] = 1
                            mem[_8282 + 132] = 64
                            mem[_8282 + 164] = mem[_8282]
                            idx = 0
                            s = _8282 + 32
                            t = _8282 + 196
                            while idx < mem[_8282]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8282 + (32 * mem[_8282]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12277 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12301 = mem[_12277]
                            require mem[_12277] <= test266151307()
                            require _12277 + mem[_12277] + 31 < _12277 + return_data.size
                            _12317 = mem[_12277 + mem[_12277]]
                            if mem[_12277 + mem[_12277]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12277 + mem[_12277]]) + 1 < 0 or _12277 + ceil32(return_data.size) + ceil32(32 * mem[_12277 + mem[_12277]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12277 + ceil32(return_data.size) + ceil32(32 * mem[_12277 + mem[_12277]]) + 1
                            mem[_12277 + ceil32(return_data.size)] = _12317
                            require _12301 + (32 * _12317) + 32 <= return_data.size
                            mem[_12277 + ceil32(return_data.size) + 32 len ceil32(32 * _12317)] = mem[_12277 + _12301 + 32 len ceil32(32 * _12317)]
                            if 1 >= _12317:
                                revert with 0, 50
                            _16001 = mem[_12277 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16277 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16299 = mem[_16277]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16001) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_16277]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / mem[_16277] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / mem[_16277]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16625 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16703 = mem[_16625]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16855 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16855] > !_16703:
                                        revert with 0, 17
                                    if mem[_16855] + _16703 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16855] + _16703:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16855] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6) + (_16703 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16626 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16705 = mem[_16626]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16856 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16856] > !_16705:
                                        revert with 0, 17
                                    if mem[_16856] + _16705 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16856] + _16705:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16856] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6) + (_16705 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001) / _16299 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16340 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16387 = mem[_16340]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16340]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / mem[_16340] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / mem[_16340]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16831 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16925 = mem[_16831]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _17074 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_17074] > !_16925:
                                            revert with 0, 17
                                        if mem[_17074] + _16925 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17074] + _16925:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_17074] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6) + (_16925 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16832 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16927 = mem[_16832]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _17075 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_17075] > !_16927:
                                            revert with 0, 17
                                        if mem[_17075] + _16927 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17075] + _16927:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_17075] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6) + (_16927 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / 10^stor259) / _16387 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12277 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12277 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19451 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19480 = mem[_19451]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19451]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / mem[_19451] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / mem[_19451]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19731 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19789 = mem[_19731]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19953 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19953] > !_19789:
                                            revert with 0, 17
                                        if mem[_19953] + _19789 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19953] + _19789:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19953] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6) + (_19789 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19732 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19791 = mem[_19732]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19954 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19954] > !_19791:
                                            revert with 0, 17
                                        if mem[_19954] + _19791 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19954] + _19791:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19954] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6) + (_19791 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16001 / s * t) / _19480 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8334 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8334]:
                                    revert with 0, 50
                                mem[_8334 + 32] = token1Address
                                if 1 >= mem[_8334]:
                                    revert with 0, 50
                                mem[_8334 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8334 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8334 + 100] = 10^stor259
                                mem[_8334 + 132] = 64
                                mem[_8334 + 164] = mem[_8334]
                                idx = 0
                                s = _8334 + 32
                                t = _8334 + 196
                                while idx < mem[_8334]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8334 + (32 * mem[_8334]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12276 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12300 = mem[_12276]
                                require mem[_12276] <= test266151307()
                                require _12276 + mem[_12276] + 31 < _12276 + return_data.size
                                _12316 = mem[_12276 + mem[_12276]]
                                if mem[_12276 + mem[_12276]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12276 + mem[_12276]]) + 1 < 0 or _12276 + ceil32(return_data.size) + ceil32(32 * mem[_12276 + mem[_12276]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12276 + ceil32(return_data.size) + ceil32(32 * mem[_12276 + mem[_12276]]) + 1
                                mem[_12276 + ceil32(return_data.size)] = _12316
                                require _12300 + (32 * _12316) + 32 <= return_data.size
                                mem[_12276 + ceil32(return_data.size) + 32 len ceil32(32 * _12316)] = mem[_12276 + _12300 + 32 len ceil32(32 * _12316)]
                                var107002 = _12276 + ceil32(return_data.size) + ceil32(32 * _12316) + 32
                                if 1 >= _12316:
                                    revert with 0, 50
                                _16000 = mem[_12276 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16276 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16298 = mem[_16276]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16000) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16276]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / mem[_16276] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / mem[_16276]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16623 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16699 = mem[_16623]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16853 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16853] > !_16699:
                                            revert with 0, 17
                                        if mem[_16853] + _16699 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16853] + _16699:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16853] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6) + (_16699 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16624 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16701 = mem[_16624]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16854 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16854] > !_16701:
                                            revert with 0, 17
                                        if mem[_16854] + _16701 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16854] + _16701:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16854] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6) + (_16701 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000) / _16298 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16339 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16384 = mem[_16339]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16339]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / mem[_16339] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / mem[_16339]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16829 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16917 = mem[_16829]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17068 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17068] > !_16917:
                                                revert with 0, 17
                                            if mem[_17068] + _16917 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17068] + _16917:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17068] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6) + (_16917 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16830 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16919 = mem[_16830]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17069 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17069] > !_16919:
                                                revert with 0, 17
                                            if mem[_17069] + _16919 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17069] + _16919:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17069] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6) + (_16919 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / 10^stor259) / _16384 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12276 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12276 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19450 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19479 = mem[_19450]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19450]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / mem[_19450] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / mem[_19450]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19729 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19785 = mem[_19729]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19951 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19951] > !_19785:
                                                revert with 0, 17
                                            if mem[_19951] + _19785 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19951] + _19785:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19951] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6) + (_19785 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19730 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19787 = mem[_19730]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19952 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19952] > !_19787:
                                                revert with 0, 17
                                            if mem[_19952] + _19787 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19952] + _19787:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19952] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6) + (_19787 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _16000 / s * t) / _19479 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _12285 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12285]:
                                    revert with 0, 50
                                mem[_12285 + 32] = token1Address
                                if 1 >= mem[_12285]:
                                    revert with 0, 50
                                mem[_12285 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12285 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12285 + 100] = s * t
                                mem[_12285 + 132] = 64
                                mem[_12285 + 164] = mem[_12285]
                                idx = 0
                                s = _12285 + 32
                                t = _12285 + 196
                                while idx < mem[_12285]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12285 + (32 * mem[_12285]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16039 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16071 = mem[_16039]
                                require mem[_16039] <= test266151307()
                                require _16039 + mem[_16039] + 31 < _16039 + return_data.size
                                _16095 = mem[_16039 + mem[_16039]]
                                if mem[_16039 + mem[_16039]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16039 + mem[_16039]]) + 1 < 0 or _16039 + ceil32(return_data.size) + ceil32(32 * mem[_16039 + mem[_16039]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16039 + ceil32(return_data.size) + ceil32(32 * mem[_16039 + mem[_16039]]) + 1
                                mem[_16039 + ceil32(return_data.size)] = _16095
                                require _16071 + (32 * _16095) + 32 <= return_data.size
                                mem[_16039 + ceil32(return_data.size) + 32 len ceil32(32 * _16095)] = mem[_16039 + _16071 + 32 len ceil32(32 * _16095)]
                                var112002 = _16039 + ceil32(return_data.size) + ceil32(32 * _16095) + 32
                                if 1 >= _16095:
                                    revert with 0, 50
                                _19315 = mem[_16039 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16039 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16039 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19523 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19537 = mem[_19523]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _19315) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19523]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / mem[_19523] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / mem[_19523]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19910 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _20010 = mem[_19910]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20203 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20203] > !_20010:
                                            revert with 0, 17
                                        if mem[_20203] + _20010 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20203] + _20010:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20203] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6) + (_20010 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19911 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _20012 = mem[_19911]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20204 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20204] > !_20012:
                                            revert with 0, 17
                                        if mem[_20204] + _20012 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20204] + _20012:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20204] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6) + (_20012 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315) / _19537 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16039 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16039 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19582 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19625 = mem[_19582]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19582]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / mem[_19582] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / mem[_19582]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20173 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20305 = mem[_20173]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20495 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20495] > !_20305:
                                                revert with 0, 17
                                            if mem[_20495] + _20305 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20495] + _20305:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20495] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6) + (_20305 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20174 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20307 = mem[_20174]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20496 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20496] > !_20307:
                                                revert with 0, 17
                                            if mem[_20496] + _20307 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20496] + _20307:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20496] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6) + (_20307 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / 10^stor259) / _19625 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16039 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16039 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21993 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22011 = mem[_21993]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21993]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / mem[_21993] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / mem[_21993]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22221 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22282 = mem[_22221]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22436 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22436] > !_22282:
                                                revert with 0, 17
                                            if mem[_22436] + _22282 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22436] + _22282:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22436] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6) + (_22282 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22222 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22284 = mem[_22222]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22437 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22437] > !_22284:
                                                revert with 0, 17
                                            if mem[_22437] + _22284 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22437] + _22284:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22437] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6) + (_22284 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19315 / s * t) / _22011 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        _8245 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_8245]:
                            revert with 0, 50
                        mem[_8245 + 32] = token1Address
                        if 1 >= mem[_8245]:
                            revert with 0, 50
                        mem[_8245 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_8245 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_8245 + 100] = 10^18
                        mem[_8245 + 132] = 64
                        mem[_8245 + 164] = mem[_8245]
                        idx = 0
                        s = _8245 + 32
                        t = _8245 + 196
                        while idx < mem[_8245]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _8245 + (32 * mem[_8245]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12278 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12302 = mem[_12278]
                        require mem[_12278] <= test266151307()
                        require _12278 + mem[_12278] + 31 < _12278 + return_data.size
                        _12318 = mem[_12278 + mem[_12278]]
                        if mem[_12278 + mem[_12278]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_12278 + mem[_12278]]) + 1 < 0 or _12278 + ceil32(return_data.size) + ceil32(32 * mem[_12278 + mem[_12278]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _12278 + ceil32(return_data.size) + ceil32(32 * mem[_12278 + mem[_12278]]) + 1
                        mem[_12278 + ceil32(return_data.size)] = _12318
                        require _12302 + (32 * _12318) + 32 <= return_data.size
                        mem[_12278 + ceil32(return_data.size) + 32 len ceil32(32 * _12318)] = mem[_12278 + _12302 + 32 len ceil32(32 * _12318)]
                        var96002 = _12278 + ceil32(return_data.size) + ceil32(32 * _12318) + 32
                        var96005 = _12278 + _12302 + ceil32(32 * _12318) + 32
                        if 1 >= _12318:
                            revert with 0, 50
                        _16002 = mem[_12278 + ceil32(return_data.size) + 64]
                        _16011 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_16011]:
                            revert with 0, 50
                        mem[_16011 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_16011]:
                            revert with 0, 50
                        mem[_16011 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_16011 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_16011 + 100] = _16002
                        mem[_16011 + 132] = 64
                        mem[_16011 + 164] = mem[_16011]
                        idx = 0
                        s = _16011 + 32
                        t = _16011 + 196
                        while idx < mem[_16011]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _16011 + (32 * mem[_16011]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _19341 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _19359 = mem[_19341]
                        require mem[_19341] <= test266151307()
                        require _19341 + mem[_19341] + 31 < _19341 + return_data.size
                        _19375 = mem[_19341 + mem[_19341]]
                        if mem[_19341 + mem[_19341]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_19341 + mem[_19341]]) + 1 < 0 or _19341 + ceil32(return_data.size) + ceil32(32 * mem[_19341 + mem[_19341]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _19341 + ceil32(return_data.size) + ceil32(32 * mem[_19341 + mem[_19341]]) + 1
                        mem[_19341 + ceil32(return_data.size)] = _19375
                        require _19359 + (32 * _19375) + 32 <= return_data.size
                        mem[_19341 + ceil32(return_data.size) + 32 len ceil32(32 * _19375)] = mem[_19341 + _19359 + 32 len ceil32(32 * _19375)]
                        if 1 >= _19375:
                            revert with 0, 50
                        _21918 = mem[_19341 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19341 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19341 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _22042 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _22052 = mem[_22042]
                            if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _21918) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_22042]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / mem[_22042] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / mem[_22042]:
                                revert with 0, 17
                            mem[mem[64] + 36] = this.address
                            if not sub_abddf82e:
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22397 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _22476 = mem[_22397]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22634 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_22634] > !_22476:
                                    revert with 0, 17
                                if mem[_22634] + _22476 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22634] + _22476:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_22634] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6) + (_22476 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                require ext_code.size(sub_4005760aAddress)
                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22398 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _22478 = mem[_22398]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22635 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_22635] > !_22478:
                                    revert with 0, 17
                                if mem[_22635] + _22478 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22635] + _22478:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_22635] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6) + (_22478 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918) / _22052 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19341 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19341 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22084 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22115 = mem[_22084]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22084]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / mem[_22084] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / mem[_22084]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22613 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22714 = mem[_22613]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22860 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22860] > !_22714:
                                        revert with 0, 17
                                    if mem[_22860] + _22714 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22860] + _22714:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22860] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6) + (_22714 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22614 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22716 = mem[_22614]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22861 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22861] > !_22716:
                                        revert with 0, 17
                                    if mem[_22861] + _22716 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22861] + _22716:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22861] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6) + (_22716 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / 10^stor259) / _22115 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19341 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _8220 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19341 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23580 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23591 = mem[_23580]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8220) + (Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23580]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / mem[_23580] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / mem[_23580]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23713 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23754 = mem[_23713]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23850 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23850] > !_23754:
                                        revert with 0, 17
                                    if mem[_23850] + _23754 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23850] + _23754:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23850] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6) + (_23754 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23714 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23756 = mem[_23714]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23851 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23851] > !_23756:
                                        revert with 0, 17
                                    if mem[_23851] + _23756 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23851] + _23756:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23851] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6) + (_23756 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21918 / s * t) / _23591 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8332 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8332]:
                                    revert with 0, 50
                                mem[_8332 + 32] = token1Address
                                if 1 >= mem[_8332]:
                                    revert with 0, 50
                                mem[_8332 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8332 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8332 + 100] = 1
                                mem[_8332 + 132] = 64
                                mem[_8332 + 164] = mem[_8332]
                                idx = 0
                                s = _8332 + 32
                                t = _8332 + 196
                                while idx < mem[_8332]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8332 + (32 * mem[_8332]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12272 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12297 = mem[_12272]
                                require mem[_12272] <= test266151307()
                                require _12272 + mem[_12272] + 31 < _12272 + return_data.size
                                _12313 = mem[_12272 + mem[_12272]]
                                if mem[_12272 + mem[_12272]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12272 + mem[_12272]]) + 1 < 0 or _12272 + ceil32(return_data.size) + ceil32(32 * mem[_12272 + mem[_12272]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12272 + ceil32(return_data.size) + ceil32(32 * mem[_12272 + mem[_12272]]) + 1
                                mem[_12272 + ceil32(return_data.size)] = _12313
                                require _12297 + (32 * _12313) + 32 <= return_data.size
                                mem[_12272 + ceil32(return_data.size) + 32 len ceil32(32 * _12313)] = mem[_12272 + _12297 + 32 len ceil32(32 * _12313)]
                                var107002 = _12272 + ceil32(return_data.size) + ceil32(32 * _12313) + 32
                                if 1 >= _12313:
                                    revert with 0, 50
                                _15995 = mem[_12272 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16275 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16297 = mem[_16275]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15995) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16275]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / mem[_16275] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / mem[_16275]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16621 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16693 = mem[_16621]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16850 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16850] > !_16693:
                                            revert with 0, 17
                                        if mem[_16850] + _16693 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16850] + _16693:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16850] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6) + (_16693 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16622 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16695 = mem[_16622]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16851 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16851] > !_16695:
                                            revert with 0, 17
                                        if mem[_16851] + _16695 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16851] + _16695:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16851] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6) + (_16695 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995) / _16297 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16337 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16381 = mem[_16337]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16337]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / mem[_16337] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / mem[_16337]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16826 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16907 = mem[_16826]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17059 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17059] > !_16907:
                                                revert with 0, 17
                                            if mem[_17059] + _16907 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17059] + _16907:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17059] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6) + (_16907 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16827 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16909 = mem[_16827]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17060 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17060] > !_16909:
                                                revert with 0, 17
                                            if mem[_17060] + _16909 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17060] + _16909:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17060] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6) + (_16909 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / 10^stor259) / _16381 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12272 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12272 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19448 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19478 = mem[_19448]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19448]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / mem[_19448] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / mem[_19448]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19727 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19779 = mem[_19727]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19946 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19946] > !_19779:
                                                revert with 0, 17
                                            if mem[_19946] + _19779 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19946] + _19779:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19946] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6) + (_19779 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19728 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19781 = mem[_19728]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19947 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19947] > !_19781:
                                                revert with 0, 17
                                            if mem[_19947] + _19781 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19947] + _19781:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19947] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6) + (_19781 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15995 / s * t) / _19478 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8415 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8415]:
                                        revert with 0, 50
                                    mem[_8415 + 32] = token1Address
                                    if 1 >= mem[_8415]:
                                        revert with 0, 50
                                    mem[_8415 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8415 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8415 + 100] = 10^stor259
                                    mem[_8415 + 132] = 64
                                    mem[_8415 + 164] = mem[_8415]
                                    idx = 0
                                    s = _8415 + 32
                                    t = _8415 + 196
                                    while idx < mem[_8415]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8415 + (32 * mem[_8415]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12271 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12296 = mem[_12271]
                                    require mem[_12271] <= test266151307()
                                    require _12271 + mem[_12271] + 31 < _12271 + return_data.size
                                    _12312 = mem[_12271 + mem[_12271]]
                                    if mem[_12271 + mem[_12271]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12271 + mem[_12271]]) + 1 < 0 or _12271 + ceil32(return_data.size) + ceil32(32 * mem[_12271 + mem[_12271]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12271 + ceil32(return_data.size) + ceil32(32 * mem[_12271 + mem[_12271]]) + 1
                                    mem[_12271 + ceil32(return_data.size)] = _12312
                                    require _12296 + (32 * _12312) + 32 <= return_data.size
                                    mem[_12271 + ceil32(return_data.size) + 32 len ceil32(32 * _12312)] = mem[_12271 + _12296 + 32 len ceil32(32 * _12312)]
                                    var112002 = _12271 + ceil32(return_data.size) + ceil32(32 * _12312) + 32
                                    if 1 >= _12312:
                                        revert with 0, 50
                                    _15994 = mem[_12271 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16274 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16296 = mem[_16274]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15994) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16274]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / mem[_16274] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / mem[_16274]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16619 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16689 = mem[_16619]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16848 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16848] > !_16689:
                                                revert with 0, 17
                                            if mem[_16848] + _16689 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16848] + _16689:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16848] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6) + (_16689 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16620 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16691 = mem[_16620]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16849 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16849] > !_16691:
                                                revert with 0, 17
                                            if mem[_16849] + _16691 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16849] + _16691:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6) + (_16691 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994) / _16296 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16336 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16378 = mem[_16336]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16336]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / mem[_16336] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / mem[_16336]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16899 = mem[_16824]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17053 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17053] > !_16899:
                                                    revert with 0, 17
                                                if mem[_17053] + _16899 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17053] + _16899:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17053] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6) + (_16899 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16825 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16901 = mem[_16825]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17054 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17054] > !_16901:
                                                    revert with 0, 17
                                                if mem[_17054] + _16901 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17054] + _16901:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17054] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6) + (_16901 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / 10^stor259) / _16378 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12271 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12271 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19447 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19477 = mem[_19447]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19447]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / mem[_19447] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / mem[_19447]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19725 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19775 = mem[_19725]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19944 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19944] > !_19775:
                                                    revert with 0, 17
                                                if mem[_19944] + _19775 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19944] + _19775:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19944] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6) + (_19775 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19726 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19777 = mem[_19726]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19945 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19945] > !_19777:
                                                    revert with 0, 17
                                                if mem[_19945] + _19777 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19945] + _19777:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19945] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6) + (_19777 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15994 / s * t) / _19477 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _12283 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12283]:
                                        revert with 0, 50
                                    mem[_12283 + 32] = token1Address
                                    if 1 >= mem[_12283]:
                                        revert with 0, 50
                                    mem[_12283 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12283 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12283 + 100] = s * t
                                    mem[_12283 + 132] = 64
                                    mem[_12283 + 164] = mem[_12283]
                                    idx = 0
                                    s = _12283 + 32
                                    t = _12283 + 196
                                    while idx < mem[_12283]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12283 + (32 * mem[_12283]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16037 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16069 = mem[_16037]
                                    require mem[_16037] <= test266151307()
                                    require _16037 + mem[_16037] + 31 < _16037 + return_data.size
                                    _16093 = mem[_16037 + mem[_16037]]
                                    if mem[_16037 + mem[_16037]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16037 + mem[_16037]]) + 1 < 0 or _16037 + ceil32(return_data.size) + ceil32(32 * mem[_16037 + mem[_16037]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16037 + ceil32(return_data.size) + ceil32(32 * mem[_16037 + mem[_16037]]) + 1
                                    mem[_16037 + ceil32(return_data.size)] = _16093
                                    require _16069 + (32 * _16093) + 32 <= return_data.size
                                    mem[_16037 + ceil32(return_data.size) + 32 len ceil32(32 * _16093)] = mem[_16037 + _16069 + 32 len ceil32(32 * _16093)]
                                    var117002 = _16037 + ceil32(return_data.size) + ceil32(32 * _16093) + 32
                                    if 1 >= _16093:
                                        revert with 0, 50
                                    _19313 = mem[_16037 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16037 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16037 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19522 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19536 = mem[_19522]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19522]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / mem[_19522] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / mem[_19522]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19908 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20006 = mem[_19908]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20201 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20201] > !_20006:
                                                revert with 0, 17
                                            if mem[_20201] + _20006 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20201] + _20006:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20201] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6) + (_20006 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19909 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20008 = mem[_19909]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20202 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20202] > !_20008:
                                                revert with 0, 17
                                            if mem[_20202] + _20008 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20202] + _20008:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20202] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6) + (_20008 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313) / _19536 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16037 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16037 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19581 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19622 = mem[_19581]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19581]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / mem[_19581] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / mem[_19581]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20170 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20297 = mem[_20170]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20489 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20489] > !_20297:
                                                    revert with 0, 17
                                                if mem[_20489] + _20297 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20489] + _20297:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20489] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6) + (_20297 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20171 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20299 = mem[_20171]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20490 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20490] > !_20299:
                                                    revert with 0, 17
                                                if mem[_20490] + _20299 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20490] + _20299:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20490] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6) + (_20299 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / 10^stor259) / _19622 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16037 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16037 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21992 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22010 = mem[_21992]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21992]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / mem[_21992] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / mem[_21992]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22219 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22278 = mem[_22219]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22434 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22434] > !_22278:
                                                    revert with 0, 17
                                                if mem[_22434] + _22278 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22434] + _22278:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22434] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6) + (_22278 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22220 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22280 = mem[_22220]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22435 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22435] > !_22280:
                                                    revert with 0, 17
                                                if mem[_22435] + _22280 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22435] + _22280:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22435] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6) + (_22280 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19313 / s * t) / _22010 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _8273 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8273]:
                                revert with 0, 50
                            mem[_8273 + 32] = token1Address
                            if 1 >= mem[_8273]:
                                revert with 0, 50
                            mem[_8273 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8273 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8273 + 100] = 10^18
                            mem[_8273 + 132] = 64
                            mem[_8273 + 164] = mem[_8273]
                            idx = 0
                            s = _8273 + 32
                            t = _8273 + 196
                            while idx < mem[_8273]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8273 + (32 * mem[_8273]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12273 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12298 = mem[_12273]
                            require mem[_12273] <= test266151307()
                            require _12273 + mem[_12273] + 31 < _12273 + return_data.size
                            _12314 = mem[_12273 + mem[_12273]]
                            if mem[_12273 + mem[_12273]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12273 + mem[_12273]]) + 1 < 0 or _12273 + ceil32(return_data.size) + ceil32(32 * mem[_12273 + mem[_12273]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12273 + ceil32(return_data.size) + ceil32(32 * mem[_12273 + mem[_12273]]) + 1
                            mem[_12273 + ceil32(return_data.size)] = _12314
                            require _12298 + (32 * _12314) + 32 <= return_data.size
                            mem[_12273 + ceil32(return_data.size) + 32 len ceil32(32 * _12314)] = mem[_12273 + _12298 + 32 len ceil32(32 * _12314)]
                            var101002 = _12273 + ceil32(return_data.size) + ceil32(32 * _12314) + 32
                            if 1 >= _12314:
                                revert with 0, 50
                            _15996 = mem[_12273 + ceil32(return_data.size) + 64]
                            _16009 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_16009]:
                                revert with 0, 50
                            mem[_16009 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_16009]:
                                revert with 0, 50
                            mem[_16009 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_16009 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_16009 + 100] = _15996
                            mem[_16009 + 132] = 64
                            mem[_16009 + 164] = mem[_16009]
                            idx = 0
                            s = _16009 + 32
                            t = _16009 + 196
                            while idx < mem[_16009]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _16009 + (32 * mem[_16009]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _19340 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _19358 = mem[_19340]
                            require mem[_19340] <= test266151307()
                            require _19340 + mem[_19340] + 31 < _19340 + return_data.size
                            _19374 = mem[_19340 + mem[_19340]]
                            if mem[_19340 + mem[_19340]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_19340 + mem[_19340]]) + 1 < 0 or _19340 + ceil32(return_data.size) + ceil32(32 * mem[_19340 + mem[_19340]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _19340 + ceil32(return_data.size) + ceil32(32 * mem[_19340 + mem[_19340]]) + 1
                            mem[_19340 + ceil32(return_data.size)] = _19374
                            require _19358 + (32 * _19374) + 32 <= return_data.size
                            mem[_19340 + ceil32(return_data.size) + 32 len ceil32(32 * _19374)] = mem[_19340 + _19358 + 32 len ceil32(32 * _19374)]
                            if 1 >= _19374:
                                revert with 0, 50
                            _21917 = mem[_19340 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22041 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22051 = mem[_22041]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22041]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / mem[_22041] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / mem[_22041]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22395 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22472 = mem[_22395]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22632 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22632] > !_22472:
                                        revert with 0, 17
                                    if mem[_22632] + _22472 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22632] + _22472:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22632] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6) + (_22472 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22396 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22474 = mem[_22396]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22633 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22633] > !_22474:
                                        revert with 0, 17
                                    if mem[_22633] + _22474 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22633] + _22474:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22633] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6) + (_22474 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917) / _22051 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22083 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22112 = mem[_22083]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22083]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / mem[_22083] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / mem[_22083]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22611 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22706 = mem[_22611]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22854 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22854] > !_22706:
                                            revert with 0, 17
                                        if mem[_22854] + _22706 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22854] + _22706:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22854] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6) + (_22706 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22612 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22708 = mem[_22612]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22855 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22855] > !_22708:
                                            revert with 0, 17
                                        if mem[_22855] + _22708 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22855] + _22708:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22855] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6) + (_22708 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / 10^stor259) / _22112 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19340 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19340 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23579 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23590 = mem[_23579]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23579]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / mem[_23579] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / mem[_23579]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23711 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23750 = mem[_23711]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23848 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23848] > !_23750:
                                            revert with 0, 17
                                        if mem[_23848] + _23750 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23848] + _23750:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23848] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6) + (_23750 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23712 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23752 = mem[_23712]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23849 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23849] > !_23752:
                                            revert with 0, 17
                                        if mem[_23849] + _23752 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23849] + _23752:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6) + (_23752 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21917 / s * t) / _23590 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12428 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12428]:
                                    revert with 0, 50
                                mem[_12428 + 32] = token1Address
                                if 1 >= mem[_12428]:
                                    revert with 0, 50
                                mem[_12428 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12428 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12428 + 100] = 1
                                mem[_12428 + 132] = 64
                                mem[_12428 + 164] = mem[_12428]
                                idx = 0
                                u = _12428 + 32
                                v = _12428 + 196
                                while idx < mem[_12428]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12428 + (32 * mem[_12428]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16035 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16067 = mem[_16035]
                                require mem[_16035] <= test266151307()
                                require _16035 + mem[_16035] + 31 < _16035 + return_data.size
                                _16091 = mem[_16035 + mem[_16035]]
                                if mem[_16035 + mem[_16035]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16035 + mem[_16035]]) + 1 < 0 or _16035 + ceil32(return_data.size) + ceil32(32 * mem[_16035 + mem[_16035]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16035 + ceil32(return_data.size) + ceil32(32 * mem[_16035 + mem[_16035]]) + 1
                                mem[_16035 + ceil32(return_data.size)] = _16091
                                require _16067 + (32 * _16091) + 32 <= return_data.size
                                mem[_16035 + ceil32(return_data.size) + 32 len ceil32(32 * _16091)] = mem[_16035 + _16067 + 32 len ceil32(32 * _16091)]
                                var112002 = _16035 + ceil32(return_data.size) + ceil32(32 * _16091) + 32
                                if 1 >= _16091:
                                    revert with 0, 50
                                _19309 = mem[_16035 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19521 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19535 = mem[_19521]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19521]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / mem[_19521] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / mem[_19521]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19906 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _20000 = mem[_19906]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20198 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20198] > !_20000:
                                            revert with 0, 17
                                        if mem[_20198] + _20000 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20198] + _20000:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20198] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6) + (_20000 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19907 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _20002 = mem[_19907]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20199 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20199] > !_20002:
                                            revert with 0, 17
                                        if mem[_20199] + _20002 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20199] + _20002:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20199] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6) + (_20002 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309) / _19535 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19579 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19619 = mem[_19579]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19579]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / mem[_19579] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / mem[_19579]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20168 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20287 = mem[_20168]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20480 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20480] > !_20287:
                                                revert with 0, 17
                                            if mem[_20480] + _20287 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20480] + _20287:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20480] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6) + (_20287 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20169 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20289 = mem[_20169]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20481 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20481] > !_20289:
                                                revert with 0, 17
                                            if mem[_20481] + _20289 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20481] + _20289:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20481] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6) + (_20289 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / 10^stor259) / _19619 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16035 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16035 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21990 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22009 = mem[_21990]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21990]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / mem[_21990] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / mem[_21990]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22217 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22272 = mem[_22217]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22429 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22429] > !_22272:
                                                revert with 0, 17
                                            if mem[_22429] + _22272 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22429] + _22272:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22429] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6) + (_22272 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22218 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22274 = mem[_22218]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22430 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22430] > !_22274:
                                                revert with 0, 17
                                            if mem[_22430] + _22274 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22430] + _22274:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22430] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6) + (_22274 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19309 / u * v) / _22009 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12493 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12493]:
                                        revert with 0, 50
                                    mem[_12493 + 32] = token1Address
                                    if 1 >= mem[_12493]:
                                        revert with 0, 50
                                    mem[_12493 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12493 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12493 + 100] = 10^stor259
                                    mem[_12493 + 132] = 64
                                    mem[_12493 + 164] = mem[_12493]
                                    idx = 0
                                    u = _12493 + 32
                                    v = _12493 + 196
                                    while idx < mem[_12493]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12493 + (32 * mem[_12493]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16034 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16066 = mem[_16034]
                                    require mem[_16034] <= test266151307()
                                    require _16034 + mem[_16034] + 31 < _16034 + return_data.size
                                    _16090 = mem[_16034 + mem[_16034]]
                                    if mem[_16034 + mem[_16034]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16034 + mem[_16034]]) + 1 < 0 or _16034 + ceil32(return_data.size) + ceil32(32 * mem[_16034 + mem[_16034]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16034 + ceil32(return_data.size) + ceil32(32 * mem[_16034 + mem[_16034]]) + 1
                                    mem[_16034 + ceil32(return_data.size)] = _16090
                                    require _16066 + (32 * _16090) + 32 <= return_data.size
                                    mem[_16034 + ceil32(return_data.size) + 32 len ceil32(32 * _16090)] = mem[_16034 + _16066 + 32 len ceil32(32 * _16090)]
                                    var117002 = _16034 + ceil32(return_data.size) + ceil32(32 * _16090) + 32
                                    if 1 >= _16090:
                                        revert with 0, 50
                                    _19308 = mem[_16034 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16034 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16034 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19520 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19534 = mem[_19520]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19520]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / mem[_19520] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / mem[_19520]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19904 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19996 = mem[_19904]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20196 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20196] > !_19996:
                                                revert with 0, 17
                                            if mem[_20196] + _19996 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20196] + _19996:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20196] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6) + (_19996 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19905 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19998 = mem[_19905]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20197 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20197] > !_19998:
                                                revert with 0, 17
                                            if mem[_20197] + _19998 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20197] + _19998:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20197] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6) + (_19998 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308) / _19534 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16034 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16034 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19578 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19616 = mem[_19578]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19578]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / mem[_19578] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / mem[_19578]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20166 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20279 = mem[_20166]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20474 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20474] > !_20279:
                                                    revert with 0, 17
                                                if mem[_20474] + _20279 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20474] + _20279:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20474] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6) + (_20279 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20167 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20281 = mem[_20167]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20475 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20475] > !_20281:
                                                    revert with 0, 17
                                                if mem[_20475] + _20281 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20475] + _20281:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20475] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6) + (_20281 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / 10^stor259) / _19616 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16034 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16034 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21989 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22008 = mem[_21989]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21989]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / mem[_21989] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / mem[_21989]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22215 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22268 = mem[_22215]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22427 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22427] > !_22268:
                                                    revert with 0, 17
                                                if mem[_22427] + _22268 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22427] + _22268:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22427] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6) + (_22268 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22216 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22270 = mem[_22216]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22428 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22428] > !_22270:
                                                    revert with 0, 17
                                                if mem[_22428] + _22270 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22428] + _22270:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22428] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6) + (_22270 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19308 / u * v) / _22008 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _16047 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16047]:
                                        revert with 0, 50
                                    mem[_16047 + 32] = token1Address
                                    if 1 >= mem[_16047]:
                                        revert with 0, 50
                                    mem[_16047 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16047 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16047 + 100] = u * v
                                    mem[_16047 + 132] = 64
                                    mem[_16047 + 164] = mem[_16047]
                                    idx = 0
                                    u = _16047 + 32
                                    v = _16047 + 196
                                    while idx < mem[_16047]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16047 + (32 * mem[_16047]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19338 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19356 = mem[_19338]
                                    require mem[_19338] <= test266151307()
                                    require _19338 + mem[_19338] + 31 < _19338 + return_data.size
                                    _19372 = mem[_19338 + mem[_19338]]
                                    if mem[_19338 + mem[_19338]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19338 + mem[_19338]]) + 1 < 0 or _19338 + ceil32(return_data.size) + ceil32(32 * mem[_19338 + mem[_19338]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19338 + ceil32(return_data.size) + ceil32(32 * mem[_19338 + mem[_19338]]) + 1
                                    mem[_19338 + ceil32(return_data.size)] = _19372
                                    require _19356 + (32 * _19372) + 32 <= return_data.size
                                    mem[_19338 + ceil32(return_data.size) + 32 len ceil32(32 * _19372)] = mem[_19338 + _19356 + 32 len ceil32(32 * _19372)]
                                    if 1 >= _19372:
                                        revert with 0, 50
                                    _21915 = mem[_19338 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22040 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22050 = mem[_22040]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21915) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22040]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / mem[_22040] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / mem[_22040]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22393 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22468 = mem[_22393]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22630 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22630] > !_22468:
                                                revert with 0, 17
                                            if mem[_22630] + _22468 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22630] + _22468:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22630] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6) + (_22468 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22394 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22470 = mem[_22394]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22631 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22631] > !_22470:
                                                revert with 0, 17
                                            if mem[_22631] + _22470 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22631] + _22470:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22631] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6) + (_22470 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915) / _22050 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22082 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22109 = mem[_22082]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22082]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / mem[_22082] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / mem[_22082]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22608 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22698 = mem[_22608]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22848 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22848] > !_22698:
                                                    revert with 0, 17
                                                if mem[_22848] + _22698 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22848] + _22698:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22848] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6) + (_22698 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22609 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22700 = mem[_22609]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22849 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22849] > !_22700:
                                                    revert with 0, 17
                                                if mem[_22849] + _22700 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22849] + _22700:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6) + (_22700 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / 10^stor259) / _22109 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19338 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19338 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23578 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23589 = mem[_23578]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23578]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / mem[_23578] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / mem[_23578]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23709 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23746 = mem[_23709]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23846 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23846] > !_23746:
                                                    revert with 0, 17
                                                if mem[_23846] + _23746 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23846] + _23746:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23846] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6) + (_23746 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23710 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23748 = mem[_23710]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23847 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23847] > !_23748:
                                                    revert with 0, 17
                                                if mem[_23847] + _23748 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23847] + _23748:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23847] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6) + (_23748 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21915 / u * v) / _23589 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _12339 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12339]:
                                revert with 0, 50
                            mem[_12339 + 32] = token1Address
                            if 1 >= mem[_12339]:
                                revert with 0, 50
                            mem[_12339 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12339 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12339 + 100] = 10^18
                            mem[_12339 + 132] = 64
                            mem[_12339 + 164] = mem[_12339]
                            idx = 0
                            u = _12339 + 32
                            v = _12339 + 196
                            while idx < mem[_12339]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12339 + (32 * mem[_12339]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16036 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16068 = mem[_16036]
                            require mem[_16036] <= test266151307()
                            require _16036 + mem[_16036] + 31 < _16036 + return_data.size
                            _16092 = mem[_16036 + mem[_16036]]
                            if mem[_16036 + mem[_16036]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16036 + mem[_16036]]) + 1 < 0 or _16036 + ceil32(return_data.size) + ceil32(32 * mem[_16036 + mem[_16036]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16036 + ceil32(return_data.size) + ceil32(32 * mem[_16036 + mem[_16036]]) + 1
                            mem[_16036 + ceil32(return_data.size)] = _16092
                            require _16068 + (32 * _16092) + 32 <= return_data.size
                            mem[_16036 + ceil32(return_data.size) + 32 len ceil32(32 * _16092)] = mem[_16036 + _16068 + 32 len ceil32(32 * _16092)]
                            var106002 = _16036 + ceil32(return_data.size) + ceil32(32 * _16092) + 32
                            if 1 >= _16092:
                                revert with 0, 50
                            _19310 = mem[_16036 + ceil32(return_data.size) + 64]
                            _19323 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_19323]:
                                revert with 0, 50
                            mem[_19323 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_19323]:
                                revert with 0, 50
                            mem[_19323 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_19323 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_19323 + 100] = _19310
                            mem[_19323 + 132] = 64
                            mem[_19323 + 164] = mem[_19323]
                            idx = 0
                            u = _19323 + 32
                            v = _19323 + 196
                            while idx < mem[_19323]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _19323 + (32 * mem[_19323]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21926 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21932 = mem[_21926]
                            require mem[_21926] <= test266151307()
                            require _21926 + mem[_21926] + 31 < _21926 + return_data.size
                            _21938 = mem[_21926 + mem[_21926]]
                            if mem[_21926 + mem[_21926]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21926 + mem[_21926]]) + 1 < 0 or _21926 + ceil32(return_data.size) + ceil32(32 * mem[_21926 + mem[_21926]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21926 + ceil32(return_data.size) + ceil32(32 * mem[_21926 + mem[_21926]]) + 1
                            mem[_21926 + ceil32(return_data.size)] = _21938
                            require _21932 + (32 * _21938) + 32 <= return_data.size
                            mem[_21926 + ceil32(return_data.size) + 32 len ceil32(32 * _21938)] = mem[_21926 + _21932 + 32 len ceil32(32 * _21938)]
                            if 1 >= _21938:
                                revert with 0, 50
                            _23544 = mem[_21926 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21926 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21926 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23606 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23611 = mem[_23606]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23544) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23606]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / mem[_23606] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / mem[_23606]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23827 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23868 = mem[_23827]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23952 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23952] > !_23868:
                                        revert with 0, 17
                                    if mem[_23952] + _23868 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23952] + _23868:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23952] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6) + (_23868 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23828 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23870 = mem[_23828]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23953 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23953] > !_23870:
                                        revert with 0, 17
                                    if mem[_23953] + _23870 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23953] + _23870:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23953] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6) + (_23870 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544) / _23611 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21926 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21926 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23626 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23641 = mem[_23626]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23626]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / mem[_23626] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / mem[_23626]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23942 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23990 = mem[_23942]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24062 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24062] > !_23990:
                                            revert with 0, 17
                                        if mem[_24062] + _23990 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24062] + _23990:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24062] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6) + (_23990 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23943 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23992 = mem[_23943]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24063 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24063] > !_23992:
                                            revert with 0, 17
                                        if mem[_24063] + _23992 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24063] + _23992:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24063] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6) + (_23992 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / 10^stor259) / _23641 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21926 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21926 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24297 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24302 = mem[_24297]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24297]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / mem[_24297] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / mem[_24297]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24343 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24361 = mem[_24343]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24399 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24399] > !_24361:
                                            revert with 0, 17
                                        if mem[_24399] + _24361 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24399] + _24361:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24399] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6) + (_24361 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24344 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24363 = mem[_24344]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24400 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24400] > !_24363:
                                            revert with 0, 17
                                        if mem[_24400] + _24363 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24400] + _24363:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24400] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6) + (_24363 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8220 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23544 / u * v) / _24302 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4154 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4163 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require _4154 + (32 * _4163) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4163)] = mem[(2 * ceil32(return_data.size)) + _4154 + 224 len ceil32(32 * _4163)]
                    if 1 >= _4163:
                        revert with 0, 50
                    _8219 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8279 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8279]:
                                    revert with 0, 50
                                mem[_8279 + 32] = token1Address
                                if 1 >= mem[_8279]:
                                    revert with 0, 50
                                mem[_8279 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8279 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8279 + 100] = 1
                                mem[_8279 + 132] = 64
                                mem[_8279 + 164] = mem[_8279]
                                idx = 0
                                s = _8279 + 32
                                t = _8279 + 196
                                while idx < mem[_8279]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8279 + (32 * mem[_8279]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12267 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12293 = mem[_12267]
                                require mem[_12267] <= test266151307()
                                require _12267 + mem[_12267] + 31 < _12267 + return_data.size
                                _12309 = mem[_12267 + mem[_12267]]
                                if mem[_12267 + mem[_12267]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12267 + mem[_12267]]) + 1 < 0 or _12267 + ceil32(return_data.size) + ceil32(32 * mem[_12267 + mem[_12267]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12267 + ceil32(return_data.size) + ceil32(32 * mem[_12267 + mem[_12267]]) + 1
                                mem[_12267 + ceil32(return_data.size)] = _12309
                                require _12293 + (32 * _12309) + 32 <= return_data.size
                                mem[_12267 + ceil32(return_data.size) + 32 len ceil32(32 * _12309)] = mem[_12267 + _12293 + 32 len ceil32(32 * _12309)]
                                if 1 >= _12309:
                                    revert with 0, 50
                                _15986 = mem[_12267 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_12267 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12267 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16272 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16294 = mem[_16272]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15986) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_16272]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / mem[_16272] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / mem[_16272]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16616 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16683 = mem[_16616]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16844 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16844] > !_16683:
                                            revert with 0, 17
                                        if mem[_16844] + _16683 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16844] + _16683:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16844] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6) + (_16683 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16617 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16685 = mem[_16617]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16845 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16845] > !_16685:
                                            revert with 0, 17
                                        if mem[_16845] + _16685 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16845] + _16685:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16845] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6) + (_16685 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986) / _16294 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12267 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12267 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16334 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16374 = mem[_16334]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16334]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / mem[_16334] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / mem[_16334]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16819 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16889 = mem[_16819]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17043 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17043] > !_16889:
                                                revert with 0, 17
                                            if mem[_17043] + _16889 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17043] + _16889:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17043] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6) + (_16889 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16820 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16891 = mem[_16820]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _17044 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_17044] > !_16891:
                                                revert with 0, 17
                                            if mem[_17044] + _16891 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17044] + _16891:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_17044] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6) + (_16891 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / 10^stor259) / _16374 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12267 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12267 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19443 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19475 = mem[_19443]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19443]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / mem[_19443] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / mem[_19443]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19723 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19767 = mem[_19723]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19936 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19936] > !_19767:
                                                revert with 0, 17
                                            if mem[_19936] + _19767 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19936] + _19767:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19936] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6) + (_19767 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19724 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19769 = mem[_19724]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19937 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19937] > !_19769:
                                                revert with 0, 17
                                            if mem[_19937] + _19769 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19937] + _19769:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19937] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6) + (_19769 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15986 / s * t) / _19475 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8328 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8328]:
                                        revert with 0, 50
                                    mem[_8328 + 32] = token1Address
                                    if 1 >= mem[_8328]:
                                        revert with 0, 50
                                    mem[_8328 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8328 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8328 + 100] = 10^stor259
                                    mem[_8328 + 132] = 64
                                    mem[_8328 + 164] = mem[_8328]
                                    idx = 0
                                    s = _8328 + 32
                                    t = _8328 + 196
                                    while idx < mem[_8328]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8328 + (32 * mem[_8328]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12266 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12292 = mem[_12266]
                                    require mem[_12266] <= test266151307()
                                    require _12266 + mem[_12266] + 31 < _12266 + return_data.size
                                    _12308 = mem[_12266 + mem[_12266]]
                                    if mem[_12266 + mem[_12266]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12266 + mem[_12266]]) + 1 < 0 or _12266 + ceil32(return_data.size) + ceil32(32 * mem[_12266 + mem[_12266]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12266 + ceil32(return_data.size) + ceil32(32 * mem[_12266 + mem[_12266]]) + 1
                                    mem[_12266 + ceil32(return_data.size)] = _12308
                                    require _12292 + (32 * _12308) + 32 <= return_data.size
                                    mem[_12266 + ceil32(return_data.size) + 32 len ceil32(32 * _12308)] = mem[_12266 + _12292 + 32 len ceil32(32 * _12308)]
                                    var112002 = _12266 + ceil32(return_data.size) + ceil32(32 * _12308) + 32
                                    if 1 >= _12308:
                                        revert with 0, 50
                                    _15985 = mem[_12266 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12266 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12266 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16271 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16293 = mem[_16271]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15985) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16271]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / mem[_16271] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / mem[_16271]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16614 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16679 = mem[_16614]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16842 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16842] > !_16679:
                                                revert with 0, 17
                                            if mem[_16842] + _16679 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16842] + _16679:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16842] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6) + (_16679 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16615 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16681 = mem[_16615]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16843 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16843] > !_16681:
                                                revert with 0, 17
                                            if mem[_16843] + _16681 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16843] + _16681:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16843] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6) + (_16681 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985) / _16293 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12266 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12266 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16333 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16371 = mem[_16333]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16333]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / mem[_16333] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / mem[_16333]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16817 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16881 = mem[_16817]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17037 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17037] > !_16881:
                                                    revert with 0, 17
                                                if mem[_17037] + _16881 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17037] + _16881:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17037] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6) + (_16881 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16818 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16883 = mem[_16818]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17038 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17038] > !_16883:
                                                    revert with 0, 17
                                                if mem[_17038] + _16883 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17038] + _16883:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17038] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6) + (_16883 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / 10^stor259) / _16371 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12266 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12266 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19442 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19474 = mem[_19442]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19442]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / mem[_19442] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / mem[_19442]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19721 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19763 = mem[_19721]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19934 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19934] > !_19763:
                                                    revert with 0, 17
                                                if mem[_19934] + _19763 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19934] + _19763:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19934] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6) + (_19763 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19722 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19765 = mem[_19722]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19935 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19935] > !_19765:
                                                    revert with 0, 17
                                                if mem[_19935] + _19765 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19935] + _19765:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19935] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6) + (_19765 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15985 / s * t) / _19474 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _12281 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12281]:
                                        revert with 0, 50
                                    mem[_12281 + 32] = token1Address
                                    if 1 >= mem[_12281]:
                                        revert with 0, 50
                                    mem[_12281 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12281 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12281 + 100] = s * t
                                    mem[_12281 + 132] = 64
                                    mem[_12281 + 164] = mem[_12281]
                                    idx = 0
                                    s = _12281 + 32
                                    t = _12281 + 196
                                    while idx < mem[_12281]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12281 + (32 * mem[_12281]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16030 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16063 = mem[_16030]
                                    require mem[_16030] <= test266151307()
                                    require _16030 + mem[_16030] + 31 < _16030 + return_data.size
                                    _16087 = mem[_16030 + mem[_16030]]
                                    if mem[_16030 + mem[_16030]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16030 + mem[_16030]]) + 1 < 0 or _16030 + ceil32(return_data.size) + ceil32(32 * mem[_16030 + mem[_16030]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16030 + ceil32(return_data.size) + ceil32(32 * mem[_16030 + mem[_16030]]) + 1
                                    mem[_16030 + ceil32(return_data.size)] = _16087
                                    require _16063 + (32 * _16087) + 32 <= return_data.size
                                    mem[_16030 + ceil32(return_data.size) + 32 len ceil32(32 * _16087)] = mem[_16030 + _16063 + 32 len ceil32(32 * _16087)]
                                    var117002 = _16030 + ceil32(return_data.size) + ceil32(32 * _16087) + 32
                                    if 1 >= _16087:
                                        revert with 0, 50
                                    _19305 = mem[_16030 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19519 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19533 = mem[_19519]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _19305) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19519]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / mem[_19519] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / mem[_19519]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19902 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19992 = mem[_19902]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20194 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20194] > !_19992:
                                                revert with 0, 17
                                            if mem[_20194] + _19992 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20194] + _19992:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20194] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6) + (_19992 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19903 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19994 = mem[_19903]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20195 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20195] > !_19994:
                                                revert with 0, 17
                                            if mem[_20195] + _19994 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20195] + _19994:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20195] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6) + (_19994 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305) / _19533 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19577 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19613 = mem[_19577]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19577]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / mem[_19577] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / mem[_19577]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20162 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20271 = mem[_20162]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20468 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20468] > !_20271:
                                                    revert with 0, 17
                                                if mem[_20468] + _20271 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20468] + _20271:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20468] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6) + (_20271 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20163 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20273 = mem[_20163]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20469 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20469] > !_20273:
                                                    revert with 0, 17
                                                if mem[_20469] + _20273 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20469] + _20273:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20469] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6) + (_20273 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / 10^stor259) / _19613 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16030 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16030 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21988 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22007 = mem[_21988]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21988]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / mem[_21988] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / mem[_21988]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22213 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22264 = mem[_22213]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22425 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22425] > !_22264:
                                                    revert with 0, 17
                                                if mem[_22425] + _22264 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22425] + _22264:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22425] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6) + (_22264 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22214 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22266 = mem[_22214]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22426 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22426] > !_22266:
                                                    revert with 0, 17
                                                if mem[_22426] + _22266 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22426] + _22266:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22426] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6) + (_22266 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19305 / s * t) / _22007 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _8243 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8243]:
                                revert with 0, 50
                            mem[_8243 + 32] = token1Address
                            if 1 >= mem[_8243]:
                                revert with 0, 50
                            mem[_8243 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8243 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8243 + 100] = 10^18
                            mem[_8243 + 132] = 64
                            mem[_8243 + 164] = mem[_8243]
                            idx = 0
                            s = _8243 + 32
                            t = _8243 + 196
                            while idx < mem[_8243]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8243 + (32 * mem[_8243]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12268 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12294 = mem[_12268]
                            require mem[_12268] <= test266151307()
                            require _12268 + mem[_12268] + 31 < _12268 + return_data.size
                            _12310 = mem[_12268 + mem[_12268]]
                            if mem[_12268 + mem[_12268]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_12268 + mem[_12268]]) + 1 < 0 or _12268 + ceil32(return_data.size) + ceil32(32 * mem[_12268 + mem[_12268]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _12268 + ceil32(return_data.size) + ceil32(32 * mem[_12268 + mem[_12268]]) + 1
                            mem[_12268 + ceil32(return_data.size)] = _12310
                            require _12294 + (32 * _12310) + 32 <= return_data.size
                            mem[_12268 + ceil32(return_data.size) + 32 len ceil32(32 * _12310)] = mem[_12268 + _12294 + 32 len ceil32(32 * _12310)]
                            var101002 = _12268 + ceil32(return_data.size) + ceil32(32 * _12310) + 32
                            var101005 = _12268 + _12294 + ceil32(32 * _12310) + 32
                            if 1 >= _12310:
                                revert with 0, 50
                            _15987 = mem[_12268 + ceil32(return_data.size) + 64]
                            _16007 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_16007]:
                                revert with 0, 50
                            mem[_16007 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_16007]:
                                revert with 0, 50
                            mem[_16007 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_16007 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_16007 + 100] = _15987
                            mem[_16007 + 132] = 64
                            mem[_16007 + 164] = mem[_16007]
                            idx = 0
                            s = _16007 + 32
                            t = _16007 + 196
                            while idx < mem[_16007]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _16007 + (32 * mem[_16007]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _19337 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _19355 = mem[_19337]
                            require mem[_19337] <= test266151307()
                            require _19337 + mem[_19337] + 31 < _19337 + return_data.size
                            _19371 = mem[_19337 + mem[_19337]]
                            if mem[_19337 + mem[_19337]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_19337 + mem[_19337]]) + 1 < 0 or _19337 + ceil32(return_data.size) + ceil32(32 * mem[_19337 + mem[_19337]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _19337 + ceil32(return_data.size) + ceil32(32 * mem[_19337 + mem[_19337]]) + 1
                            mem[_19337 + ceil32(return_data.size)] = _19371
                            require _19355 + (32 * _19371) + 32 <= return_data.size
                            mem[_19337 + ceil32(return_data.size) + 32 len ceil32(32 * _19371)] = mem[_19337 + _19355 + 32 len ceil32(32 * _19371)]
                            if 1 >= _19371:
                                revert with 0, 50
                            _21914 = mem[_19337 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22039 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22049 = mem[_22039]
                                if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _21914) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22039]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / mem[_22039] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / mem[_22039]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22391 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22464 = mem[_22391]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22628 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22628] > !_22464:
                                        revert with 0, 17
                                    if mem[_22628] + _22464 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22628] + _22464:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22628] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6) + (_22464 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22392 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22466 = mem[_22392]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22629 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22629] > !_22466:
                                        revert with 0, 17
                                    if mem[_22629] + _22466 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22629] + _22466:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22629] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6) + (_22466 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914) / _22049 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22081 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22106 = mem[_22081]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22081]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / mem[_22081] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / mem[_22081]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22606 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22690 = mem[_22606]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22842 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22842] > !_22690:
                                            revert with 0, 17
                                        if mem[_22842] + _22690 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22842] + _22690:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22842] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6) + (_22690 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22607 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22692 = mem[_22607]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22843 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22843] > !_22692:
                                            revert with 0, 17
                                        if mem[_22843] + _22692 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22843] + _22692:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22843] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6) + (_22692 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / 10^stor259) / _22106 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19337 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _8219 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19337 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23577 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23588 = mem[_23577]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8219) + (Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23577]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / mem[_23577] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / mem[_23577]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23707 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23742 = mem[_23707]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23844 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23844] > !_23742:
                                            revert with 0, 17
                                        if mem[_23844] + _23742 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23844] + _23742:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23844] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6) + (_23742 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23708 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23744 = mem[_23708]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23845 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23845] > !_23744:
                                            revert with 0, 17
                                        if mem[_23845] + _23744 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23845] + _23744:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23845] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6) + (_23744 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21914 / s * t) / _23588 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8326 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8326]:
                                        revert with 0, 50
                                    mem[_8326 + 32] = token1Address
                                    if 1 >= mem[_8326]:
                                        revert with 0, 50
                                    mem[_8326 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8326 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8326 + 100] = 1
                                    mem[_8326 + 132] = 64
                                    mem[_8326 + 164] = mem[_8326]
                                    idx = 0
                                    s = _8326 + 32
                                    t = _8326 + 196
                                    while idx < mem[_8326]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8326 + (32 * mem[_8326]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _12262 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _12289 = mem[_12262]
                                    require mem[_12262] <= test266151307()
                                    require _12262 + mem[_12262] + 31 < _12262 + return_data.size
                                    _12305 = mem[_12262 + mem[_12262]]
                                    if mem[_12262 + mem[_12262]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_12262 + mem[_12262]]) + 1 < 0 or _12262 + ceil32(return_data.size) + ceil32(32 * mem[_12262 + mem[_12262]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _12262 + ceil32(return_data.size) + ceil32(32 * mem[_12262 + mem[_12262]]) + 1
                                    mem[_12262 + ceil32(return_data.size)] = _12305
                                    require _12289 + (32 * _12305) + 32 <= return_data.size
                                    mem[_12262 + ceil32(return_data.size) + 32 len ceil32(32 * _12305)] = mem[_12262 + _12289 + 32 len ceil32(32 * _12305)]
                                    var112002 = _12262 + ceil32(return_data.size) + ceil32(32 * _12305) + 32
                                    if 1 >= _12305:
                                        revert with 0, 50
                                    _15980 = mem[_12262 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_12262 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12262 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16270 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16292 = mem[_16270]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15980) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_16270]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / mem[_16270] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / mem[_16270]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16612 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16673 = mem[_16612]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16839 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16839] > !_16673:
                                                revert with 0, 17
                                            if mem[_16839] + _16673 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16839] + _16673:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16839] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6) + (_16673 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16613 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16675 = mem[_16613]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16840 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16840] > !_16675:
                                                revert with 0, 17
                                            if mem[_16840] + _16675 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16840] + _16675:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6) + (_16675 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980) / _16292 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12262 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12262 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16331 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16368 = mem[_16331]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16331]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / mem[_16331] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / mem[_16331]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16814 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16871 = mem[_16814]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17028 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17028] > !_16871:
                                                    revert with 0, 17
                                                if mem[_17028] + _16871 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17028] + _16871:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17028] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6) + (_16871 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16815 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16873 = mem[_16815]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _17029 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_17029] > !_16873:
                                                    revert with 0, 17
                                                if mem[_17029] + _16873 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17029] + _16873:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_17029] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6) + (_16873 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / 10^stor259) / _16368 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12262 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12262 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19440 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19473 = mem[_19440]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19440]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / mem[_19440] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / mem[_19440]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19719 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19757 = mem[_19719]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19929 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19929] > !_19757:
                                                    revert with 0, 17
                                                if mem[_19929] + _19757 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19929] + _19757:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19929] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6) + (_19757 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19720 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19759 = mem[_19720]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19930 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19930] > !_19759:
                                                    revert with 0, 17
                                                if mem[_19930] + _19759 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19930] + _19759:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19930] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6) + (_19759 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15980 / s * t) / _19473 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8407 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8407]:
                                            revert with 0, 50
                                        mem[_8407 + 32] = token1Address
                                        if 1 >= mem[_8407]:
                                            revert with 0, 50
                                        mem[_8407 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8407 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8407 + 100] = 10^stor259
                                        mem[_8407 + 132] = 64
                                        mem[_8407 + 164] = mem[_8407]
                                        idx = 0
                                        s = _8407 + 32
                                        t = _8407 + 196
                                        while idx < mem[_8407]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8407 + (32 * mem[_8407]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _12261 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _12288 = mem[_12261]
                                        require mem[_12261] <= test266151307()
                                        require _12261 + mem[_12261] + 31 < _12261 + return_data.size
                                        _12304 = mem[_12261 + mem[_12261]]
                                        if mem[_12261 + mem[_12261]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_12261 + mem[_12261]]) + 1 < 0 or _12261 + ceil32(return_data.size) + ceil32(32 * mem[_12261 + mem[_12261]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _12261 + ceil32(return_data.size) + ceil32(32 * mem[_12261 + mem[_12261]]) + 1
                                        mem[_12261 + ceil32(return_data.size)] = _12304
                                        require _12288 + (32 * _12304) + 32 <= return_data.size
                                        mem[_12261 + ceil32(return_data.size) + 32 len ceil32(32 * _12304)] = mem[_12261 + _12288 + 32 len ceil32(32 * _12304)]
                                        var117002 = _12261 + ceil32(return_data.size) + ceil32(32 * _12304) + 32
                                        if 1 >= _12304:
                                            revert with 0, 50
                                        _15979 = mem[_12261 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_12261 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12261 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16269 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16291 = mem[_16269]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15979) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_16269]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / mem[_16269] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / mem[_16269]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16610 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16669 = mem[_16610]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16837 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16837] > !_16669:
                                                    revert with 0, 17
                                                if mem[_16837] + _16669 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16837] + _16669:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16837] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6) + (_16669 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16611 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16671 = mem[_16611]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16838 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16838] > !_16671:
                                                    revert with 0, 17
                                                if mem[_16838] + _16671 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16838] + _16671:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16838] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6) + (_16671 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979) / _16291 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12261 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12261 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16330 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16365 = mem[_16330]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_16330]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / mem[_16330] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / mem[_16330]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16812 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16863 = mem[_16812]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _17022 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_17022] > !_16863:
                                                        revert with 0, 17
                                                    if mem[_17022] + _16863 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17022] + _16863:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_17022] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6) + (_16863 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16813 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16865 = mem[_16813]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _17023 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_17023] > !_16865:
                                                        revert with 0, 17
                                                    if mem[_17023] + _16865 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_17023] + _16865:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_17023] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6) + (_16865 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / 10^stor259) / _16365 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_12261 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_12261 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19439 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19472 = mem[_19439]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19439]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / mem[_19439] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / mem[_19439]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19717 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19753 = mem[_19717]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19927 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19927] > !_19753:
                                                        revert with 0, 17
                                                    if mem[_19927] + _19753 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19927] + _19753:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19927] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6) + (_19753 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19718 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19755 = mem[_19718]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19928 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19928] > !_19755:
                                                        revert with 0, 17
                                                    if mem[_19928] + _19755 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19928] + _19755:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19928] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6) + (_19755 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15979 / s * t) / _19472 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _12279 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12279]:
                                            revert with 0, 50
                                        mem[_12279 + 32] = token1Address
                                        if 1 >= mem[_12279]:
                                            revert with 0, 50
                                        mem[_12279 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12279 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12279 + 100] = s * t
                                        mem[_12279 + 132] = 64
                                        mem[_12279 + 164] = mem[_12279]
                                        idx = 0
                                        s = _12279 + 32
                                        t = _12279 + 196
                                        while idx < mem[_12279]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12279 + (32 * mem[_12279]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16028 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16061 = mem[_16028]
                                        require mem[_16028] <= test266151307()
                                        require _16028 + mem[_16028] + 31 < _16028 + return_data.size
                                        _16085 = mem[_16028 + mem[_16028]]
                                        if mem[_16028 + mem[_16028]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16028 + mem[_16028]]) + 1 < 0 or _16028 + ceil32(return_data.size) + ceil32(32 * mem[_16028 + mem[_16028]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16028 + ceil32(return_data.size) + ceil32(32 * mem[_16028 + mem[_16028]]) + 1
                                        mem[_16028 + ceil32(return_data.size)] = _16085
                                        require _16061 + (32 * _16085) + 32 <= return_data.size
                                        mem[_16028 + ceil32(return_data.size) + 32 len ceil32(32 * _16085)] = mem[_16028 + _16061 + 32 len ceil32(32 * _16085)]
                                        var122002 = _16028 + ceil32(return_data.size) + ceil32(32 * _16085) + 32
                                        if 1 >= _16085:
                                            revert with 0, 50
                                        _19303 = mem[_16028 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16028 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16028 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19518 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19532 = mem[_19518]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19303) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19518]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / mem[_19518] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / mem[_19518]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19900 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19988 = mem[_19900]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20192 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20192] > !_19988:
                                                    revert with 0, 17
                                                if mem[_20192] + _19988 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20192] + _19988:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20192] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6) + (_19988 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19901 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19990 = mem[_19901]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20193 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20193] > !_19990:
                                                    revert with 0, 17
                                                if mem[_20193] + _19990 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20193] + _19990:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20193] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6) + (_19990 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303) / _19532 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16028 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16028 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19576 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19610 = mem[_19576]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19576]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / mem[_19576] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / mem[_19576]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20159 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20263 = mem[_20159]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20462 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20462] > !_20263:
                                                        revert with 0, 17
                                                    if mem[_20462] + _20263 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20462] + _20263:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20462] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6) + (_20263 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20160 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20265 = mem[_20160]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20463 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20463] > !_20265:
                                                        revert with 0, 17
                                                    if mem[_20463] + _20265 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20463] + _20265:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20463] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6) + (_20265 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / 10^stor259) / _19610 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16028 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16028 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21987 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22006 = mem[_21987]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21987]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / mem[_21987] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / mem[_21987]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22211 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22260 = mem[_22211]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22423 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22423] > !_22260:
                                                        revert with 0, 17
                                                    if mem[_22423] + _22260 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22423] + _22260:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22423] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6) + (_22260 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22212 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22262 = mem[_22212]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22424 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22424] > !_22262:
                                                        revert with 0, 17
                                                    if mem[_22424] + _22262 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22424] + _22262:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22424] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6) + (_22262 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19303 / s * t) / _22006 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _8268 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8268]:
                                    revert with 0, 50
                                mem[_8268 + 32] = token1Address
                                if 1 >= mem[_8268]:
                                    revert with 0, 50
                                mem[_8268 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8268 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8268 + 100] = 10^18
                                mem[_8268 + 132] = 64
                                mem[_8268 + 164] = mem[_8268]
                                idx = 0
                                s = _8268 + 32
                                t = _8268 + 196
                                while idx < mem[_8268]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8268 + (32 * mem[_8268]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12263 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12290 = mem[_12263]
                                require mem[_12263] <= test266151307()
                                require _12263 + mem[_12263] + 31 < _12263 + return_data.size
                                _12306 = mem[_12263 + mem[_12263]]
                                if mem[_12263 + mem[_12263]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_12263 + mem[_12263]]) + 1 < 0 or _12263 + ceil32(return_data.size) + ceil32(32 * mem[_12263 + mem[_12263]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _12263 + ceil32(return_data.size) + ceil32(32 * mem[_12263 + mem[_12263]]) + 1
                                mem[_12263 + ceil32(return_data.size)] = _12306
                                require _12290 + (32 * _12306) + 32 <= return_data.size
                                mem[_12263 + ceil32(return_data.size) + 32 len ceil32(32 * _12306)] = mem[_12263 + _12290 + 32 len ceil32(32 * _12306)]
                                var106002 = _12263 + ceil32(return_data.size) + ceil32(32 * _12306) + 32
                                if 1 >= _12306:
                                    revert with 0, 50
                                _15981 = mem[_12263 + ceil32(return_data.size) + 64]
                                _16005 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_16005]:
                                    revert with 0, 50
                                mem[_16005 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_16005]:
                                    revert with 0, 50
                                mem[_16005 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_16005 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_16005 + 100] = _15981
                                mem[_16005 + 132] = 64
                                mem[_16005 + 164] = mem[_16005]
                                idx = 0
                                s = _16005 + 32
                                t = _16005 + 196
                                while idx < mem[_16005]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _16005 + (32 * mem[_16005]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _19336 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _19354 = mem[_19336]
                                require mem[_19336] <= test266151307()
                                require _19336 + mem[_19336] + 31 < _19336 + return_data.size
                                _19370 = mem[_19336 + mem[_19336]]
                                if mem[_19336 + mem[_19336]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_19336 + mem[_19336]]) + 1 < 0 or _19336 + ceil32(return_data.size) + ceil32(32 * mem[_19336 + mem[_19336]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _19336 + ceil32(return_data.size) + ceil32(32 * mem[_19336 + mem[_19336]]) + 1
                                mem[_19336 + ceil32(return_data.size)] = _19370
                                require _19354 + (32 * _19370) + 32 <= return_data.size
                                mem[_19336 + ceil32(return_data.size) + 32 len ceil32(32 * _19370)] = mem[_19336 + _19354 + 32 len ceil32(32 * _19370)]
                                if 1 >= _19370:
                                    revert with 0, 50
                                _21913 = mem[_19336 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_19336 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19336 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22038 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22048 = mem[_22038]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21913) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22038]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / mem[_22038] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / mem[_22038]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22389 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22460 = mem[_22389]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22626 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22626] > !_22460:
                                            revert with 0, 17
                                        if mem[_22626] + _22460 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22626] + _22460:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22626] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6) + (_22460 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22390 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22462 = mem[_22390]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22627 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22627] > !_22462:
                                            revert with 0, 17
                                        if mem[_22627] + _22462 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22627] + _22462:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22627] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6) + (_22462 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913) / _22048 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19336 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19336 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22080 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22103 = mem[_22080]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22080]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / mem[_22080] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / mem[_22080]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22604 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22682 = mem[_22604]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22836 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22836] > !_22682:
                                                revert with 0, 17
                                            if mem[_22836] + _22682 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22836] + _22682:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22836] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6) + (_22682 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22605 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22684 = mem[_22605]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22837 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22837] > !_22684:
                                                revert with 0, 17
                                            if mem[_22837] + _22684 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22837] + _22684:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22837] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6) + (_22684 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / 10^stor259) / _22103 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19336 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19336 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23576 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23587 = mem[_23576]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23576]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / mem[_23576] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / mem[_23576]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23705 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23738 = mem[_23705]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23842 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23842] > !_23738:
                                                revert with 0, 17
                                            if mem[_23842] + _23738 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23842] + _23738:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23842] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6) + (_23738 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23706 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23740 = mem[_23706]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23843 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23843] > !_23740:
                                                revert with 0, 17
                                            if mem[_23843] + _23740 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23843] + _23740:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23843] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6) + (_23740 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21913 / s * t) / _23587 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12420 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12420]:
                                        revert with 0, 50
                                    mem[_12420 + 32] = token1Address
                                    if 1 >= mem[_12420]:
                                        revert with 0, 50
                                    mem[_12420 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12420 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12420 + 100] = 1
                                    mem[_12420 + 132] = 64
                                    mem[_12420 + 164] = mem[_12420]
                                    idx = 0
                                    u = _12420 + 32
                                    v = _12420 + 196
                                    while idx < mem[_12420]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12420 + (32 * mem[_12420]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16026 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16059 = mem[_16026]
                                    require mem[_16026] <= test266151307()
                                    require _16026 + mem[_16026] + 31 < _16026 + return_data.size
                                    _16083 = mem[_16026 + mem[_16026]]
                                    if mem[_16026 + mem[_16026]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16026 + mem[_16026]]) + 1 < 0 or _16026 + ceil32(return_data.size) + ceil32(32 * mem[_16026 + mem[_16026]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16026 + ceil32(return_data.size) + ceil32(32 * mem[_16026 + mem[_16026]]) + 1
                                    mem[_16026 + ceil32(return_data.size)] = _16083
                                    require _16059 + (32 * _16083) + 32 <= return_data.size
                                    mem[_16026 + ceil32(return_data.size) + 32 len ceil32(32 * _16083)] = mem[_16026 + _16059 + 32 len ceil32(32 * _16083)]
                                    var117002 = _16026 + ceil32(return_data.size) + ceil32(32 * _16083) + 32
                                    if 1 >= _16083:
                                        revert with 0, 50
                                    _19299 = mem[_16026 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19517 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19531 = mem[_19517]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19299) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19517]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / mem[_19517] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / mem[_19517]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19898 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19982 = mem[_19898]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20189 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20189] > !_19982:
                                                revert with 0, 17
                                            if mem[_20189] + _19982 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20189] + _19982:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20189] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6) + (_19982 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19899 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19984 = mem[_19899]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20190 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20190] > !_19984:
                                                revert with 0, 17
                                            if mem[_20190] + _19984 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20190] + _19984:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20190] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6) + (_19984 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299) / _19531 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19574 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19607 = mem[_19574]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19574]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / mem[_19574] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / mem[_19574]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20157 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20253 = mem[_20157]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20453 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20453] > !_20253:
                                                    revert with 0, 17
                                                if mem[_20453] + _20253 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20453] + _20253:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20453] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6) + (_20253 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20158 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20255 = mem[_20158]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20454 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20454] > !_20255:
                                                    revert with 0, 17
                                                if mem[_20454] + _20255 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20454] + _20255:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20454] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6) + (_20255 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / 10^stor259) / _19607 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16026 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16026 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21985 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22005 = mem[_21985]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21985]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / mem[_21985] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / mem[_21985]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22209 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22254 = mem[_22209]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22418 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22418] > !_22254:
                                                    revert with 0, 17
                                                if mem[_22418] + _22254 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22418] + _22254:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22418] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6) + (_22254 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22210 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22256 = mem[_22210]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22419 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22419] > !_22256:
                                                    revert with 0, 17
                                                if mem[_22419] + _22256 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22419] + _22256:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22419] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6) + (_22256 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19299 / u * v) / _22005 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12487 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12487]:
                                            revert with 0, 50
                                        mem[_12487 + 32] = token1Address
                                        if 1 >= mem[_12487]:
                                            revert with 0, 50
                                        mem[_12487 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12487 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12487 + 100] = 10^stor259
                                        mem[_12487 + 132] = 64
                                        mem[_12487 + 164] = mem[_12487]
                                        idx = 0
                                        u = _12487 + 32
                                        v = _12487 + 196
                                        while idx < mem[_12487]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12487 + (32 * mem[_12487]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16025 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16058 = mem[_16025]
                                        require mem[_16025] <= test266151307()
                                        require _16025 + mem[_16025] + 31 < _16025 + return_data.size
                                        _16082 = mem[_16025 + mem[_16025]]
                                        if mem[_16025 + mem[_16025]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16025 + mem[_16025]]) + 1 < 0 or _16025 + ceil32(return_data.size) + ceil32(32 * mem[_16025 + mem[_16025]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16025 + ceil32(return_data.size) + ceil32(32 * mem[_16025 + mem[_16025]]) + 1
                                        mem[_16025 + ceil32(return_data.size)] = _16082
                                        require _16058 + (32 * _16082) + 32 <= return_data.size
                                        mem[_16025 + ceil32(return_data.size) + 32 len ceil32(32 * _16082)] = mem[_16025 + _16058 + 32 len ceil32(32 * _16082)]
                                        var122002 = _16025 + ceil32(return_data.size) + ceil32(32 * _16082) + 32
                                        if 1 >= _16082:
                                            revert with 0, 50
                                        _19298 = mem[_16025 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19516 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19530 = mem[_19516]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19298) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19516]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / mem[_19516] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / mem[_19516]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19896 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19978 = mem[_19896]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20187 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20187] > !_19978:
                                                    revert with 0, 17
                                                if mem[_20187] + _19978 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20187] + _19978:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20187] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6) + (_19978 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19897 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19980 = mem[_19897]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20188 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20188] > !_19980:
                                                    revert with 0, 17
                                                if mem[_20188] + _19980 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20188] + _19980:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20188] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6) + (_19980 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298) / _19530 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19573 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19604 = mem[_19573]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19573]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / mem[_19573] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / mem[_19573]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20155 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20245 = mem[_20155]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20447 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20447] > !_20245:
                                                        revert with 0, 17
                                                    if mem[_20447] + _20245 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20447] + _20245:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20447] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6) + (_20245 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20156 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20247 = mem[_20156]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20448 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20448] > !_20247:
                                                        revert with 0, 17
                                                    if mem[_20448] + _20247 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20448] + _20247:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20448] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6) + (_20247 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / 10^stor259) / _19604 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16025 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16025 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21984 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22004 = mem[_21984]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21984]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / mem[_21984] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / mem[_21984]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22207 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22250 = mem[_22207]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22416 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22416] > !_22250:
                                                        revert with 0, 17
                                                    if mem[_22416] + _22250 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22416] + _22250:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22416] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6) + (_22250 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22208 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22252 = mem[_22208]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22417 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22417] > !_22252:
                                                        revert with 0, 17
                                                    if mem[_22417] + _22252 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22417] + _22252:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22417] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6) + (_22252 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19298 / u * v) / _22004 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _16045 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16045]:
                                            revert with 0, 50
                                        mem[_16045 + 32] = token1Address
                                        if 1 >= mem[_16045]:
                                            revert with 0, 50
                                        mem[_16045 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16045 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16045 + 100] = u * v
                                        mem[_16045 + 132] = 64
                                        mem[_16045 + 164] = mem[_16045]
                                        idx = 0
                                        u = _16045 + 32
                                        v = _16045 + 196
                                        while idx < mem[_16045]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16045 + (32 * mem[_16045]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19334 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19352 = mem[_19334]
                                        require mem[_19334] <= test266151307()
                                        require _19334 + mem[_19334] + 31 < _19334 + return_data.size
                                        _19368 = mem[_19334 + mem[_19334]]
                                        if mem[_19334 + mem[_19334]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19334 + mem[_19334]]) + 1 < 0 or _19334 + ceil32(return_data.size) + ceil32(32 * mem[_19334 + mem[_19334]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19334 + ceil32(return_data.size) + ceil32(32 * mem[_19334 + mem[_19334]]) + 1
                                        mem[_19334 + ceil32(return_data.size)] = _19368
                                        require _19352 + (32 * _19368) + 32 <= return_data.size
                                        mem[_19334 + ceil32(return_data.size) + 32 len ceil32(32 * _19368)] = mem[_19334 + _19352 + 32 len ceil32(32 * _19368)]
                                        if 1 >= _19368:
                                            revert with 0, 50
                                        _21911 = mem[_19334 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19334 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19334 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22037 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22047 = mem[_22037]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21911) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22037]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / mem[_22037] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / mem[_22037]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22387 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22456 = mem[_22387]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22624 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22624] > !_22456:
                                                    revert with 0, 17
                                                if mem[_22624] + _22456 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22624] + _22456:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22624] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6) + (_22456 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22388 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22458 = mem[_22388]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22625 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22625] > !_22458:
                                                    revert with 0, 17
                                                if mem[_22625] + _22458 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22625] + _22458:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22625] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6) + (_22458 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911) / _22047 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19334 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19334 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22079 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22100 = mem[_22079]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22079]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / mem[_22079] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / mem[_22079]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22601 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22674 = mem[_22601]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22830 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22830] > !_22674:
                                                        revert with 0, 17
                                                    if mem[_22830] + _22674 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22830] + _22674:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22830] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6) + (_22674 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22602 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22676 = mem[_22602]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22831 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22831] > !_22676:
                                                        revert with 0, 17
                                                    if mem[_22831] + _22676 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22831] + _22676:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22831] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6) + (_22676 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / 10^stor259) / _22100 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19334 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19334 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23575 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23586 = mem[_23575]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23575]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / mem[_23575] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / mem[_23575]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23703 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23734 = mem[_23703]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23840 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23840] > !_23734:
                                                        revert with 0, 17
                                                    if mem[_23840] + _23734 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23840] + _23734:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6) + (_23734 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23704 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23736 = mem[_23704]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23841 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23841] > !_23736:
                                                        revert with 0, 17
                                                    if mem[_23841] + _23736 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23841] + _23736:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23841] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6) + (_23736 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21911 / u * v) / _23586 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _12335 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12335]:
                                    revert with 0, 50
                                mem[_12335 + 32] = token1Address
                                if 1 >= mem[_12335]:
                                    revert with 0, 50
                                mem[_12335 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12335 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12335 + 100] = 10^18
                                mem[_12335 + 132] = 64
                                mem[_12335 + 164] = mem[_12335]
                                idx = 0
                                u = _12335 + 32
                                v = _12335 + 196
                                while idx < mem[_12335]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12335 + (32 * mem[_12335]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16027 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16060 = mem[_16027]
                                require mem[_16027] <= test266151307()
                                require _16027 + mem[_16027] + 31 < _16027 + return_data.size
                                _16084 = mem[_16027 + mem[_16027]]
                                if mem[_16027 + mem[_16027]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16027 + mem[_16027]]) + 1 < 0 or _16027 + ceil32(return_data.size) + ceil32(32 * mem[_16027 + mem[_16027]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16027 + ceil32(return_data.size) + ceil32(32 * mem[_16027 + mem[_16027]]) + 1
                                mem[_16027 + ceil32(return_data.size)] = _16084
                                require _16060 + (32 * _16084) + 32 <= return_data.size
                                mem[_16027 + ceil32(return_data.size) + 32 len ceil32(32 * _16084)] = mem[_16027 + _16060 + 32 len ceil32(32 * _16084)]
                                var111002 = _16027 + ceil32(return_data.size) + ceil32(32 * _16084) + 32
                                if 1 >= _16084:
                                    revert with 0, 50
                                _19300 = mem[_16027 + ceil32(return_data.size) + 64]
                                _19321 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_19321]:
                                    revert with 0, 50
                                mem[_19321 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_19321]:
                                    revert with 0, 50
                                mem[_19321 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_19321 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_19321 + 100] = _19300
                                mem[_19321 + 132] = 64
                                mem[_19321 + 164] = mem[_19321]
                                idx = 0
                                u = _19321 + 32
                                v = _19321 + 196
                                while idx < mem[_19321]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _19321 + (32 * mem[_19321]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21925 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21931 = mem[_21925]
                                require mem[_21925] <= test266151307()
                                require _21925 + mem[_21925] + 31 < _21925 + return_data.size
                                _21937 = mem[_21925 + mem[_21925]]
                                if mem[_21925 + mem[_21925]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21925 + mem[_21925]]) + 1 < 0 or _21925 + ceil32(return_data.size) + ceil32(32 * mem[_21925 + mem[_21925]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21925 + ceil32(return_data.size) + ceil32(32 * mem[_21925 + mem[_21925]]) + 1
                                mem[_21925 + ceil32(return_data.size)] = _21937
                                require _21931 + (32 * _21937) + 32 <= return_data.size
                                mem[_21925 + ceil32(return_data.size) + 32 len ceil32(32 * _21937)] = mem[_21925 + _21931 + 32 len ceil32(32 * _21937)]
                                if 1 >= _21937:
                                    revert with 0, 50
                                _23543 = mem[_21925 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21925 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21925 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23605 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23610 = mem[_23605]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23543) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23605]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / mem[_23605] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / mem[_23605]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23825 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23864 = mem[_23825]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23950 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23950] > !_23864:
                                            revert with 0, 17
                                        if mem[_23950] + _23864 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23950] + _23864:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23950] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6) + (_23864 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23826 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23866 = mem[_23826]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23951 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23951] > !_23866:
                                            revert with 0, 17
                                        if mem[_23951] + _23866 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23951] + _23866:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23951] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6) + (_23866 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543) / _23610 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21925 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21925 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23625 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23638 = mem[_23625]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23625]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / mem[_23625] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / mem[_23625]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23940 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23982 = mem[_23940]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24056 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24056] > !_23982:
                                                revert with 0, 17
                                            if mem[_24056] + _23982 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24056] + _23982:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24056] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6) + (_23982 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23941 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23984 = mem[_23941]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24057 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24057] > !_23984:
                                                revert with 0, 17
                                            if mem[_24057] + _23984 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24057] + _23984:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24057] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6) + (_23984 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / 10^stor259) / _23638 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21925 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21925 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24296 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24301 = mem[_24296]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24296]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / mem[_24296] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / mem[_24296]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24341 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24357 = mem[_24341]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24397 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24397] > !_24357:
                                                revert with 0, 17
                                            if mem[_24397] + _24357 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24397] + _24357:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24397] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6) + (_24357 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24342 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24359 = mem[_24342]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24398 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24398] > !_24359:
                                                revert with 0, 17
                                            if mem[_24398] + _24359 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24398] + _24359:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24398] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6) + (_24359 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _8219 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23543 / u * v) / _24301 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _8230 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _8233 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0 or (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307():
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require _8230 + (32 * _8233) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _8233)] = mem[(2 * ceil32(return_data.size)) + _8230 + 224 len ceil32(32 * _8233)]
                    if 1 >= _8233:
                        revert with 0, 50
                    _12244 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12473 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12473]:
                                    revert with 0, 50
                                mem[_12473 + 32] = token1Address
                                if 1 >= mem[_12473]:
                                    revert with 0, 50
                                mem[_12473 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12473 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12473 + 100] = 1
                                mem[_12473 + 132] = 64
                                mem[_12473 + 164] = mem[_12473]
                                idx = 0
                                s = _12473 + 32
                                t = _12473 + 196
                                while idx < mem[_12473]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12473 + (32 * mem[_12473]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16021 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16055 = mem[_16021]
                                require mem[_16021] <= test266151307()
                                require _16021 + mem[_16021] + 31 < _16021 + return_data.size
                                _16079 = mem[_16021 + mem[_16021]]
                                if mem[_16021 + mem[_16021]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16021 + mem[_16021]]) + 1 < 0 or _16021 + ceil32(return_data.size) + ceil32(32 * mem[_16021 + mem[_16021]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16021 + ceil32(return_data.size) + ceil32(32 * mem[_16021 + mem[_16021]]) + 1
                                mem[_16021 + ceil32(return_data.size)] = _16079
                                require _16055 + (32 * _16079) + 32 <= return_data.size
                                mem[_16021 + ceil32(return_data.size) + 32 len ceil32(32 * _16079)] = mem[_16021 + _16055 + 32 len ceil32(32 * _16079)]
                                if 1 >= _16079:
                                    revert with 0, 50
                                _19293 = mem[_16021 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_16021 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16021 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19515 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19529 = mem[_19515]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19293) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_19515]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / mem[_19515] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / mem[_19515]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19894 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19972 = mem[_19894]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20184 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20184] > !_19972:
                                            revert with 0, 17
                                        if mem[_20184] + _19972 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20184] + _19972:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20184] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6) + (_19972 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19895 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19974 = mem[_19895]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _20185 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_20185] > !_19974:
                                            revert with 0, 17
                                        if mem[_20185] + _19974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20185] + _19974:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_20185] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6) + (_19974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293) / _19529 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16021 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16021 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19571 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19601 = mem[_19571]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19571]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / mem[_19571] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / mem[_19571]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20152 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20235 = mem[_20152]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20438 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20438] > !_20235:
                                                revert with 0, 17
                                            if mem[_20438] + _20235 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20438] + _20235:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20438] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6) + (_20235 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20153 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _20237 = mem[_20153]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20439 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20439] > !_20237:
                                                revert with 0, 17
                                            if mem[_20439] + _20237 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20439] + _20237:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20439] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6) + (_20237 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / 10^stor259) / _19601 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16021 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16021 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21982 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22003 = mem[_21982]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21982]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / mem[_21982] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / mem[_21982]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22205 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22244 = mem[_22205]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22411 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22411] > !_22244:
                                                revert with 0, 17
                                            if mem[_22411] + _22244 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22411] + _22244:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22411] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6) + (_22244 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22206 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22246 = mem[_22206]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22412 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22412] > !_22246:
                                                revert with 0, 17
                                            if mem[_22412] + _22246 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22412] + _22246:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22412] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6) + (_22246 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19293 / s * t) / _22003 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12534 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12534]:
                                        revert with 0, 50
                                    mem[_12534 + 32] = token1Address
                                    if 1 >= mem[_12534]:
                                        revert with 0, 50
                                    mem[_12534 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12534 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12534 + 100] = 10^stor259
                                    mem[_12534 + 132] = 64
                                    mem[_12534 + 164] = mem[_12534]
                                    idx = 0
                                    s = _12534 + 32
                                    t = _12534 + 196
                                    while idx < mem[_12534]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12534 + (32 * mem[_12534]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16020 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16054 = mem[_16020]
                                    require mem[_16020] <= test266151307()
                                    require _16020 + mem[_16020] + 31 < _16020 + return_data.size
                                    _16078 = mem[_16020 + mem[_16020]]
                                    if mem[_16020 + mem[_16020]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16020 + mem[_16020]]) + 1 < 0 or _16020 + ceil32(return_data.size) + ceil32(32 * mem[_16020 + mem[_16020]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16020 + ceil32(return_data.size) + ceil32(32 * mem[_16020 + mem[_16020]]) + 1
                                    mem[_16020 + ceil32(return_data.size)] = _16078
                                    require _16054 + (32 * _16078) + 32 <= return_data.size
                                    mem[_16020 + ceil32(return_data.size) + 32 len ceil32(32 * _16078)] = mem[_16020 + _16054 + 32 len ceil32(32 * _16078)]
                                    var117002 = _16020 + ceil32(return_data.size) + ceil32(32 * _16078) + 32
                                    if 1 >= _16078:
                                        revert with 0, 50
                                    _19292 = mem[_16020 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16020 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16020 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19514 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19528 = mem[_19514]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19292) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19514]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / mem[_19514] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / mem[_19514]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19892 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19968 = mem[_19892]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20182 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20182] > !_19968:
                                                revert with 0, 17
                                            if mem[_20182] + _19968 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20182] + _19968:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20182] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6) + (_19968 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19893 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19970 = mem[_19893]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20183 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20183] > !_19970:
                                                revert with 0, 17
                                            if mem[_20183] + _19970 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20183] + _19970:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20183] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6) + (_19970 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292) / _19528 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16020 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16020 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19570 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19598 = mem[_19570]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19570]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / mem[_19570] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / mem[_19570]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20150 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20227 = mem[_20150]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20432 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20432] > !_20227:
                                                    revert with 0, 17
                                                if mem[_20432] + _20227 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20432] + _20227:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20432] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6) + (_20227 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20151 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20229 = mem[_20151]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20433 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20433] > !_20229:
                                                    revert with 0, 17
                                                if mem[_20433] + _20229 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20433] + _20229:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20433] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6) + (_20229 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / 10^stor259) / _19598 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16020 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16020 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21981 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22002 = mem[_21981]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21981]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / mem[_21981] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / mem[_21981]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22203 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22240 = mem[_22203]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22409 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22409] > !_22240:
                                                    revert with 0, 17
                                                if mem[_22409] + _22240 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22409] + _22240:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22409] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6) + (_22240 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22204 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22242 = mem[_22204]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22410 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22410] > !_22242:
                                                    revert with 0, 17
                                                if mem[_22410] + _22242 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22410] + _22242:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22410] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6) + (_22242 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19292 / s * t) / _22002 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _16043 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16043]:
                                        revert with 0, 50
                                    mem[_16043 + 32] = token1Address
                                    if 1 >= mem[_16043]:
                                        revert with 0, 50
                                    mem[_16043 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16043 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16043 + 100] = s * t
                                    mem[_16043 + 132] = 64
                                    mem[_16043 + 164] = mem[_16043]
                                    idx = 0
                                    s = _16043 + 32
                                    t = _16043 + 196
                                    while idx < mem[_16043]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16043 + (32 * mem[_16043]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19332 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19350 = mem[_19332]
                                    require mem[_19332] <= test266151307()
                                    require _19332 + mem[_19332] + 31 < _19332 + return_data.size
                                    _19366 = mem[_19332 + mem[_19332]]
                                    if mem[_19332 + mem[_19332]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19332 + mem[_19332]]) + 1 < 0 or _19332 + ceil32(return_data.size) + ceil32(32 * mem[_19332 + mem[_19332]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19332 + ceil32(return_data.size) + ceil32(32 * mem[_19332 + mem[_19332]]) + 1
                                    mem[_19332 + ceil32(return_data.size)] = _19366
                                    require _19350 + (32 * _19366) + 32 <= return_data.size
                                    mem[_19332 + ceil32(return_data.size) + 32 len ceil32(32 * _19366)] = mem[_19332 + _19350 + 32 len ceil32(32 * _19366)]
                                    var122002 = _19332 + ceil32(return_data.size) + ceil32(32 * _19366) + 32
                                    if 1 >= _19366:
                                        revert with 0, 50
                                    _21909 = mem[_19332 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19332 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19332 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22036 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22046 = mem[_22036]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _21909) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22036]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / mem[_22036] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / mem[_22036]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22385 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22452 = mem[_22385]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22622 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22622] > !_22452:
                                                revert with 0, 17
                                            if mem[_22622] + _22452 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22622] + _22452:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22622] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6) + (_22452 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22386 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22454 = mem[_22386]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22623 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22623] > !_22454:
                                                revert with 0, 17
                                            if mem[_22623] + _22454 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22623] + _22454:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22623] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6) + (_22454 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909) / _22046 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19332 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19332 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22078 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22097 = mem[_22078]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22078]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / mem[_22078] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / mem[_22078]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22598 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22666 = mem[_22598]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22824] > !_22666:
                                                    revert with 0, 17
                                                if mem[_22824] + _22666 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22824] + _22666:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22824] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6) + (_22666 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22599 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22668 = mem[_22599]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22825 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22825] > !_22668:
                                                    revert with 0, 17
                                                if mem[_22825] + _22668 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22825] + _22668:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22825] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6) + (_22668 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / 10^stor259) / _22097 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19332 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19332 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23574 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23585 = mem[_23574]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23574]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / mem[_23574] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / mem[_23574]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23701 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23730 = mem[_23701]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23838 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23838] > !_23730:
                                                    revert with 0, 17
                                                if mem[_23838] + _23730 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23838] + _23730:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23838] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6) + (_23730 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23702 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23732 = mem[_23702]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23839 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23839] > !_23732:
                                                    revert with 0, 17
                                                if mem[_23839] + _23732 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23839] + _23732:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23839] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6) + (_23732 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21909 / s * t) / _23585 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _12371 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12371]:
                                revert with 0, 50
                            mem[_12371 + 32] = token1Address
                            if 1 >= mem[_12371]:
                                revert with 0, 50
                            mem[_12371 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12371 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12371 + 100] = 10^18
                            mem[_12371 + 132] = 64
                            mem[_12371 + 164] = mem[_12371]
                            idx = 0
                            s = _12371 + 32
                            t = _12371 + 196
                            while idx < mem[_12371]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12371 + (32 * mem[_12371]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16022 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16056 = mem[_16022]
                            require mem[_16022] <= test266151307()
                            require _16022 + mem[_16022] + 31 < _16022 + return_data.size
                            _16080 = mem[_16022 + mem[_16022]]
                            if mem[_16022 + mem[_16022]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16022 + mem[_16022]]) + 1 < 0 or _16022 + ceil32(return_data.size) + ceil32(32 * mem[_16022 + mem[_16022]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16022 + ceil32(return_data.size) + ceil32(32 * mem[_16022 + mem[_16022]]) + 1
                            mem[_16022 + ceil32(return_data.size)] = _16080
                            require _16056 + (32 * _16080) + 32 <= return_data.size
                            mem[_16022 + ceil32(return_data.size) + 32 len ceil32(32 * _16080)] = mem[_16022 + _16056 + 32 len ceil32(32 * _16080)]
                            var106002 = _16022 + ceil32(return_data.size) + ceil32(32 * _16080) + 32
                            var106005 = _16022 + _16056 + ceil32(32 * _16080) + 32
                            if 1 >= _16080:
                                revert with 0, 50
                            _19294 = mem[_16022 + ceil32(return_data.size) + 64]
                            _19319 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_19319]:
                                revert with 0, 50
                            mem[_19319 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_19319]:
                                revert with 0, 50
                            mem[_19319 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_19319 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_19319 + 100] = _19294
                            mem[_19319 + 132] = 64
                            mem[_19319 + 164] = mem[_19319]
                            idx = 0
                            s = _19319 + 32
                            t = _19319 + 196
                            while idx < mem[_19319]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _19319 + (32 * mem[_19319]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21924 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21930 = mem[_21924]
                            require mem[_21924] <= test266151307()
                            require _21924 + mem[_21924] + 31 < _21924 + return_data.size
                            _21936 = mem[_21924 + mem[_21924]]
                            if mem[_21924 + mem[_21924]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_21924 + mem[_21924]]) + 1 < 0 or _21924 + ceil32(return_data.size) + ceil32(32 * mem[_21924 + mem[_21924]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _21924 + ceil32(return_data.size) + ceil32(32 * mem[_21924 + mem[_21924]]) + 1
                            mem[_21924 + ceil32(return_data.size)] = _21936
                            require _21930 + (32 * _21936) + 32 <= return_data.size
                            mem[_21924 + ceil32(return_data.size) + 32 len ceil32(32 * _21936)] = mem[_21924 + _21930 + 32 len ceil32(32 * _21936)]
                            if 1 >= _21936:
                                revert with 0, 50
                            _23542 = mem[_21924 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21924 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21924 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23604 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23609 = mem[_23604]
                                if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _23542) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_23604]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / mem[_23604] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / mem[_23604]:
                                    revert with 0, 17
                                mem[mem[64] + 36] = this.address
                                if not sub_abddf82e:
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23823 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23860 = mem[_23823]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23948 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23948] > !_23860:
                                        revert with 0, 17
                                    if mem[_23948] + _23860 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23948] + _23860:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23948] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6) + (_23860 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    require ext_code.size(sub_4005760aAddress)
                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23824 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23862 = mem[_23824]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23949 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23949] > !_23862:
                                        revert with 0, 17
                                    if mem[_23949] + _23862 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23949] + _23862:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23949] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6) + (_23862 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542) / _23609 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21924 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21924 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23624 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23635 = mem[_23624]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23624]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / mem[_23624] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / mem[_23624]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23938 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23974 = mem[_23938]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24050 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24050] > !_23974:
                                            revert with 0, 17
                                        if mem[_24050] + _23974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24050] + _23974:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24050] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6) + (_23974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23939 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23976 = mem[_23939]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24051 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24051] > !_23976:
                                            revert with 0, 17
                                        if mem[_24051] + _23976 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24051] + _23976:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24051] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6) + (_23976 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / 10^stor259) / _23635 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21924 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _12244 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21924 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24295 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24300 = mem[_24295]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12244) + (Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24295]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / mem[_24295] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / mem[_24295]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24339 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24353 = mem[_24339]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24395 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24395] > !_24353:
                                            revert with 0, 17
                                        if mem[_24395] + _24353 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24395] + _24353:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24395] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6) + (_24353 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24340 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24355 = mem[_24340]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24396 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24396] > !_24355:
                                            revert with 0, 17
                                        if mem[_24396] + _24355 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24396] + _24355:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24396] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6) + (_24355 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23542 / s * t) / _24300 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12532 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12532]:
                                        revert with 0, 50
                                    mem[_12532 + 32] = token1Address
                                    if 1 >= mem[_12532]:
                                        revert with 0, 50
                                    mem[_12532 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12532 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12532 + 100] = 1
                                    mem[_12532 + 132] = 64
                                    mem[_12532 + 164] = mem[_12532]
                                    idx = 0
                                    s = _12532 + 32
                                    t = _12532 + 196
                                    while idx < mem[_12532]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12532 + (32 * mem[_12532]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16016 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16051 = mem[_16016]
                                    require mem[_16016] <= test266151307()
                                    require _16016 + mem[_16016] + 31 < _16016 + return_data.size
                                    _16075 = mem[_16016 + mem[_16016]]
                                    if mem[_16016 + mem[_16016]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_16016 + mem[_16016]]) + 1 < 0 or _16016 + ceil32(return_data.size) + ceil32(32 * mem[_16016 + mem[_16016]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _16016 + ceil32(return_data.size) + ceil32(32 * mem[_16016 + mem[_16016]]) + 1
                                    mem[_16016 + ceil32(return_data.size)] = _16075
                                    require _16051 + (32 * _16075) + 32 <= return_data.size
                                    mem[_16016 + ceil32(return_data.size) + 32 len ceil32(32 * _16075)] = mem[_16016 + _16051 + 32 len ceil32(32 * _16075)]
                                    var117002 = _16016 + ceil32(return_data.size) + ceil32(32 * _16075) + 32
                                    if 1 >= _16075:
                                        revert with 0, 50
                                    _19287 = mem[_16016 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_16016 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16016 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19513 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19527 = mem[_19513]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19287) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_19513]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / mem[_19513] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / mem[_19513]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19890 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19962 = mem[_19890]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20179 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20179] > !_19962:
                                                revert with 0, 17
                                            if mem[_20179] + _19962 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20179] + _19962:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20179] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6) + (_19962 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19891 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19964 = mem[_19891]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _20180 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_20180] > !_19964:
                                                revert with 0, 17
                                            if mem[_20180] + _19964 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20180] + _19964:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_20180] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6) + (_19964 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287) / _19527 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16016 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16016 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19568 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19595 = mem[_19568]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19568]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / mem[_19568] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / mem[_19568]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20147 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20217 = mem[_20147]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20423 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20423] > !_20217:
                                                    revert with 0, 17
                                                if mem[_20423] + _20217 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20423] + _20217:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20423] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6) + (_20217 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20148 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _20219 = mem[_20148]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20424 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20424] > !_20219:
                                                    revert with 0, 17
                                                if mem[_20424] + _20219 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20424] + _20219:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20424] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6) + (_20219 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / 10^stor259) / _19595 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16016 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16016 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21979 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22001 = mem[_21979]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21979]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / mem[_21979] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / mem[_21979]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22201 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22234 = mem[_22201]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22404 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22404] > !_22234:
                                                    revert with 0, 17
                                                if mem[_22404] + _22234 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22404] + _22234:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22404] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6) + (_22234 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22202 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22236 = mem[_22202]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22405 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22405] > !_22236:
                                                    revert with 0, 17
                                                if mem[_22405] + _22236 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22405] + _22236:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22405] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6) + (_22236 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19287 / s * t) / _22001 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12618 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12618]:
                                            revert with 0, 50
                                        mem[_12618 + 32] = token1Address
                                        if 1 >= mem[_12618]:
                                            revert with 0, 50
                                        mem[_12618 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12618 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12618 + 100] = 10^stor259
                                        mem[_12618 + 132] = 64
                                        mem[_12618 + 164] = mem[_12618]
                                        idx = 0
                                        s = _12618 + 32
                                        t = _12618 + 196
                                        while idx < mem[_12618]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12618 + (32 * mem[_12618]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16015 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16050 = mem[_16015]
                                        require mem[_16015] <= test266151307()
                                        require _16015 + mem[_16015] + 31 < _16015 + return_data.size
                                        _16074 = mem[_16015 + mem[_16015]]
                                        if mem[_16015 + mem[_16015]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_16015 + mem[_16015]]) + 1 < 0 or _16015 + ceil32(return_data.size) + ceil32(32 * mem[_16015 + mem[_16015]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _16015 + ceil32(return_data.size) + ceil32(32 * mem[_16015 + mem[_16015]]) + 1
                                        mem[_16015 + ceil32(return_data.size)] = _16074
                                        require _16050 + (32 * _16074) + 32 <= return_data.size
                                        mem[_16015 + ceil32(return_data.size) + 32 len ceil32(32 * _16074)] = mem[_16015 + _16050 + 32 len ceil32(32 * _16074)]
                                        var122002 = _16015 + ceil32(return_data.size) + ceil32(32 * _16074) + 32
                                        if 1 >= _16074:
                                            revert with 0, 50
                                        _19286 = mem[_16015 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_16015 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16015 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19512 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19526 = mem[_19512]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19286) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_19512]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / mem[_19512] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / mem[_19512]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19888 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19958 = mem[_19888]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20177 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20177] > !_19958:
                                                    revert with 0, 17
                                                if mem[_20177] + _19958 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20177] + _19958:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20177] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6) + (_19958 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19889 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19960 = mem[_19889]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _20178 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_20178] > !_19960:
                                                    revert with 0, 17
                                                if mem[_20178] + _19960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20178] + _19960:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_20178] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6) + (_19960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286) / _19526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16015 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16015 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19567 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19592 = mem[_19567]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_19567]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / mem[_19567] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / mem[_19567]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20145 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20209 = mem[_20145]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20417 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20417] > !_20209:
                                                        revert with 0, 17
                                                    if mem[_20417] + _20209 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20417] + _20209:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20417] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6) + (_20209 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20146 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _20211 = mem[_20146]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _20418 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_20418] > !_20211:
                                                        revert with 0, 17
                                                    if mem[_20418] + _20211 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_20418] + _20211:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_20418] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6) + (_20211 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / 10^stor259) / _19592 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_16015 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_16015 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21978 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22000 = mem[_21978]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21978]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / mem[_21978] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / mem[_21978]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22199 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22230 = mem[_22199]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22402 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22402] > !_22230:
                                                        revert with 0, 17
                                                    if mem[_22402] + _22230 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22402] + _22230:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22402] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6) + (_22230 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22200 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22232 = mem[_22200]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22403 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22403] > !_22232:
                                                        revert with 0, 17
                                                    if mem[_22403] + _22232 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22403] + _22232:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22403] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6) + (_22232 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _19286 / s * t) / _22000 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _16041 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16041]:
                                            revert with 0, 50
                                        mem[_16041 + 32] = token1Address
                                        if 1 >= mem[_16041]:
                                            revert with 0, 50
                                        mem[_16041 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16041 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16041 + 100] = s * t
                                        mem[_16041 + 132] = 64
                                        mem[_16041 + 164] = mem[_16041]
                                        idx = 0
                                        s = _16041 + 32
                                        t = _16041 + 196
                                        while idx < mem[_16041]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16041 + (32 * mem[_16041]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19330 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19348 = mem[_19330]
                                        require mem[_19330] <= test266151307()
                                        require _19330 + mem[_19330] + 31 < _19330 + return_data.size
                                        _19364 = mem[_19330 + mem[_19330]]
                                        if mem[_19330 + mem[_19330]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19330 + mem[_19330]]) + 1 < 0 or _19330 + ceil32(return_data.size) + ceil32(32 * mem[_19330 + mem[_19330]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19330 + ceil32(return_data.size) + ceil32(32 * mem[_19330 + mem[_19330]]) + 1
                                        mem[_19330 + ceil32(return_data.size)] = _19364
                                        require _19348 + (32 * _19364) + 32 <= return_data.size
                                        mem[_19330 + ceil32(return_data.size) + 32 len ceil32(32 * _19364)] = mem[_19330 + _19348 + 32 len ceil32(32 * _19364)]
                                        var127002 = _19330 + ceil32(return_data.size) + ceil32(32 * _19364) + 32
                                        if 1 >= _19364:
                                            revert with 0, 50
                                        _21907 = mem[_19330 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19330 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19330 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22035 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22045 = mem[_22035]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21907) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22035]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / mem[_22035] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / mem[_22035]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22383 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22448 = mem[_22383]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22620 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22620] > !_22448:
                                                    revert with 0, 17
                                                if mem[_22620] + _22448 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22620] + _22448:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22620] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6) + (_22448 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22384 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22450 = mem[_22384]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22621 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22621] > !_22450:
                                                    revert with 0, 17
                                                if mem[_22621] + _22450 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22621] + _22450:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22621] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6) + (_22450 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907) / _22045 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19330 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19330 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22077 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22094 = mem[_22077]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22077]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / mem[_22077] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / mem[_22077]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22595 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22658 = mem[_22595]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22818 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22818] > !_22658:
                                                        revert with 0, 17
                                                    if mem[_22818] + _22658 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22818] + _22658:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22818] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6) + (_22658 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22596 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22660 = mem[_22596]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22819 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22819] > !_22660:
                                                        revert with 0, 17
                                                    if mem[_22819] + _22660 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22819] + _22660:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22819] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6) + (_22660 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / 10^stor259) / _22094 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19330 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19330 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23573 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23584 = mem[_23573]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23573]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / mem[_23573] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / mem[_23573]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23699 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23726 = mem[_23699]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23836 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23836] > !_23726:
                                                        revert with 0, 17
                                                    if mem[_23836] + _23726 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23836] + _23726:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23836] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6) + (_23726 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23700 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23728 = mem[_23700]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23837 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23837] > !_23728:
                                                        revert with 0, 17
                                                    if mem[_23837] + _23728 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23837] + _23728:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23837] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6) + (_23728 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21907 / s * t) / _23584 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _12459 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12459]:
                                    revert with 0, 50
                                mem[_12459 + 32] = token1Address
                                if 1 >= mem[_12459]:
                                    revert with 0, 50
                                mem[_12459 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12459 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12459 + 100] = 10^18
                                mem[_12459 + 132] = 64
                                mem[_12459 + 164] = mem[_12459]
                                idx = 0
                                s = _12459 + 32
                                t = _12459 + 196
                                while idx < mem[_12459]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12459 + (32 * mem[_12459]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16017 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16052 = mem[_16017]
                                require mem[_16017] <= test266151307()
                                require _16017 + mem[_16017] + 31 < _16017 + return_data.size
                                _16076 = mem[_16017 + mem[_16017]]
                                if mem[_16017 + mem[_16017]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_16017 + mem[_16017]]) + 1 < 0 or _16017 + ceil32(return_data.size) + ceil32(32 * mem[_16017 + mem[_16017]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _16017 + ceil32(return_data.size) + ceil32(32 * mem[_16017 + mem[_16017]]) + 1
                                mem[_16017 + ceil32(return_data.size)] = _16076
                                require _16052 + (32 * _16076) + 32 <= return_data.size
                                mem[_16017 + ceil32(return_data.size) + 32 len ceil32(32 * _16076)] = mem[_16017 + _16052 + 32 len ceil32(32 * _16076)]
                                var111002 = _16017 + ceil32(return_data.size) + ceil32(32 * _16076) + 32
                                if 1 >= _16076:
                                    revert with 0, 50
                                _19288 = mem[_16017 + ceil32(return_data.size) + 64]
                                _19317 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_19317]:
                                    revert with 0, 50
                                mem[_19317 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_19317]:
                                    revert with 0, 50
                                mem[_19317 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_19317 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_19317 + 100] = _19288
                                mem[_19317 + 132] = 64
                                mem[_19317 + 164] = mem[_19317]
                                idx = 0
                                s = _19317 + 32
                                t = _19317 + 196
                                while idx < mem[_19317]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _19317 + (32 * mem[_19317]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21923 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21929 = mem[_21923]
                                require mem[_21923] <= test266151307()
                                require _21923 + mem[_21923] + 31 < _21923 + return_data.size
                                _21935 = mem[_21923 + mem[_21923]]
                                if mem[_21923 + mem[_21923]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_21923 + mem[_21923]]) + 1 < 0 or _21923 + ceil32(return_data.size) + ceil32(32 * mem[_21923 + mem[_21923]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _21923 + ceil32(return_data.size) + ceil32(32 * mem[_21923 + mem[_21923]]) + 1
                                mem[_21923 + ceil32(return_data.size)] = _21935
                                require _21929 + (32 * _21935) + 32 <= return_data.size
                                mem[_21923 + ceil32(return_data.size) + 32 len ceil32(32 * _21935)] = mem[_21923 + _21929 + 32 len ceil32(32 * _21935)]
                                if 1 >= _21935:
                                    revert with 0, 50
                                _23541 = mem[_21923 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21923 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21923 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23603 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23608 = mem[_23603]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23541) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23603]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / mem[_23603] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / mem[_23603]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23821 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23856 = mem[_23821]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23946 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23946] > !_23856:
                                            revert with 0, 17
                                        if mem[_23946] + _23856 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23946] + _23856:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23946] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6) + (_23856 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23822 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23858 = mem[_23822]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23947 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23947] > !_23858:
                                            revert with 0, 17
                                        if mem[_23947] + _23858 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23947] + _23858:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23947] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6) + (_23858 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541) / _23608 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21923 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21923 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23623 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23632 = mem[_23623]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23623]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / mem[_23623] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / mem[_23623]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23936 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23966 = mem[_23936]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24044 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24044] > !_23966:
                                                revert with 0, 17
                                            if mem[_24044] + _23966 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24044] + _23966:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24044] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6) + (_23966 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23937 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23968 = mem[_23937]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24045 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24045] > !_23968:
                                                revert with 0, 17
                                            if mem[_24045] + _23968 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24045] + _23968:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24045] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6) + (_23968 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / 10^stor259) / _23632 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21923 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21923 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24294 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24299 = mem[_24294]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24294]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / mem[_24294] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / mem[_24294]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24337 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24349 = mem[_24337]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24393 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24393] > !_24349:
                                                revert with 0, 17
                                            if mem[_24393] + _24349 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24393] + _24349:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24393] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6) + (_24349 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24338 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24351 = mem[_24338]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24394 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24394] > !_24351:
                                                revert with 0, 17
                                            if mem[_24394] + _24351 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24394] + _24351:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24394] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6) + (_24351 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23541 / s * t) / _24299 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _16214 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_16214]:
                                        revert with 0, 50
                                    mem[_16214 + 32] = token1Address
                                    if 1 >= mem[_16214]:
                                        revert with 0, 50
                                    mem[_16214 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_16214 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_16214 + 100] = 1
                                    mem[_16214 + 132] = 64
                                    mem[_16214 + 164] = mem[_16214]
                                    idx = 0
                                    u = _16214 + 32
                                    v = _16214 + 196
                                    while idx < mem[_16214]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _16214 + (32 * mem[_16214]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _19328 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _19346 = mem[_19328]
                                    require mem[_19328] <= test266151307()
                                    require _19328 + mem[_19328] + 31 < _19328 + return_data.size
                                    _19362 = mem[_19328 + mem[_19328]]
                                    if mem[_19328 + mem[_19328]] > test266151307():
                                        revert with 0, 65
                                    if ceil32(32 * mem[_19328 + mem[_19328]]) + 1 < 0 or _19328 + ceil32(return_data.size) + ceil32(32 * mem[_19328 + mem[_19328]]) + 1 > test266151307():
                                        revert with 0, 65
                                    mem[64] = _19328 + ceil32(return_data.size) + ceil32(32 * mem[_19328 + mem[_19328]]) + 1
                                    mem[_19328 + ceil32(return_data.size)] = _19362
                                    require _19346 + (32 * _19362) + 32 <= return_data.size
                                    mem[_19328 + ceil32(return_data.size) + 32 len ceil32(32 * _19362)] = mem[_19328 + _19346 + 32 len ceil32(32 * _19362)]
                                    var122002 = _19328 + ceil32(return_data.size) + ceil32(32 * _19362) + 32
                                    if 1 >= _19362:
                                        revert with 0, 50
                                    _21903 = mem[_19328 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_19328 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19328 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22034 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22044 = mem[_22034]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21903) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22034]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / mem[_22034] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / mem[_22034]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22381 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22442 = mem[_22381]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22617 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22617] > !_22442:
                                                revert with 0, 17
                                            if mem[_22617] + _22442 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22617] + _22442:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22617] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6) + (_22442 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22382 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22444 = mem[_22382]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22618 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22618] > !_22444:
                                                revert with 0, 17
                                            if mem[_22618] + _22444 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22618] + _22444:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22618] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6) + (_22444 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903) / _22044 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19328 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19328 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22075 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22091 = mem[_22075]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22075]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / mem[_22075] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / mem[_22075]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22593 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22648 = mem[_22593]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22809 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22809] > !_22648:
                                                    revert with 0, 17
                                                if mem[_22809] + _22648 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22809] + _22648:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22809] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6) + (_22648 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22594 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22650 = mem[_22594]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22810 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22810] > !_22650:
                                                    revert with 0, 17
                                                if mem[_22810] + _22650 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22810] + _22650:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22810] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6) + (_22650 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / 10^stor259) / _22091 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19328 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19328 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23571 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23583 = mem[_23571]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23571]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / mem[_23571] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / mem[_23571]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23697 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23720 = mem[_23697]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23831 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23831] > !_23720:
                                                    revert with 0, 17
                                                if mem[_23831] + _23720 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23831] + _23720:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23831] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6) + (_23720 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23698 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23722 = mem[_23698]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23832 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23832] > !_23722:
                                                    revert with 0, 17
                                                if mem[_23832] + _23722 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23832] + _23722:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23832] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6) + (_23722 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21903 / u * v) / _23583 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _16284 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_16284]:
                                            revert with 0, 50
                                        mem[_16284 + 32] = token1Address
                                        if 1 >= mem[_16284]:
                                            revert with 0, 50
                                        mem[_16284 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_16284 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_16284 + 100] = 10^stor259
                                        mem[_16284 + 132] = 64
                                        mem[_16284 + 164] = mem[_16284]
                                        idx = 0
                                        u = _16284 + 32
                                        v = _16284 + 196
                                        while idx < mem[_16284]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _16284 + (32 * mem[_16284]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19327 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19345 = mem[_19327]
                                        require mem[_19327] <= test266151307()
                                        require _19327 + mem[_19327] + 31 < _19327 + return_data.size
                                        _19361 = mem[_19327 + mem[_19327]]
                                        if mem[_19327 + mem[_19327]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_19327 + mem[_19327]]) + 1 < 0 or _19327 + ceil32(return_data.size) + ceil32(32 * mem[_19327 + mem[_19327]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _19327 + ceil32(return_data.size) + ceil32(32 * mem[_19327 + mem[_19327]]) + 1
                                        mem[_19327 + ceil32(return_data.size)] = _19361
                                        require _19345 + (32 * _19361) + 32 <= return_data.size
                                        mem[_19327 + ceil32(return_data.size) + 32 len ceil32(32 * _19361)] = mem[_19327 + _19345 + 32 len ceil32(32 * _19361)]
                                        var127002 = _19327 + ceil32(return_data.size) + ceil32(32 * _19361) + 32
                                        if 1 >= _19361:
                                            revert with 0, 50
                                        _21902 = mem[_19327 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_19327 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19327 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22033 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22043 = mem[_22033]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21902) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22033]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / mem[_22033] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / mem[_22033]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22379 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22438 = mem[_22379]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22615 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22615] > !_22438:
                                                    revert with 0, 17
                                                if mem[_22615] + _22438 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22615] + _22438:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22615] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6) + (_22438 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22380 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22440 = mem[_22380]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22616 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22616] > !_22440:
                                                    revert with 0, 17
                                                if mem[_22616] + _22440 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22616] + _22440:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22616] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6) + (_22440 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902) / _22043 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19327 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19327 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22088 = mem[_22074]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22074]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / mem[_22074] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / mem[_22074]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22591 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22640 = mem[_22591]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22803 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22803] > !_22640:
                                                        revert with 0, 17
                                                    if mem[_22803] + _22640 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22803] + _22640:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22803] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6) + (_22640 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22592 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22642 = mem[_22592]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22804 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22804] > !_22642:
                                                        revert with 0, 17
                                                    if mem[_22804] + _22642 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22804] + _22642:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22804] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6) + (_22642 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / 10^stor259) / _22088 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_19327 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_19327 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23570 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23582 = mem[_23570]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23570]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / mem[_23570] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / mem[_23570]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23695 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23716 = mem[_23695]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23829 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23829] > !_23716:
                                                        revert with 0, 17
                                                    if mem[_23829] + _23716 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23829] + _23716:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23829] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6) + (_23716 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23696 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23718 = mem[_23696]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23830 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23830] > !_23718:
                                                        revert with 0, 17
                                                    if mem[_23830] + _23718 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23830] + _23718:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23830] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6) + (_23718 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21902 / u * v) / _23582 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _19342 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_19342]:
                                            revert with 0, 50
                                        mem[_19342 + 32] = token1Address
                                        if 1 >= mem[_19342]:
                                            revert with 0, 50
                                        mem[_19342 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_19342 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_19342 + 100] = u * v
                                        mem[_19342 + 132] = 64
                                        mem[_19342 + 164] = mem[_19342]
                                        idx = 0
                                        u = _19342 + 32
                                        v = _19342 + 196
                                        while idx < mem[_19342]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _19342 + (32 * mem[_19342]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21921 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21927 = mem[_21921]
                                        require mem[_21921] <= test266151307()
                                        require _21921 + mem[_21921] + 31 < _21921 + return_data.size
                                        _21933 = mem[_21921 + mem[_21921]]
                                        if mem[_21921 + mem[_21921]] > test266151307():
                                            revert with 0, 65
                                        if ceil32(32 * mem[_21921 + mem[_21921]]) + 1 < 0 or _21921 + ceil32(return_data.size) + ceil32(32 * mem[_21921 + mem[_21921]]) + 1 > test266151307():
                                            revert with 0, 65
                                        mem[64] = _21921 + ceil32(return_data.size) + ceil32(32 * mem[_21921 + mem[_21921]]) + 1
                                        mem[_21921 + ceil32(return_data.size)] = _21933
                                        require _21927 + (32 * _21933) + 32 <= return_data.size
                                        mem[_21921 + ceil32(return_data.size) + 32 len ceil32(32 * _21933)] = mem[_21921 + _21927 + 32 len ceil32(32 * _21933)]
                                        if 1 >= _21933:
                                            revert with 0, 50
                                        _23539 = mem[_21921 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21921 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21921 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23602 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23607 = mem[_23602]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23539) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_23602]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / mem[_23602] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / mem[_23602]:
                                                revert with 0, 17
                                            mem[mem[64] + 36] = this.address
                                            if not sub_abddf82e:
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23819 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23852 = mem[_23819]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23944 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23944] > !_23852:
                                                    revert with 0, 17
                                                if mem[_23944] + _23852 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23944] + _23852:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23944] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6) + (_23852 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                require ext_code.size(sub_4005760aAddress)
                                                staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23820 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23854 = mem[_23820]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23945 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23945] > !_23854:
                                                    revert with 0, 17
                                                if mem[_23945] + _23854 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23945] + _23854:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23945] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6) + (_23854 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539) / _23607 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21921 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21921 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23622 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23629 = mem[_23622]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23622]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / mem[_23622] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / mem[_23622]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23933 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23958 = mem[_23933]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24038 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24038] > !_23958:
                                                        revert with 0, 17
                                                    if mem[_24038] + _23958 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24038] + _23958:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24038] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6) + (_23958 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23934 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23960 = mem[_23934]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24039 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24039] > !_23960:
                                                        revert with 0, 17
                                                    if mem[_24039] + _23960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24039] + _23960:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24039] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6) + (_23960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / 10^stor259) / _23629 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21921 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21921 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _24293 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _24298 = mem[_24293]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_24293]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / mem[_24293] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / mem[_24293]:
                                                    revert with 0, 17
                                                mem[mem[64] + 36] = this.address
                                                if not sub_abddf82e:
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24335 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _24345 = mem[_24335]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24391 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24391] > !_24345:
                                                        revert with 0, 17
                                                    if mem[_24391] + _24345 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24391] + _24345:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24391] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6) + (_24345 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    require ext_code.size(sub_4005760aAddress)
                                                    staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24336 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _24347 = mem[_24336]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _24392 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_24392] > !_24347:
                                                        revert with 0, 17
                                                    if mem[_24392] + _24347 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24392] + _24347:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_24392] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6) + (_24347 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23539 / u * v) / _24298 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _16121 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_16121]:
                                    revert with 0, 50
                                mem[_16121 + 32] = token1Address
                                if 1 >= mem[_16121]:
                                    revert with 0, 50
                                mem[_16121 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_16121 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_16121 + 100] = 10^18
                                mem[_16121 + 132] = 64
                                mem[_16121 + 164] = mem[_16121]
                                idx = 0
                                u = _16121 + 32
                                v = _16121 + 196
                                while idx < mem[_16121]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _16121 + (32 * mem[_16121]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _19329 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _19347 = mem[_19329]
                                require mem[_19329] <= test266151307()
                                require _19329 + mem[_19329] + 31 < _19329 + return_data.size
                                _19363 = mem[_19329 + mem[_19329]]
                                if mem[_19329 + mem[_19329]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_19329 + mem[_19329]]) + 1 < 0 or _19329 + ceil32(return_data.size) + ceil32(32 * mem[_19329 + mem[_19329]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _19329 + ceil32(return_data.size) + ceil32(32 * mem[_19329 + mem[_19329]]) + 1
                                mem[_19329 + ceil32(return_data.size)] = _19363
                                require _19347 + (32 * _19363) + 32 <= return_data.size
                                mem[_19329 + ceil32(return_data.size) + 32 len ceil32(32 * _19363)] = mem[_19329 + _19347 + 32 len ceil32(32 * _19363)]
                                var116002 = _19329 + ceil32(return_data.size) + ceil32(32 * _19363) + 32
                                if 1 >= _19363:
                                    revert with 0, 50
                                _21904 = mem[_19329 + ceil32(return_data.size) + 64]
                                _21919 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21919]:
                                    revert with 0, 50
                                mem[_21919 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21919]:
                                    revert with 0, 50
                                mem[_21919 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21919 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21919 + 100] = _21904
                                mem[_21919 + 132] = 64
                                mem[_21919 + 164] = mem[_21919]
                                idx = 0
                                u = _21919 + 32
                                v = _21919 + 196
                                while idx < mem[_21919]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21919 + (32 * mem[_21919]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _23545 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _23546 = mem[_23545]
                                require mem[_23545] <= test266151307()
                                require _23545 + mem[_23545] + 31 < _23545 + return_data.size
                                _23547 = mem[_23545 + mem[_23545]]
                                if mem[_23545 + mem[_23545]] > test266151307():
                                    revert with 0, 65
                                if ceil32(32 * mem[_23545 + mem[_23545]]) + 1 < 0 or _23545 + ceil32(return_data.size) + ceil32(32 * mem[_23545 + mem[_23545]]) + 1 > test266151307():
                                    revert with 0, 65
                                mem[64] = _23545 + ceil32(return_data.size) + ceil32(32 * mem[_23545 + mem[_23545]]) + 1
                                mem[_23545 + ceil32(return_data.size)] = _23547
                                require _23546 + (32 * _23547) + 32 <= return_data.size
                                mem[_23545 + ceil32(return_data.size) + 32 len ceil32(32 * _23547)] = mem[_23545 + _23546 + 32 len ceil32(32 * _23547)]
                                if 1 >= _23547:
                                    revert with 0, 50
                                _24282 = mem[_23545 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_23545 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23545 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _24305 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _24306 = mem[_24305]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24282) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_24305]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / mem[_24305] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / mem[_24305]:
                                        revert with 0, 17
                                    mem[mem[64] + 36] = this.address
                                    if not sub_abddf82e:
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24389 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24401 = mem[_24389]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24425 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24425] > !_24401:
                                            revert with 0, 17
                                        if mem[_24425] + _24401 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24425] + _24401:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24425] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6) + (_24401 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        require ext_code.size(sub_4005760aAddress)
                                        staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24390 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _24403 = mem[_24390]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24426 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_24426] > !_24403:
                                            revert with 0, 17
                                        if mem[_24426] + _24403 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24426] + _24403:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_24426] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6) + (_24403 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282) / _24306 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_23545 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23545 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24309 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24312 = mem[_24309]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24309]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / mem[_24309] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / mem[_24309]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24423 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24431 = mem[_24423]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24447 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24447] > !_24431:
                                                revert with 0, 17
                                            if mem[_24447] + _24431 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24447] + _24431:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24447] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6) + (_24431 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24424 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24433 = mem[_24424]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24448 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24448] > !_24433:
                                                revert with 0, 17
                                            if mem[_24448] + _24433 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24448] + _24433:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24448] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6) + (_24433 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / 10^stor259) / _24312 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_23545 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_23545 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _24493 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _24494 = mem[_24493]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_24493]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / mem[_24493] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / mem[_24493]:
                                            revert with 0, 17
                                        mem[mem[64] + 36] = this.address
                                        if not sub_abddf82e:
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24499 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24501 = mem[_24499]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24509 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24509] > !_24501:
                                                revert with 0, 17
                                            if mem[_24509] + _24501 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24509] + _24501:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24509] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6) + (_24501 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            require ext_code.size(sub_4005760aAddress)
                                            staticcall sub_4005760aAddress.userInfo(uint256 arg1, address arg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24500 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _24503 = mem[_24500]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _24510 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_24510] > !_24503:
                                                revert with 0, 17
                                            if mem[_24510] + _24503 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_24510] + _24503:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_24510] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6) + (_24503 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _12244 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _24282 / u * v) / _24494 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    return memory
      from mem[64]
       len 32
}



}
